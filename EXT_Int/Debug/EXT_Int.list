
EXT_Int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000391c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003ae0  08003ae0  00004ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b08  08003b08  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b08  08003b08  00004b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b10  08003b10  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b10  08003b10  00004b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b14  08003b14  00004b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003b18  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000070  08003b88  00005070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  08003b88  00005724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca0a  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002037  00000000  00000000  00011aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00013ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000835  00000000  00000000  000145b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020363  00000000  00000000  00014de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e621  00000000  00000000  00035148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000beacc  00000000  00000000  00043769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102235  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a0  00000000  00000000  00102278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00105518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003ac8 	.word	0x08003ac8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08003ac8 	.word	0x08003ac8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == User_button_Pin) {
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000504:	d102      	bne.n	800050c <HAL_GPIO_EXTI_Callback+0x18>
		btn_press = 1;
 8000506:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <HAL_GPIO_EXTI_Callback+0x24>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
	}
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	200005b8 	.word	0x200005b8

0800051c <_write>:

// Send printf to uart1
int _write(int fd, char* ptr, int len) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d002      	beq.n	8000534 <_write+0x18>
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d111      	bne.n	8000558 <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	b29a      	uxth	r2, r3
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	68b9      	ldr	r1, [r7, #8]
 800053e:	4809      	ldr	r0, [pc, #36]	@ (8000564 <_write+0x48>)
 8000540:	f001 ff60 	bl	8002404 <HAL_UART_Transmit>
 8000544:	4603      	mov	r3, r0
 8000546:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000548:	7dfb      	ldrb	r3, [r7, #23]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d101      	bne.n	8000552 <_write+0x36>
      return len;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	e004      	b.n	800055c <_write+0x40>
    else
      return -1;
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	e001      	b.n	800055c <_write+0x40>
  }
  return -1;
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	2000008c 	.word	0x2000008c

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fbc5 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f857 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f91b 	bl	80007b0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800057a:	f000 f8bf 	bl	80006fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800057e:	f000 f8e7 	bl	8000750 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	now = HAL_GetTick();
 8000582:	f000 fc21 	bl	8000dc8 <HAL_GetTick>
 8000586:	4603      	mov	r3, r0
 8000588:	2200      	movs	r2, #0
 800058a:	469a      	mov	sl, r3
 800058c:	4693      	mov	fp, r2
 800058e:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <main+0xa0>)
 8000590:	e9c3 ab00 	strd	sl, fp, [r3]

  	if (now - last_blink >= blink_delays[blink_delay]){
 8000594:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <main+0xa0>)
 8000596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800059a:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <main+0xa4>)
 800059c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb61 0503 	sbc.w	r5, r1, r3
 80005a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <main+0xa8>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <main+0xac>)
 80005ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	2200      	movs	r2, #0
 80005b6:	4698      	mov	r8, r3
 80005b8:	4691      	mov	r9, r2
 80005ba:	4544      	cmp	r4, r8
 80005bc:	eb75 0309 	sbcs.w	r3, r5, r9
 80005c0:	d309      	bcc.n	80005d6 <main+0x6e>
  	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005c2:	2101      	movs	r1, #1
 80005c4:	4814      	ldr	r0, [pc, #80]	@ (8000618 <main+0xb0>)
 80005c6:	f000 feee 	bl	80013a6 <HAL_GPIO_TogglePin>

  	last_blink = now;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <main+0xa0>)
 80005cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005d0:	490e      	ldr	r1, [pc, #56]	@ (800060c <main+0xa4>)
 80005d2:	e9c1 2300 	strd	r2, r3, [r1]

  	}

  	if(btn_press == 1){
 80005d6:	4b11      	ldr	r3, [pc, #68]	@ (800061c <main+0xb4>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d1d1      	bne.n	8000582 <main+0x1a>

  		printf("Button pressed\n");
 80005de:	4810      	ldr	r0, [pc, #64]	@ (8000620 <main+0xb8>)
 80005e0:	f002 fede 	bl	80033a0 <puts>

  		blink_delay++;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <main+0xa8>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <main+0xa8>)
 80005ee:	701a      	strb	r2, [r3, #0]

  		if (blink_delay >= sizeof(blink_delays) / sizeof(blink_delays[0])) blink_delay = 0;
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <main+0xa8>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d902      	bls.n	80005fe <main+0x96>
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <main+0xa8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]

  		btn_press = 0;
 80005fe:	4b07      	ldr	r3, [pc, #28]	@ (800061c <main+0xb4>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
  	now = HAL_GetTick();
 8000604:	e7bd      	b.n	8000582 <main+0x1a>
 8000606:	bf00      	nop
 8000608:	200005c0 	.word	0x200005c0
 800060c:	200005c8 	.word	0x200005c8
 8000610:	200005b9 	.word	0x200005b9
 8000614:	20000000 	.word	0x20000000
 8000618:	40020400 	.word	0x40020400
 800061c:	200005b8 	.word	0x200005b8
 8000620:	08003ae0 	.word	0x08003ae0

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	@ 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 ff94 	bl	8003560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a28      	ldr	r2, [pc, #160]	@ (80006f4 <SystemClock_Config+0xd0>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a22      	ldr	r2, [pc, #136]	@ (80006f8 <SystemClock_Config+0xd4>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b20      	ldr	r3, [pc, #128]	@ (80006f8 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000688:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000694:	2308      	movs	r3, #8
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000698:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800069c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069e:	2304      	movs	r3, #4
 80006a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006a2:	2308      	movs	r3, #8
 80006a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fbd4 	bl	8001e5c <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ba:	f000 f941 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2103      	movs	r1, #3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 ffd0 	bl	8001680 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006e6:	f000 f92b 	bl	8000940 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_USART3_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	@ (800074c <MX_USART3_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <MX_USART3_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_USART3_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_USART3_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_USART3_UART_Init+0x4c>)
 8000734:	f001 fe16 	bl	8002364 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f8ff 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000008c 	.word	0x2000008c
 800074c:	40004800 	.word	0x40004800

08000750 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000754:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000756:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800075a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800075e:	2206      	movs	r2, #6
 8000760:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000764:	2202      	movs	r2, #2
 8000766:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800076a:	2200      	movs	r2, #0
 800076c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000770:	2202      	movs	r2, #2
 8000772:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000776:	2201      	movs	r2, #1
 8000778:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800077c:	2200      	movs	r2, #0
 800077e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000782:	2200      	movs	r2, #0
 8000784:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000788:	2201      	movs	r2, #1
 800078a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800078e:	2201      	movs	r2, #1
 8000790:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000794:	2200      	movs	r2, #0
 8000796:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800079a:	f000 fe37 	bl	800140c <HAL_PCD_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80007a4:	f000 f8cc 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000d4 	.word	0x200000d4

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	@ 0x30
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	4b59      	ldr	r3, [pc, #356]	@ (8000930 <MX_GPIO_Init+0x180>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a58      	ldr	r2, [pc, #352]	@ (8000930 <MX_GPIO_Init+0x180>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b56      	ldr	r3, [pc, #344]	@ (8000930 <MX_GPIO_Init+0x180>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	4b52      	ldr	r3, [pc, #328]	@ (8000930 <MX_GPIO_Init+0x180>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a51      	ldr	r2, [pc, #324]	@ (8000930 <MX_GPIO_Init+0x180>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b4f      	ldr	r3, [pc, #316]	@ (8000930 <MX_GPIO_Init+0x180>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b4b      	ldr	r3, [pc, #300]	@ (8000930 <MX_GPIO_Init+0x180>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a4a      	ldr	r2, [pc, #296]	@ (8000930 <MX_GPIO_Init+0x180>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b48      	ldr	r3, [pc, #288]	@ (8000930 <MX_GPIO_Init+0x180>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b44      	ldr	r3, [pc, #272]	@ (8000930 <MX_GPIO_Init+0x180>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a43      	ldr	r2, [pc, #268]	@ (8000930 <MX_GPIO_Init+0x180>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b41      	ldr	r3, [pc, #260]	@ (8000930 <MX_GPIO_Init+0x180>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b3d      	ldr	r3, [pc, #244]	@ (8000930 <MX_GPIO_Init+0x180>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a3c      	ldr	r2, [pc, #240]	@ (8000930 <MX_GPIO_Init+0x180>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b3a      	ldr	r3, [pc, #232]	@ (8000930 <MX_GPIO_Init+0x180>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b36      	ldr	r3, [pc, #216]	@ (8000930 <MX_GPIO_Init+0x180>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a35      	ldr	r2, [pc, #212]	@ (8000930 <MX_GPIO_Init+0x180>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b33      	ldr	r3, [pc, #204]	@ (8000930 <MX_GPIO_Init+0x180>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2101      	movs	r1, #1
 8000872:	4830      	ldr	r0, [pc, #192]	@ (8000934 <MX_GPIO_Init+0x184>)
 8000874:	f000 fd7e 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800087e:	482d      	ldr	r0, [pc, #180]	@ (8000934 <MX_GPIO_Init+0x184>)
 8000880:	f000 fd78 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2140      	movs	r1, #64	@ 0x40
 8000888:	482b      	ldr	r0, [pc, #172]	@ (8000938 <MX_GPIO_Init+0x188>)
 800088a:	f000 fd73 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_button_Pin */
  GPIO_InitStruct.Pin = User_button_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000894:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(User_button_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4825      	ldr	r0, [pc, #148]	@ (800093c <MX_GPIO_Init+0x18c>)
 80008a6:	f000 fbd1 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008ae:	2311      	movs	r3, #17
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	481c      	ldr	r0, [pc, #112]	@ (8000934 <MX_GPIO_Init+0x184>)
 80008c2:	f000 fbc3 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008c6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4815      	ldr	r0, [pc, #84]	@ (8000934 <MX_GPIO_Init+0x184>)
 80008e0:	f000 fbb4 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e4:	2340      	movs	r3, #64	@ 0x40
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	480f      	ldr	r0, [pc, #60]	@ (8000938 <MX_GPIO_Init+0x188>)
 80008fc:	f000 fba6 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4809      	ldr	r0, [pc, #36]	@ (8000938 <MX_GPIO_Init+0x188>)
 8000914:	f000 fb9a 	bl	800104c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2028      	movs	r0, #40	@ 0x28
 800091e:	f000 fb5e 	bl	8000fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000922:	2028      	movs	r0, #40	@ 0x28
 8000924:	f000 fb77 	bl	8001016 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	@ 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020400 	.word	0x40020400
 8000938:	40021800 	.word	0x40021800
 800093c:	40020800 	.word	0x40020800

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	@ 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	@ 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	@ (8000a20 <HAL_UART_MspInit+0x84>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12c      	bne.n	8000a18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a10      	ldr	r2, [pc, #64]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <HAL_UART_MspInit+0x8c>)
 8000a14:	f000 fb1a 	bl	800104c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	@ 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40004800 	.word	0x40004800
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b098      	sub	sp, #96	@ 0x60
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	223c      	movs	r2, #60	@ 0x3c
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 fd87 	bl	8003560 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a5a:	d14d      	bne.n	8000af8 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 f829 	bl	8001ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000a74:	f7ff ff64 	bl	8000940 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <HAL_PCD_MspInit+0xd4>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	4a1f      	ldr	r2, [pc, #124]	@ (8000b00 <HAL_PCD_MspInit+0xd4>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a88:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <HAL_PCD_MspInit+0xd4>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a94:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4814      	ldr	r0, [pc, #80]	@ (8000b04 <HAL_PCD_MspInit+0xd8>)
 8000ab2:	f000 facb 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ab6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480e      	ldr	r0, [pc, #56]	@ (8000b04 <HAL_PCD_MspInit+0xd8>)
 8000acc:	f000 fabe 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <HAL_PCD_MspInit+0xd4>)
 8000ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <HAL_PCD_MspInit+0xd4>)
 8000ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ada:	6353      	str	r3, [r2, #52]	@ 0x34
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <HAL_PCD_MspInit+0xd4>)
 8000ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae4:	4a06      	ldr	r2, [pc, #24]	@ (8000b00 <HAL_PCD_MspInit+0xd4>)
 8000ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aea:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aec:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <HAL_PCD_MspInit+0xd4>)
 8000aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000af8:	bf00      	nop
 8000afa:	3760      	adds	r7, #96	@ 0x60
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <NMI_Handler+0x4>

08000b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <MemManage_Handler+0x4>

08000b20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f91f 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_button_Pin);
 8000b6a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b6e:	f000 fc35 	bl	80013dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e00a      	b.n	8000b9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b88:	f3af 8000 	nop.w
 8000b8c:	4601      	mov	r1, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	60ba      	str	r2, [r7, #8]
 8000b94:	b2ca      	uxtb	r2, r1
 8000b96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	dbf0      	blt.n	8000b88 <_read+0x12>
  }

  return len;
 8000ba6:	687b      	ldr	r3, [r7, #4]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bd8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_isatty>:

int _isatty(int file)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bf0:	2301      	movs	r3, #1
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b085      	sub	sp, #20
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f002 fcd8 	bl	80035fc <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20040000 	.word	0x20040000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	200005d0 	.word	0x200005d0
 8000c80:	20000728 	.word	0x20000728

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cac:	f7ff ffea 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f002 fc97 	bl	8003608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc45 	bl	8000568 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ce0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cec:	08003b18 	.word	0x08003b18
  ldr r2, =_sbss
 8000cf0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf4:	20000724 	.word	0x20000724

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f94f 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fe0c 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f967 	bl	8001032 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f92f 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000010 	.word	0x20000010
 8000d9c:	2000000c 	.word	0x2000000c

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000010 	.word	0x20000010
 8000dc4:	200005d4 	.word	0x200005d4

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200005d4 	.word	0x200005d4

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000010 	.word	0x20000010

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	@ (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	@ (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	@ (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	@ 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff29 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff3e 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa2 	bl	8000f84 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	e165      	b.n	8001334 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 8154 	bne.w	800132e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	2b02      	cmp	r3, #2
 800109c:	d130      	bne.n	8001100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	f003 0201 	and.w	r2, r3, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b03      	cmp	r3, #3
 800110a:	d017      	beq.n	800113c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80ae 	beq.w	800132e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <HAL_GPIO_Init+0x300>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	4a5c      	ldr	r2, [pc, #368]	@ (800134c <HAL_GPIO_Init+0x300>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e2:	4b5a      	ldr	r3, [pc, #360]	@ (800134c <HAL_GPIO_Init+0x300>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ee:	4a58      	ldr	r2, [pc, #352]	@ (8001350 <HAL_GPIO_Init+0x304>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4f      	ldr	r2, [pc, #316]	@ (8001354 <HAL_GPIO_Init+0x308>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d025      	beq.n	8001266 <HAL_GPIO_Init+0x21a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4e      	ldr	r2, [pc, #312]	@ (8001358 <HAL_GPIO_Init+0x30c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01f      	beq.n	8001262 <HAL_GPIO_Init+0x216>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4d      	ldr	r2, [pc, #308]	@ (800135c <HAL_GPIO_Init+0x310>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x212>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4c      	ldr	r2, [pc, #304]	@ (8001360 <HAL_GPIO_Init+0x314>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x20e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4b      	ldr	r2, [pc, #300]	@ (8001364 <HAL_GPIO_Init+0x318>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x20a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4a      	ldr	r2, [pc, #296]	@ (8001368 <HAL_GPIO_Init+0x31c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x206>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a49      	ldr	r2, [pc, #292]	@ (800136c <HAL_GPIO_Init+0x320>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x202>
 800124a:	2306      	movs	r3, #6
 800124c:	e00c      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 800124e:	2307      	movs	r3, #7
 8001250:	e00a      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001252:	2305      	movs	r3, #5
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001256:	2304      	movs	r3, #4
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4935      	ldr	r1, [pc, #212]	@ (8001350 <HAL_GPIO_Init+0x304>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <HAL_GPIO_Init+0x324>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012aa:	4a31      	ldr	r2, [pc, #196]	@ (8001370 <HAL_GPIO_Init+0x324>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <HAL_GPIO_Init+0x324>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d4:	4a26      	ldr	r2, [pc, #152]	@ (8001370 <HAL_GPIO_Init+0x324>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012da:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <HAL_GPIO_Init+0x324>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <HAL_GPIO_Init+0x324>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001304:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <HAL_GPIO_Init+0x324>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001328:	4a11      	ldr	r2, [pc, #68]	@ (8001370 <HAL_GPIO_Init+0x324>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f ae96 	bls.w	8001068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3724      	adds	r7, #36	@ 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40021400 	.word	0x40021400
 800136c:	40021800 	.word	0x40021800
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001390:	e003      	b.n	800139a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b8:	887a      	ldrh	r2, [r7, #2]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4013      	ands	r3, r2
 80013be:	041a      	lsls	r2, r3, #16
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	400b      	ands	r3, r1
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	619a      	str	r2, [r3, #24]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f87a 	bl	80004f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40013c00 	.word	0x40013c00

0800140c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af02      	add	r7, sp, #8
 8001412:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e108      	b.n	8001630 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d106      	bne.n	800143e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff faf7 	bl	8000a2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800144c:	d102      	bne.n	8001454 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fbf3 	bl	8002c44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7c1a      	ldrb	r2, [r3, #16]
 8001466:	f88d 2000 	strb.w	r2, [sp]
 800146a:	3304      	adds	r3, #4
 800146c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146e:	f001 fb85 	bl	8002b7c <USB_CoreInit>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2202      	movs	r2, #2
 800147c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0d5      	b.n	8001630 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f001 fbeb 	bl	8002c66 <USB_SetCurrentMode>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2202      	movs	r2, #2
 800149a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0c6      	b.n	8001630 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e04a      	b.n	800153e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	3315      	adds	r3, #21
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	3314      	adds	r3, #20
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	b298      	uxth	r0, r3
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	332e      	adds	r3, #46	@ 0x2e
 80014e4:	4602      	mov	r2, r0
 80014e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	3318      	adds	r3, #24
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	331c      	adds	r3, #28
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	3320      	adds	r3, #32
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	3324      	adds	r3, #36	@ 0x24
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	3301      	adds	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	791b      	ldrb	r3, [r3, #4]
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3af      	bcc.n	80014a8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e044      	b.n	80015d8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	3301      	adds	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	791b      	ldrb	r3, [r3, #4]
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d3b5      	bcc.n	800154e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7c1a      	ldrb	r2, [r3, #16]
 80015ea:	f88d 2000 	strb.w	r2, [sp]
 80015ee:	3304      	adds	r3, #4
 80015f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f2:	f001 fb85 	bl	8002d00 <USB_DevInit>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e013      	b.n	8001630 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7b1b      	ldrb	r3, [r3, #12]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f80a 	bl	8001638 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f001 fd40 	bl	80030ae <USB_DevDisconnect>

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166a:	f043 0303 	orr.w	r3, r3, #3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0cc      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b68      	ldr	r3, [pc, #416]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d90c      	bls.n	80016bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b65      	ldr	r3, [pc, #404]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b63      	ldr	r3, [pc, #396]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0b8      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d4:	4b59      	ldr	r3, [pc, #356]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a58      	ldr	r2, [pc, #352]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ec:	4b53      	ldr	r3, [pc, #332]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a52      	ldr	r2, [pc, #328]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b50      	ldr	r3, [pc, #320]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	494d      	ldr	r1, [pc, #308]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d044      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b47      	ldr	r3, [pc, #284]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d119      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d003      	beq.n	800173e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173a:	2b03      	cmp	r3, #3
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b3f      	ldr	r3, [pc, #252]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e06f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3b      	ldr	r3, [pc, #236]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e067      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b37      	ldr	r3, [pc, #220]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4934      	ldr	r1, [pc, #208]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff fb2a 	bl	8000dc8 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff fb26 	bl	8000dc8 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e04f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d20c      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e032      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4916      	ldr	r1, [pc, #88]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	490e      	ldr	r1, [pc, #56]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001806:	f000 f821 	bl	800184c <HAL_RCC_GetSysClockFreq>
 800180a:	4602      	mov	r2, r0
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	490a      	ldr	r1, [pc, #40]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	5ccb      	ldrb	r3, [r1, r3]
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	4a09      	ldr	r2, [pc, #36]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fa8a 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00
 800183c:	40023800 	.word	0x40023800
 8001840:	08003af0 	.word	0x08003af0
 8001844:	20000008 	.word	0x20000008
 8001848:	2000000c 	.word	0x2000000c

0800184c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800184c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001850:	b094      	sub	sp, #80	@ 0x50
 8001852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001864:	4b79      	ldr	r3, [pc, #484]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b08      	cmp	r3, #8
 800186e:	d00d      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x40>
 8001870:	2b08      	cmp	r3, #8
 8001872:	f200 80e1 	bhi.w	8001a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x34>
 800187a:	2b04      	cmp	r3, #4
 800187c:	d003      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x3a>
 800187e:	e0db      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001880:	4b73      	ldr	r3, [pc, #460]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001882:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001884:	e0db      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001886:	4b73      	ldr	r3, [pc, #460]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001888:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800188a:	e0d8      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800188c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001894:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001896:	4b6d      	ldr	r3, [pc, #436]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d063      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	099b      	lsrs	r3, r3, #6
 80018a8:	2200      	movs	r2, #0
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018be:	4622      	mov	r2, r4
 80018c0:	462b      	mov	r3, r5
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	0159      	lsls	r1, r3, #5
 80018cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d0:	0150      	lsls	r0, r2, #5
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4621      	mov	r1, r4
 80018d8:	1a51      	subs	r1, r2, r1
 80018da:	6139      	str	r1, [r7, #16]
 80018dc:	4629      	mov	r1, r5
 80018de:	eb63 0301 	sbc.w	r3, r3, r1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018f0:	4659      	mov	r1, fp
 80018f2:	018b      	lsls	r3, r1, #6
 80018f4:	4651      	mov	r1, sl
 80018f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fa:	4651      	mov	r1, sl
 80018fc:	018a      	lsls	r2, r1, #6
 80018fe:	4651      	mov	r1, sl
 8001900:	ebb2 0801 	subs.w	r8, r2, r1
 8001904:	4659      	mov	r1, fp
 8001906:	eb63 0901 	sbc.w	r9, r3, r1
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800191a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800191e:	4690      	mov	r8, r2
 8001920:	4699      	mov	r9, r3
 8001922:	4623      	mov	r3, r4
 8001924:	eb18 0303 	adds.w	r3, r8, r3
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	462b      	mov	r3, r5
 800192c:	eb49 0303 	adc.w	r3, r9, r3
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800193e:	4629      	mov	r1, r5
 8001940:	024b      	lsls	r3, r1, #9
 8001942:	4621      	mov	r1, r4
 8001944:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001948:	4621      	mov	r1, r4
 800194a:	024a      	lsls	r2, r1, #9
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001952:	2200      	movs	r2, #0
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001956:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800195c:	f7fe fc52 	bl	8000204 <__aeabi_uldivmod>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4613      	mov	r3, r2
 8001966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001968:	e058      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196a:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	099b      	lsrs	r3, r3, #6
 8001970:	2200      	movs	r2, #0
 8001972:	4618      	mov	r0, r3
 8001974:	4611      	mov	r1, r2
 8001976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001984:	4642      	mov	r2, r8
 8001986:	464b      	mov	r3, r9
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	0159      	lsls	r1, r3, #5
 8001992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001996:	0150      	lsls	r0, r2, #5
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4641      	mov	r1, r8
 800199e:	ebb2 0a01 	subs.w	sl, r2, r1
 80019a2:	4649      	mov	r1, r9
 80019a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019bc:	ebb2 040a 	subs.w	r4, r2, sl
 80019c0:	eb63 050b 	sbc.w	r5, r3, fp
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	00eb      	lsls	r3, r5, #3
 80019ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019d2:	00e2      	lsls	r2, r4, #3
 80019d4:	4614      	mov	r4, r2
 80019d6:	461d      	mov	r5, r3
 80019d8:	4643      	mov	r3, r8
 80019da:	18e3      	adds	r3, r4, r3
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	464b      	mov	r3, r9
 80019e0:	eb45 0303 	adc.w	r3, r5, r3
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019f2:	4629      	mov	r1, r5
 80019f4:	028b      	lsls	r3, r1, #10
 80019f6:	4621      	mov	r1, r4
 80019f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019fc:	4621      	mov	r1, r4
 80019fe:	028a      	lsls	r2, r1, #10
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a06:	2200      	movs	r2, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	61fa      	str	r2, [r7, #28]
 8001a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a10:	f7fe fbf8 	bl	8000204 <__aeabi_uldivmod>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	3301      	adds	r3, #1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a36:	e002      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3750      	adds	r7, #80	@ 0x50
 8001a44:	46bd      	mov	sp, r7
 8001a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	007a1200 	.word	0x007a1200

08001a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008

08001a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a74:	f7ff fff0 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	0a9b      	lsrs	r3, r3, #10
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4903      	ldr	r1, [pc, #12]	@ (8001a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	08003b00 	.word	0x08003b00

08001a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a9c:	f7ff ffdc 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0b5b      	lsrs	r3, r3, #13
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4903      	ldr	r1, [pc, #12]	@ (8001abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08003b00 	.word	0x08003b00

08001ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001ae0:	4b87      	ldr	r3, [pc, #540]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	4984      	ldr	r1, [pc, #528]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8001afe:	2301      	movs	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d010      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001b0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b14:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4978      	ldr	r1, [pc, #480]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8083 	beq.w	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b6f      	ldr	r3, [pc, #444]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	4a6e      	ldr	r2, [pc, #440]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a69      	ldr	r2, [pc, #420]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b66:	f7ff f92f 	bl	8000dc8 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7ff f92b 	bl	8000dc8 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e162      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001b80:	4b60      	ldr	r3, [pc, #384]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b94:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d02f      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d028      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001baa:	4b55      	ldr	r3, [pc, #340]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bb2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bb4:	4b54      	ldr	r3, [pc, #336]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bba:	4b53      	ldr	r3, [pc, #332]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001bc0:	4a4f      	ldr	r2, [pc, #316]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d114      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f8f9 	bl	8000dc8 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff f8f5 	bl	8000dc8 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e12a      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf0:	4b43      	ldr	r3, [pc, #268]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0ee      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001c08:	d10d      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c1e:	4938      	ldr	r1, [pc, #224]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
 8001c24:	e005      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8001c26:	4b36      	ldr	r3, [pc, #216]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	4a35      	ldr	r2, [pc, #212]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c2c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001c30:	6093      	str	r3, [r2, #8]
 8001c32:	4b33      	ldr	r3, [pc, #204]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3e:	4930      	ldr	r1, [pc, #192]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001c56:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c58:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00a      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c66:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c6c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	4922      	ldr	r1, [pc, #136]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d011      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c8e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c96:	491a      	ldr	r1, [pc, #104]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ca6:	d101      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00a      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001cb8:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cbe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	490e      	ldr	r1, [pc, #56]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d004      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b80      	cmp	r3, #128	@ 0x80
 8001cda:	f040 8091 	bne.w	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cde:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f870 	bl	8000dc8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cea:	e013      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cec:	f7ff f86c 	bl	8000dc8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d90c      	bls.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0a3      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40007000 	.word	0x40007000
 8001d08:	42470e40 	.word	0x42470e40
 8001d0c:	424711e0 	.word	0x424711e0
 8001d10:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d14:	4b4e      	ldr	r3, [pc, #312]	@ (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e5      	bne.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001d20:	4a4c      	ldr	r2, [pc, #304]	@ (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d26:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d023      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d019      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001d64:	d00e      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d019      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d115      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001d82:	d110      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	061b      	lsls	r3, r3, #24
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	071b      	lsls	r3, r3, #28
 8001d9e:	492c      	ldr	r1, [pc, #176]	@ (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d010      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	019b      	lsls	r3, r3, #6
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	061b      	lsls	r3, r3, #24
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	071b      	lsls	r3, r3, #28
 8001dcc:	4920      	ldr	r1, [pc, #128]	@ (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001dd4:	4b20      	ldr	r3, [pc, #128]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dda:	f7fe fff5 	bl	8000dc8 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001de2:	f7fe fff1 	bl	8000dc8 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e028      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e0c:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	490d      	ldr	r1, [pc, #52]	@ (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001e2e:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e34:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3c:	4904      	ldr	r1, [pc, #16]	@ (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	424710d8 	.word	0x424710d8
 8001e58:	42470068 	.word	0x42470068

08001e5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e273      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d075      	beq.n	8001f66 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e7a:	4b88      	ldr	r3, [pc, #544]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d00c      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e86:	4b85      	ldr	r3, [pc, #532]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d112      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e92:	4b82      	ldr	r3, [pc, #520]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea0:	4b7e      	ldr	r3, [pc, #504]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d05b      	beq.n	8001f64 <HAL_RCC_OscConfig+0x108>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d157      	bne.n	8001f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e24e      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec0:	d106      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x74>
 8001ec2:	4b76      	ldr	r3, [pc, #472]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a75      	ldr	r2, [pc, #468]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e01d      	b.n	8001f0c <HAL_RCC_OscConfig+0xb0>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x98>
 8001eda:	4b70      	ldr	r3, [pc, #448]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6f      	ldr	r2, [pc, #444]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6c      	ldr	r2, [pc, #432]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCC_OscConfig+0xb0>
 8001ef4:	4b69      	ldr	r3, [pc, #420]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a68      	ldr	r2, [pc, #416]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b66      	ldr	r3, [pc, #408]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a65      	ldr	r2, [pc, #404]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe ff58 	bl	8000dc8 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7fe ff54 	bl	8000dc8 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	@ 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e213      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b5b      	ldr	r3, [pc, #364]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0xc0>
 8001f3a:	e014      	b.n	8001f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7fe ff44 	bl	8000dc8 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7fe ff40 	bl	8000dc8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1ff      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	4b51      	ldr	r3, [pc, #324]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0xe8>
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d063      	beq.n	800203a <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f72:	4b4a      	ldr	r3, [pc, #296]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7e:	4b47      	ldr	r3, [pc, #284]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d11c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f8a:	4b44      	ldr	r3, [pc, #272]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d116      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	4b41      	ldr	r3, [pc, #260]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_RCC_OscConfig+0x152>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e1d3      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fae:	4b3b      	ldr	r3, [pc, #236]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4937      	ldr	r1, [pc, #220]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	e03a      	b.n	800203a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fcc:	4b34      	ldr	r3, [pc, #208]	@ (80020a0 <HAL_RCC_OscConfig+0x244>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fef9 	bl	8000dc8 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fda:	f7fe fef5 	bl	8000dc8 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e1b4      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	4b2b      	ldr	r3, [pc, #172]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4b28      	ldr	r3, [pc, #160]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4925      	ldr	r1, [pc, #148]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e015      	b.n	800203a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200e:	4b24      	ldr	r3, [pc, #144]	@ (80020a0 <HAL_RCC_OscConfig+0x244>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7fe fed8 	bl	8000dc8 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201c:	f7fe fed4 	bl	8000dc8 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e193      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d036      	beq.n	80020b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d016      	beq.n	800207c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <HAL_RCC_OscConfig+0x248>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7fe feb8 	bl	8000dc8 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7fe feb4 	bl	8000dc8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e173      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_RCC_OscConfig+0x240>)
 8002070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x200>
 800207a:	e01b      	b.n	80020b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <HAL_RCC_OscConfig+0x248>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002082:	f7fe fea1 	bl	8000dc8 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	e00e      	b.n	80020a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208a:	f7fe fe9d 	bl	8000dc8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d907      	bls.n	80020a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e15c      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
 800209c:	40023800 	.word	0x40023800
 80020a0:	42470000 	.word	0x42470000
 80020a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a8:	4b8a      	ldr	r3, [pc, #552]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 80020aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ea      	bne.n	800208a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 8097 	beq.w	80021f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c6:	4b83      	ldr	r3, [pc, #524]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10f      	bne.n	80020f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	4b7f      	ldr	r3, [pc, #508]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	4a7e      	ldr	r2, [pc, #504]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e2:	4b7c      	ldr	r3, [pc, #496]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ee:	2301      	movs	r3, #1
 80020f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b79      	ldr	r3, [pc, #484]	@ (80022d8 <HAL_RCC_OscConfig+0x47c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fe:	4b76      	ldr	r3, [pc, #472]	@ (80022d8 <HAL_RCC_OscConfig+0x47c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a75      	ldr	r2, [pc, #468]	@ (80022d8 <HAL_RCC_OscConfig+0x47c>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210a:	f7fe fe5d 	bl	8000dc8 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002112:	f7fe fe59 	bl	8000dc8 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e118      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	4b6c      	ldr	r3, [pc, #432]	@ (80022d8 <HAL_RCC_OscConfig+0x47c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x2ea>
 8002138:	4b66      	ldr	r3, [pc, #408]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213c:	4a65      	ldr	r2, [pc, #404]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6713      	str	r3, [r2, #112]	@ 0x70
 8002144:	e01c      	b.n	8002180 <HAL_RCC_OscConfig+0x324>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b05      	cmp	r3, #5
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x30c>
 800214e:	4b61      	ldr	r3, [pc, #388]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002152:	4a60      	ldr	r2, [pc, #384]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6713      	str	r3, [r2, #112]	@ 0x70
 800215a:	4b5e      	ldr	r3, [pc, #376]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215e:	4a5d      	ldr	r2, [pc, #372]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6713      	str	r3, [r2, #112]	@ 0x70
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0x324>
 8002168:	4b5a      	ldr	r3, [pc, #360]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216c:	4a59      	ldr	r2, [pc, #356]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	@ 0x70
 8002174:	4b57      	ldr	r3, [pc, #348]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002178:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d015      	beq.n	80021b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7fe fe1e 	bl	8000dc8 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7fe fe1a 	bl	8000dc8 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e0d7      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a6:	4b4b      	ldr	r3, [pc, #300]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0ee      	beq.n	8002190 <HAL_RCC_OscConfig+0x334>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7fe fe08 	bl	8000dc8 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7fe fe04 	bl	8000dc8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0c1      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d2:	4b40      	ldr	r3, [pc, #256]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1ee      	bne.n	80021bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e4:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	4a3a      	ldr	r2, [pc, #232]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 80021ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80ad 	beq.w	8002354 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021fa:	4b36      	ldr	r3, [pc, #216]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b08      	cmp	r3, #8
 8002204:	d060      	beq.n	80022c8 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d145      	bne.n	800229a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	4b33      	ldr	r3, [pc, #204]	@ (80022dc <HAL_RCC_OscConfig+0x480>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe fdd8 	bl	8000dc8 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221c:	f7fe fdd4 	bl	8000dc8 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e093      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	4b29      	ldr	r3, [pc, #164]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	019b      	lsls	r3, r3, #6
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	085b      	lsrs	r3, r3, #1
 8002252:	3b01      	subs	r3, #1
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	071b      	lsls	r3, r3, #28
 8002266:	491b      	ldr	r1, [pc, #108]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b1b      	ldr	r3, [pc, #108]	@ (80022dc <HAL_RCC_OscConfig+0x480>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7fe fda9 	bl	8000dc8 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227a:	f7fe fda5 	bl	8000dc8 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e064      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228c:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x41e>
 8002298:	e05c      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <HAL_RCC_OscConfig+0x480>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe fd92 	bl	8000dc8 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe fd8e 	bl	8000dc8 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e04d      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_RCC_OscConfig+0x478>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x44c>
 80022c6:	e045      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e040      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40007000 	.word	0x40007000
 80022dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002360 <HAL_RCC_OscConfig+0x504>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d030      	beq.n	8002350 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d129      	bne.n	8002350 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d122      	bne.n	8002350 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	4293      	cmp	r3, r2
 800231a:	d119      	bne.n	8002350 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	3b01      	subs	r3, #1
 800232a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d10f      	bne.n	8002350 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d107      	bne.n	8002350 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e042      	b.n	80023fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe fb06 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2224      	movs	r2, #36	@ 0x24
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f973 	bl	8002694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	@ 0x28
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	4613      	mov	r3, r2
 8002412:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b20      	cmp	r3, #32
 8002422:	d175      	bne.n	8002510 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_UART_Transmit+0x2c>
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e06e      	b.n	8002512 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2221      	movs	r2, #33	@ 0x21
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002442:	f7fe fcc1 	bl	8000dc8 <HAL_GetTick>
 8002446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	88fa      	ldrh	r2, [r7, #6]
 8002452:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800245c:	d108      	bne.n	8002470 <HAL_UART_Transmit+0x6c>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	e003      	b.n	8002478 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002478:	e02e      	b.n	80024d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2200      	movs	r2, #0
 8002482:	2180      	movs	r1, #128	@ 0x80
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f848 	bl	800251a <UART_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e03a      	b.n	8002512 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10b      	bne.n	80024ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3302      	adds	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	e007      	b.n	80024ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	3301      	adds	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1cb      	bne.n	800247a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2140      	movs	r1, #64	@ 0x40
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f814 	bl	800251a <UART_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e006      	b.n	8002512 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	e000      	b.n	8002512 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002510:	2302      	movs	r3, #2
  }
}
 8002512:	4618      	mov	r0, r3
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	4613      	mov	r3, r2
 8002528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800252a:	e03b      	b.n	80025a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002532:	d037      	beq.n	80025a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002534:	f7fe fc48 	bl	8000dc8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	6a3a      	ldr	r2, [r7, #32]
 8002540:	429a      	cmp	r2, r3
 8002542:	d302      	bcc.n	800254a <UART_WaitOnFlagUntilTimeout+0x30>
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e03a      	b.n	80025c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d023      	beq.n	80025a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b80      	cmp	r3, #128	@ 0x80
 8002560:	d020      	beq.n	80025a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b40      	cmp	r3, #64	@ 0x40
 8002566:	d01d      	beq.n	80025a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b08      	cmp	r3, #8
 8002574:	d116      	bne.n	80025a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f81d 	bl	80025cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2208      	movs	r2, #8
 8002596:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e00f      	b.n	80025c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4013      	ands	r3, r2
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d0b4      	beq.n	800252c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b095      	sub	sp, #84	@ 0x54
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025de:	e853 3f00 	ldrex	r3, [r3]
 80025e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	330c      	adds	r3, #12
 80025f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80025f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025fc:	e841 2300 	strex	r3, r2, [r1]
 8002600:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e5      	bne.n	80025d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3314      	adds	r3, #20
 800260e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	e853 3f00 	ldrex	r3, [r3]
 8002616:	61fb      	str	r3, [r7, #28]
   return(result);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3314      	adds	r3, #20
 8002626:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002628:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800262a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800262e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002630:	e841 2300 	strex	r3, r2, [r1]
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e5      	bne.n	8002608 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	2b01      	cmp	r3, #1
 8002642:	d119      	bne.n	8002678 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	330c      	adds	r3, #12
 800264a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	e853 3f00 	ldrex	r3, [r3]
 8002652:	60bb      	str	r3, [r7, #8]
   return(result);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f023 0310 	bic.w	r3, r3, #16
 800265a:	647b      	str	r3, [r7, #68]	@ 0x44
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	330c      	adds	r3, #12
 8002662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002664:	61ba      	str	r2, [r7, #24]
 8002666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002668:	6979      	ldr	r1, [r7, #20]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	e841 2300 	strex	r3, r2, [r1]
 8002670:	613b      	str	r3, [r7, #16]
   return(result);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e5      	bne.n	8002644 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002686:	bf00      	nop
 8002688:	3754      	adds	r7, #84	@ 0x54
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002698:	b0c0      	sub	sp, #256	@ 0x100
 800269a:	af00      	add	r7, sp, #0
 800269c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b0:	68d9      	ldr	r1, [r3, #12]
 80026b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	ea40 0301 	orr.w	r3, r0, r1
 80026bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026ec:	f021 010c 	bic.w	r1, r1, #12
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026fa:	430b      	orrs	r3, r1
 80026fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800270a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270e:	6999      	ldr	r1, [r3, #24]
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	ea40 0301 	orr.w	r3, r0, r1
 800271a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b8f      	ldr	r3, [pc, #572]	@ (8002960 <UART_SetConfig+0x2cc>)
 8002724:	429a      	cmp	r2, r3
 8002726:	d005      	beq.n	8002734 <UART_SetConfig+0xa0>
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b8d      	ldr	r3, [pc, #564]	@ (8002964 <UART_SetConfig+0x2d0>)
 8002730:	429a      	cmp	r2, r3
 8002732:	d104      	bne.n	800273e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002734:	f7ff f9b0 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 8002738:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800273c:	e003      	b.n	8002746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800273e:	f7ff f997 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 8002742:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002750:	f040 810c 	bne.w	800296c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002758:	2200      	movs	r2, #0
 800275a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800275e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002766:	4622      	mov	r2, r4
 8002768:	462b      	mov	r3, r5
 800276a:	1891      	adds	r1, r2, r2
 800276c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800276e:	415b      	adcs	r3, r3
 8002770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002776:	4621      	mov	r1, r4
 8002778:	eb12 0801 	adds.w	r8, r2, r1
 800277c:	4629      	mov	r1, r5
 800277e:	eb43 0901 	adc.w	r9, r3, r1
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002796:	4690      	mov	r8, r2
 8002798:	4699      	mov	r9, r3
 800279a:	4623      	mov	r3, r4
 800279c:	eb18 0303 	adds.w	r3, r8, r3
 80027a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027a4:	462b      	mov	r3, r5
 80027a6:	eb49 0303 	adc.w	r3, r9, r3
 80027aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027c2:	460b      	mov	r3, r1
 80027c4:	18db      	adds	r3, r3, r3
 80027c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80027c8:	4613      	mov	r3, r2
 80027ca:	eb42 0303 	adc.w	r3, r2, r3
 80027ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80027d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027d8:	f7fd fd14 	bl	8000204 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4b61      	ldr	r3, [pc, #388]	@ (8002968 <UART_SetConfig+0x2d4>)
 80027e2:	fba3 2302 	umull	r2, r3, r3, r2
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	011c      	lsls	r4, r3, #4
 80027ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80027f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80027fc:	4642      	mov	r2, r8
 80027fe:	464b      	mov	r3, r9
 8002800:	1891      	adds	r1, r2, r2
 8002802:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002804:	415b      	adcs	r3, r3
 8002806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800280c:	4641      	mov	r1, r8
 800280e:	eb12 0a01 	adds.w	sl, r2, r1
 8002812:	4649      	mov	r1, r9
 8002814:	eb43 0b01 	adc.w	fp, r3, r1
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800282c:	4692      	mov	sl, r2
 800282e:	469b      	mov	fp, r3
 8002830:	4643      	mov	r3, r8
 8002832:	eb1a 0303 	adds.w	r3, sl, r3
 8002836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800283a:	464b      	mov	r3, r9
 800283c:	eb4b 0303 	adc.w	r3, fp, r3
 8002840:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002850:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002858:	460b      	mov	r3, r1
 800285a:	18db      	adds	r3, r3, r3
 800285c:	643b      	str	r3, [r7, #64]	@ 0x40
 800285e:	4613      	mov	r3, r2
 8002860:	eb42 0303 	adc.w	r3, r2, r3
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
 8002866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800286a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800286e:	f7fd fcc9 	bl	8000204 <__aeabi_uldivmod>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4611      	mov	r1, r2
 8002878:	4b3b      	ldr	r3, [pc, #236]	@ (8002968 <UART_SetConfig+0x2d4>)
 800287a:	fba3 2301 	umull	r2, r3, r3, r1
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2264      	movs	r2, #100	@ 0x64
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	1acb      	subs	r3, r1, r3
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800288e:	4b36      	ldr	r3, [pc, #216]	@ (8002968 <UART_SetConfig+0x2d4>)
 8002890:	fba3 2302 	umull	r2, r3, r3, r2
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800289c:	441c      	add	r4, r3
 800289e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028b0:	4642      	mov	r2, r8
 80028b2:	464b      	mov	r3, r9
 80028b4:	1891      	adds	r1, r2, r2
 80028b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028b8:	415b      	adcs	r3, r3
 80028ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028c0:	4641      	mov	r1, r8
 80028c2:	1851      	adds	r1, r2, r1
 80028c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80028c6:	4649      	mov	r1, r9
 80028c8:	414b      	adcs	r3, r1
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028d8:	4659      	mov	r1, fp
 80028da:	00cb      	lsls	r3, r1, #3
 80028dc:	4651      	mov	r1, sl
 80028de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e2:	4651      	mov	r1, sl
 80028e4:	00ca      	lsls	r2, r1, #3
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	4642      	mov	r2, r8
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028f4:	464b      	mov	r3, r9
 80028f6:	460a      	mov	r2, r1
 80028f8:	eb42 0303 	adc.w	r3, r2, r3
 80028fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800290c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002914:	460b      	mov	r3, r1
 8002916:	18db      	adds	r3, r3, r3
 8002918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800291a:	4613      	mov	r3, r2
 800291c:	eb42 0303 	adc.w	r3, r2, r3
 8002920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800292a:	f7fd fc6b 	bl	8000204 <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <UART_SetConfig+0x2d4>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	@ 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3332      	adds	r3, #50	@ 0x32
 8002946:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <UART_SetConfig+0x2d4>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 0207 	and.w	r2, r3, #7
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4422      	add	r2, r4
 800295a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800295c:	e106      	b.n	8002b6c <UART_SetConfig+0x4d8>
 800295e:	bf00      	nop
 8002960:	40011000 	.word	0x40011000
 8002964:	40011400 	.word	0x40011400
 8002968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800296c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002970:	2200      	movs	r2, #0
 8002972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002976:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800297a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800297e:	4642      	mov	r2, r8
 8002980:	464b      	mov	r3, r9
 8002982:	1891      	adds	r1, r2, r2
 8002984:	6239      	str	r1, [r7, #32]
 8002986:	415b      	adcs	r3, r3
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
 800298a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800298e:	4641      	mov	r1, r8
 8002990:	1854      	adds	r4, r2, r1
 8002992:	4649      	mov	r1, r9
 8002994:	eb43 0501 	adc.w	r5, r3, r1
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	00eb      	lsls	r3, r5, #3
 80029a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a6:	00e2      	lsls	r2, r4, #3
 80029a8:	4614      	mov	r4, r2
 80029aa:	461d      	mov	r5, r3
 80029ac:	4643      	mov	r3, r8
 80029ae:	18e3      	adds	r3, r4, r3
 80029b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029b4:	464b      	mov	r3, r9
 80029b6:	eb45 0303 	adc.w	r3, r5, r3
 80029ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029da:	4629      	mov	r1, r5
 80029dc:	008b      	lsls	r3, r1, #2
 80029de:	4621      	mov	r1, r4
 80029e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e4:	4621      	mov	r1, r4
 80029e6:	008a      	lsls	r2, r1, #2
 80029e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029ec:	f7fd fc0a 	bl	8000204 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4b60      	ldr	r3, [pc, #384]	@ (8002b78 <UART_SetConfig+0x4e4>)
 80029f6:	fba3 2302 	umull	r2, r3, r3, r2
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	011c      	lsls	r4, r3, #4
 80029fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a10:	4642      	mov	r2, r8
 8002a12:	464b      	mov	r3, r9
 8002a14:	1891      	adds	r1, r2, r2
 8002a16:	61b9      	str	r1, [r7, #24]
 8002a18:	415b      	adcs	r3, r3
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a20:	4641      	mov	r1, r8
 8002a22:	1851      	adds	r1, r2, r1
 8002a24:	6139      	str	r1, [r7, #16]
 8002a26:	4649      	mov	r1, r9
 8002a28:	414b      	adcs	r3, r1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a38:	4659      	mov	r1, fp
 8002a3a:	00cb      	lsls	r3, r1, #3
 8002a3c:	4651      	mov	r1, sl
 8002a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a42:	4651      	mov	r1, sl
 8002a44:	00ca      	lsls	r2, r1, #3
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	189b      	adds	r3, r3, r2
 8002a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a54:	464b      	mov	r3, r9
 8002a56:	460a      	mov	r2, r1
 8002a58:	eb42 0303 	adc.w	r3, r2, r3
 8002a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a78:	4649      	mov	r1, r9
 8002a7a:	008b      	lsls	r3, r1, #2
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a82:	4641      	mov	r1, r8
 8002a84:	008a      	lsls	r2, r1, #2
 8002a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a8a:	f7fd fbbb 	bl	8000204 <__aeabi_uldivmod>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4611      	mov	r1, r2
 8002a94:	4b38      	ldr	r3, [pc, #224]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002a96:	fba3 2301 	umull	r2, r3, r3, r1
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2264      	movs	r2, #100	@ 0x64
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	1acb      	subs	r3, r1, r3
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	3332      	adds	r3, #50	@ 0x32
 8002aa8:	4a33      	ldr	r2, [pc, #204]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab4:	441c      	add	r4, r3
 8002ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aba:	2200      	movs	r2, #0
 8002abc:	673b      	str	r3, [r7, #112]	@ 0x70
 8002abe:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ac0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	1891      	adds	r1, r2, r2
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	415b      	adcs	r3, r3
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad4:	4641      	mov	r1, r8
 8002ad6:	1851      	adds	r1, r2, r1
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	4649      	mov	r1, r9
 8002adc:	414b      	adcs	r3, r1
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002aec:	4659      	mov	r1, fp
 8002aee:	00cb      	lsls	r3, r1, #3
 8002af0:	4651      	mov	r1, sl
 8002af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af6:	4651      	mov	r1, sl
 8002af8:	00ca      	lsls	r2, r1, #3
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	4642      	mov	r2, r8
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b06:	464b      	mov	r3, r9
 8002b08:	460a      	mov	r2, r1
 8002b0a:	eb42 0303 	adc.w	r3, r2, r3
 8002b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b28:	4649      	mov	r1, r9
 8002b2a:	008b      	lsls	r3, r1, #2
 8002b2c:	4641      	mov	r1, r8
 8002b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b32:	4641      	mov	r1, r8
 8002b34:	008a      	lsls	r2, r1, #2
 8002b36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b3a:	f7fd fb63 	bl	8000204 <__aeabi_uldivmod>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002b44:	fba3 1302 	umull	r1, r3, r3, r2
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	2164      	movs	r1, #100	@ 0x64
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	3332      	adds	r3, #50	@ 0x32
 8002b56:	4a08      	ldr	r2, [pc, #32]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4422      	add	r2, r4
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b72:	46bd      	mov	sp, r7
 8002b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b78:	51eb851f 	.word	0x51eb851f

08002b7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	f107 001c 	add.w	r0, r7, #28
 8002b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d123      	bne.n	8002bde <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002baa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa9a 	bl	800310c <USB_CoreReset>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	e01b      	b.n	8002c16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa8e 	bl	800310c <USB_CoreReset>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002bf4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d106      	bne.n	8002c0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c08:	e005      	b.n	8002c16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c16:	7fbb      	ldrb	r3, [r7, #30]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d10b      	bne.n	8002c34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f043 0206 	orr.w	r2, r3, #6
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c40:	b004      	add	sp, #16
 8002c42:	4770      	bx	lr

08002c44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 0201 	bic.w	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d115      	bne.n	8002cb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002c94:	200a      	movs	r0, #10
 8002c96:	f7fe f8a3 	bl	8000de0 <HAL_Delay>
      ms += 10U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	330a      	adds	r3, #10
 8002c9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fa25 	bl	80030f0 <USB_GetMode>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d01e      	beq.n	8002cea <USB_SetCurrentMode+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2bc7      	cmp	r3, #199	@ 0xc7
 8002cb0:	d9f0      	bls.n	8002c94 <USB_SetCurrentMode+0x2e>
 8002cb2:	e01a      	b.n	8002cea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d115      	bne.n	8002ce6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002cc6:	200a      	movs	r0, #10
 8002cc8:	f7fe f88a 	bl	8000de0 <HAL_Delay>
      ms += 10U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	330a      	adds	r3, #10
 8002cd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fa0c 	bl	80030f0 <USB_GetMode>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <USB_SetCurrentMode+0x84>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ce2:	d9f0      	bls.n	8002cc6 <USB_SetCurrentMode+0x60>
 8002ce4:	e001      	b.n	8002cea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e005      	b.n	8002cf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2bc8      	cmp	r3, #200	@ 0xc8
 8002cee:	d101      	bne.n	8002cf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d00:	b084      	sub	sp, #16
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e009      	b.n	8002d34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	3340      	adds	r3, #64	@ 0x40
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	3301      	adds	r3, #1
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	2b0e      	cmp	r3, #14
 8002d38:	d9f2      	bls.n	8002d20 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d11c      	bne.n	8002d7c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d50:	f043 0302 	orr.w	r3, r3, #2
 8002d54:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e005      	b.n	8002d88 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d80:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2300      	movs	r3, #0
 8002d92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d10d      	bne.n	8002db8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002da4:	2100      	movs	r1, #0
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f968 	bl	800307c <USB_SetDevSpeed>
 8002dac:	e008      	b.n	8002dc0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002dae:	2101      	movs	r1, #1
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f963 	bl	800307c <USB_SetDevSpeed>
 8002db6:	e003      	b.n	8002dc0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002db8:	2103      	movs	r1, #3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f95e 	bl	800307c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002dc0:	2110      	movs	r1, #16
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8fa 	bl	8002fbc <USB_FlushTxFifo>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f924 	bl	8003020 <USB_FlushRxFifo>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002de8:	461a      	mov	r2, r3
 8002dea:	2300      	movs	r3, #0
 8002dec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df4:	461a      	mov	r2, r3
 8002df6:	2300      	movs	r3, #0
 8002df8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e00:	461a      	mov	r2, r3
 8002e02:	2300      	movs	r3, #0
 8002e04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	e043      	b.n	8002e94 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e22:	d118      	bne.n	8002e56 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e36:	461a      	mov	r2, r3
 8002e38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e013      	b.n	8002e68 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	e008      	b.n	8002e68 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e62:	461a      	mov	r2, r3
 8002e64:	2300      	movs	r3, #0
 8002e66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e74:	461a      	mov	r2, r3
 8002e76:	2300      	movs	r3, #0
 8002e78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e86:	461a      	mov	r2, r3
 8002e88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	3301      	adds	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e98:	461a      	mov	r2, r3
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d3b5      	bcc.n	8002e0c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	e043      	b.n	8002f2e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ebc:	d118      	bne.n	8002ef0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	e013      	b.n	8002f02 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e008      	b.n	8002f02 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002efc:	461a      	mov	r2, r3
 8002efe:	2300      	movs	r3, #0
 8002f00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2300      	movs	r3, #0
 8002f12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f20:	461a      	mov	r2, r3
 8002f22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f32:	461a      	mov	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d3b5      	bcc.n	8002ea6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002f5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f043 0210 	orr.w	r2, r3, #16
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <USB_DevInit+0x2b8>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f043 0208 	orr.w	r2, r3, #8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fb4:	b004      	add	sp, #16
 8002fb6:	4770      	bx	lr
 8002fb8:	803c3800 	.word	0x803c3800

08002fbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002fd6:	d901      	bls.n	8002fdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e01b      	b.n	8003014 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	daf2      	bge.n	8002fca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	019b      	lsls	r3, r3, #6
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003000:	d901      	bls.n	8003006 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e006      	b.n	8003014 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b20      	cmp	r3, #32
 8003010:	d0f0      	beq.n	8002ff4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3301      	adds	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003038:	d901      	bls.n	800303e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e018      	b.n	8003070 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	daf2      	bge.n	800302c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2210      	movs	r2, #16
 800304e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3301      	adds	r3, #1
 8003054:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800305c:	d901      	bls.n	8003062 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e006      	b.n	8003070 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b10      	cmp	r3, #16
 800306c:	d0f0      	beq.n	8003050 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	68f9      	ldr	r1, [r7, #12]
 8003098:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80030c8:	f023 0303 	bic.w	r3, r3, #3
 80030cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030dc:	f043 0302 	orr.w	r3, r3, #2
 80030e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0301 	and.w	r3, r3, #1
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3301      	adds	r3, #1
 800311c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003124:	d901      	bls.n	800312a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e01b      	b.n	8003162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	daf2      	bge.n	8003118 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3301      	adds	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800314e:	d901      	bls.n	8003154 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e006      	b.n	8003162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d0f0      	beq.n	8003142 <USB_CoreReset+0x36>

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <std>:
 8003170:	2300      	movs	r3, #0
 8003172:	b510      	push	{r4, lr}
 8003174:	4604      	mov	r4, r0
 8003176:	e9c0 3300 	strd	r3, r3, [r0]
 800317a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800317e:	6083      	str	r3, [r0, #8]
 8003180:	8181      	strh	r1, [r0, #12]
 8003182:	6643      	str	r3, [r0, #100]	@ 0x64
 8003184:	81c2      	strh	r2, [r0, #14]
 8003186:	6183      	str	r3, [r0, #24]
 8003188:	4619      	mov	r1, r3
 800318a:	2208      	movs	r2, #8
 800318c:	305c      	adds	r0, #92	@ 0x5c
 800318e:	f000 f9e7 	bl	8003560 <memset>
 8003192:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <std+0x58>)
 8003194:	6263      	str	r3, [r4, #36]	@ 0x24
 8003196:	4b0d      	ldr	r3, [pc, #52]	@ (80031cc <std+0x5c>)
 8003198:	62a3      	str	r3, [r4, #40]	@ 0x28
 800319a:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <std+0x60>)
 800319c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800319e:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <std+0x64>)
 80031a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80031a2:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <std+0x68>)
 80031a4:	6224      	str	r4, [r4, #32]
 80031a6:	429c      	cmp	r4, r3
 80031a8:	d006      	beq.n	80031b8 <std+0x48>
 80031aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80031ae:	4294      	cmp	r4, r2
 80031b0:	d002      	beq.n	80031b8 <std+0x48>
 80031b2:	33d0      	adds	r3, #208	@ 0xd0
 80031b4:	429c      	cmp	r4, r3
 80031b6:	d105      	bne.n	80031c4 <std+0x54>
 80031b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80031bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c0:	f000 ba46 	b.w	8003650 <__retarget_lock_init_recursive>
 80031c4:	bd10      	pop	{r4, pc}
 80031c6:	bf00      	nop
 80031c8:	080033b1 	.word	0x080033b1
 80031cc:	080033d3 	.word	0x080033d3
 80031d0:	0800340b 	.word	0x0800340b
 80031d4:	0800342f 	.word	0x0800342f
 80031d8:	200005d8 	.word	0x200005d8

080031dc <stdio_exit_handler>:
 80031dc:	4a02      	ldr	r2, [pc, #8]	@ (80031e8 <stdio_exit_handler+0xc>)
 80031de:	4903      	ldr	r1, [pc, #12]	@ (80031ec <stdio_exit_handler+0x10>)
 80031e0:	4803      	ldr	r0, [pc, #12]	@ (80031f0 <stdio_exit_handler+0x14>)
 80031e2:	f000 b869 	b.w	80032b8 <_fwalk_sglue>
 80031e6:	bf00      	nop
 80031e8:	20000014 	.word	0x20000014
 80031ec:	08003951 	.word	0x08003951
 80031f0:	20000024 	.word	0x20000024

080031f4 <cleanup_stdio>:
 80031f4:	6841      	ldr	r1, [r0, #4]
 80031f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <cleanup_stdio+0x34>)
 80031f8:	4299      	cmp	r1, r3
 80031fa:	b510      	push	{r4, lr}
 80031fc:	4604      	mov	r4, r0
 80031fe:	d001      	beq.n	8003204 <cleanup_stdio+0x10>
 8003200:	f000 fba6 	bl	8003950 <_fflush_r>
 8003204:	68a1      	ldr	r1, [r4, #8]
 8003206:	4b09      	ldr	r3, [pc, #36]	@ (800322c <cleanup_stdio+0x38>)
 8003208:	4299      	cmp	r1, r3
 800320a:	d002      	beq.n	8003212 <cleanup_stdio+0x1e>
 800320c:	4620      	mov	r0, r4
 800320e:	f000 fb9f 	bl	8003950 <_fflush_r>
 8003212:	68e1      	ldr	r1, [r4, #12]
 8003214:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <cleanup_stdio+0x3c>)
 8003216:	4299      	cmp	r1, r3
 8003218:	d004      	beq.n	8003224 <cleanup_stdio+0x30>
 800321a:	4620      	mov	r0, r4
 800321c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003220:	f000 bb96 	b.w	8003950 <_fflush_r>
 8003224:	bd10      	pop	{r4, pc}
 8003226:	bf00      	nop
 8003228:	200005d8 	.word	0x200005d8
 800322c:	20000640 	.word	0x20000640
 8003230:	200006a8 	.word	0x200006a8

08003234 <global_stdio_init.part.0>:
 8003234:	b510      	push	{r4, lr}
 8003236:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <global_stdio_init.part.0+0x30>)
 8003238:	4c0b      	ldr	r4, [pc, #44]	@ (8003268 <global_stdio_init.part.0+0x34>)
 800323a:	4a0c      	ldr	r2, [pc, #48]	@ (800326c <global_stdio_init.part.0+0x38>)
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	4620      	mov	r0, r4
 8003240:	2200      	movs	r2, #0
 8003242:	2104      	movs	r1, #4
 8003244:	f7ff ff94 	bl	8003170 <std>
 8003248:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800324c:	2201      	movs	r2, #1
 800324e:	2109      	movs	r1, #9
 8003250:	f7ff ff8e 	bl	8003170 <std>
 8003254:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003258:	2202      	movs	r2, #2
 800325a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800325e:	2112      	movs	r1, #18
 8003260:	f7ff bf86 	b.w	8003170 <std>
 8003264:	20000710 	.word	0x20000710
 8003268:	200005d8 	.word	0x200005d8
 800326c:	080031dd 	.word	0x080031dd

08003270 <__sfp_lock_acquire>:
 8003270:	4801      	ldr	r0, [pc, #4]	@ (8003278 <__sfp_lock_acquire+0x8>)
 8003272:	f000 b9ee 	b.w	8003652 <__retarget_lock_acquire_recursive>
 8003276:	bf00      	nop
 8003278:	20000719 	.word	0x20000719

0800327c <__sfp_lock_release>:
 800327c:	4801      	ldr	r0, [pc, #4]	@ (8003284 <__sfp_lock_release+0x8>)
 800327e:	f000 b9e9 	b.w	8003654 <__retarget_lock_release_recursive>
 8003282:	bf00      	nop
 8003284:	20000719 	.word	0x20000719

08003288 <__sinit>:
 8003288:	b510      	push	{r4, lr}
 800328a:	4604      	mov	r4, r0
 800328c:	f7ff fff0 	bl	8003270 <__sfp_lock_acquire>
 8003290:	6a23      	ldr	r3, [r4, #32]
 8003292:	b11b      	cbz	r3, 800329c <__sinit+0x14>
 8003294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003298:	f7ff bff0 	b.w	800327c <__sfp_lock_release>
 800329c:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <__sinit+0x28>)
 800329e:	6223      	str	r3, [r4, #32]
 80032a0:	4b04      	ldr	r3, [pc, #16]	@ (80032b4 <__sinit+0x2c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f5      	bne.n	8003294 <__sinit+0xc>
 80032a8:	f7ff ffc4 	bl	8003234 <global_stdio_init.part.0>
 80032ac:	e7f2      	b.n	8003294 <__sinit+0xc>
 80032ae:	bf00      	nop
 80032b0:	080031f5 	.word	0x080031f5
 80032b4:	20000710 	.word	0x20000710

080032b8 <_fwalk_sglue>:
 80032b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032bc:	4607      	mov	r7, r0
 80032be:	4688      	mov	r8, r1
 80032c0:	4614      	mov	r4, r2
 80032c2:	2600      	movs	r6, #0
 80032c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032c8:	f1b9 0901 	subs.w	r9, r9, #1
 80032cc:	d505      	bpl.n	80032da <_fwalk_sglue+0x22>
 80032ce:	6824      	ldr	r4, [r4, #0]
 80032d0:	2c00      	cmp	r4, #0
 80032d2:	d1f7      	bne.n	80032c4 <_fwalk_sglue+0xc>
 80032d4:	4630      	mov	r0, r6
 80032d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032da:	89ab      	ldrh	r3, [r5, #12]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d907      	bls.n	80032f0 <_fwalk_sglue+0x38>
 80032e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032e4:	3301      	adds	r3, #1
 80032e6:	d003      	beq.n	80032f0 <_fwalk_sglue+0x38>
 80032e8:	4629      	mov	r1, r5
 80032ea:	4638      	mov	r0, r7
 80032ec:	47c0      	blx	r8
 80032ee:	4306      	orrs	r6, r0
 80032f0:	3568      	adds	r5, #104	@ 0x68
 80032f2:	e7e9      	b.n	80032c8 <_fwalk_sglue+0x10>

080032f4 <_puts_r>:
 80032f4:	6a03      	ldr	r3, [r0, #32]
 80032f6:	b570      	push	{r4, r5, r6, lr}
 80032f8:	6884      	ldr	r4, [r0, #8]
 80032fa:	4605      	mov	r5, r0
 80032fc:	460e      	mov	r6, r1
 80032fe:	b90b      	cbnz	r3, 8003304 <_puts_r+0x10>
 8003300:	f7ff ffc2 	bl	8003288 <__sinit>
 8003304:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003306:	07db      	lsls	r3, r3, #31
 8003308:	d405      	bmi.n	8003316 <_puts_r+0x22>
 800330a:	89a3      	ldrh	r3, [r4, #12]
 800330c:	0598      	lsls	r0, r3, #22
 800330e:	d402      	bmi.n	8003316 <_puts_r+0x22>
 8003310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003312:	f000 f99e 	bl	8003652 <__retarget_lock_acquire_recursive>
 8003316:	89a3      	ldrh	r3, [r4, #12]
 8003318:	0719      	lsls	r1, r3, #28
 800331a:	d502      	bpl.n	8003322 <_puts_r+0x2e>
 800331c:	6923      	ldr	r3, [r4, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d135      	bne.n	800338e <_puts_r+0x9a>
 8003322:	4621      	mov	r1, r4
 8003324:	4628      	mov	r0, r5
 8003326:	f000 f8c5 	bl	80034b4 <__swsetup_r>
 800332a:	b380      	cbz	r0, 800338e <_puts_r+0x9a>
 800332c:	f04f 35ff 	mov.w	r5, #4294967295
 8003330:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003332:	07da      	lsls	r2, r3, #31
 8003334:	d405      	bmi.n	8003342 <_puts_r+0x4e>
 8003336:	89a3      	ldrh	r3, [r4, #12]
 8003338:	059b      	lsls	r3, r3, #22
 800333a:	d402      	bmi.n	8003342 <_puts_r+0x4e>
 800333c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800333e:	f000 f989 	bl	8003654 <__retarget_lock_release_recursive>
 8003342:	4628      	mov	r0, r5
 8003344:	bd70      	pop	{r4, r5, r6, pc}
 8003346:	2b00      	cmp	r3, #0
 8003348:	da04      	bge.n	8003354 <_puts_r+0x60>
 800334a:	69a2      	ldr	r2, [r4, #24]
 800334c:	429a      	cmp	r2, r3
 800334e:	dc17      	bgt.n	8003380 <_puts_r+0x8c>
 8003350:	290a      	cmp	r1, #10
 8003352:	d015      	beq.n	8003380 <_puts_r+0x8c>
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	6022      	str	r2, [r4, #0]
 800335a:	7019      	strb	r1, [r3, #0]
 800335c:	68a3      	ldr	r3, [r4, #8]
 800335e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003362:	3b01      	subs	r3, #1
 8003364:	60a3      	str	r3, [r4, #8]
 8003366:	2900      	cmp	r1, #0
 8003368:	d1ed      	bne.n	8003346 <_puts_r+0x52>
 800336a:	2b00      	cmp	r3, #0
 800336c:	da11      	bge.n	8003392 <_puts_r+0x9e>
 800336e:	4622      	mov	r2, r4
 8003370:	210a      	movs	r1, #10
 8003372:	4628      	mov	r0, r5
 8003374:	f000 f85f 	bl	8003436 <__swbuf_r>
 8003378:	3001      	adds	r0, #1
 800337a:	d0d7      	beq.n	800332c <_puts_r+0x38>
 800337c:	250a      	movs	r5, #10
 800337e:	e7d7      	b.n	8003330 <_puts_r+0x3c>
 8003380:	4622      	mov	r2, r4
 8003382:	4628      	mov	r0, r5
 8003384:	f000 f857 	bl	8003436 <__swbuf_r>
 8003388:	3001      	adds	r0, #1
 800338a:	d1e7      	bne.n	800335c <_puts_r+0x68>
 800338c:	e7ce      	b.n	800332c <_puts_r+0x38>
 800338e:	3e01      	subs	r6, #1
 8003390:	e7e4      	b.n	800335c <_puts_r+0x68>
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	6022      	str	r2, [r4, #0]
 8003398:	220a      	movs	r2, #10
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	e7ee      	b.n	800337c <_puts_r+0x88>
	...

080033a0 <puts>:
 80033a0:	4b02      	ldr	r3, [pc, #8]	@ (80033ac <puts+0xc>)
 80033a2:	4601      	mov	r1, r0
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	f7ff bfa5 	b.w	80032f4 <_puts_r>
 80033aa:	bf00      	nop
 80033ac:	20000020 	.word	0x20000020

080033b0 <__sread>:
 80033b0:	b510      	push	{r4, lr}
 80033b2:	460c      	mov	r4, r1
 80033b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b8:	f000 f8fc 	bl	80035b4 <_read_r>
 80033bc:	2800      	cmp	r0, #0
 80033be:	bfab      	itete	ge
 80033c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80033c2:	89a3      	ldrhlt	r3, [r4, #12]
 80033c4:	181b      	addge	r3, r3, r0
 80033c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80033ca:	bfac      	ite	ge
 80033cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80033ce:	81a3      	strhlt	r3, [r4, #12]
 80033d0:	bd10      	pop	{r4, pc}

080033d2 <__swrite>:
 80033d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d6:	461f      	mov	r7, r3
 80033d8:	898b      	ldrh	r3, [r1, #12]
 80033da:	05db      	lsls	r3, r3, #23
 80033dc:	4605      	mov	r5, r0
 80033de:	460c      	mov	r4, r1
 80033e0:	4616      	mov	r6, r2
 80033e2:	d505      	bpl.n	80033f0 <__swrite+0x1e>
 80033e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033e8:	2302      	movs	r3, #2
 80033ea:	2200      	movs	r2, #0
 80033ec:	f000 f8d0 	bl	8003590 <_lseek_r>
 80033f0:	89a3      	ldrh	r3, [r4, #12]
 80033f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033fa:	81a3      	strh	r3, [r4, #12]
 80033fc:	4632      	mov	r2, r6
 80033fe:	463b      	mov	r3, r7
 8003400:	4628      	mov	r0, r5
 8003402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003406:	f000 b8e7 	b.w	80035d8 <_write_r>

0800340a <__sseek>:
 800340a:	b510      	push	{r4, lr}
 800340c:	460c      	mov	r4, r1
 800340e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003412:	f000 f8bd 	bl	8003590 <_lseek_r>
 8003416:	1c43      	adds	r3, r0, #1
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	bf15      	itete	ne
 800341c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800341e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003426:	81a3      	strheq	r3, [r4, #12]
 8003428:	bf18      	it	ne
 800342a:	81a3      	strhne	r3, [r4, #12]
 800342c:	bd10      	pop	{r4, pc}

0800342e <__sclose>:
 800342e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003432:	f000 b89d 	b.w	8003570 <_close_r>

08003436 <__swbuf_r>:
 8003436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003438:	460e      	mov	r6, r1
 800343a:	4614      	mov	r4, r2
 800343c:	4605      	mov	r5, r0
 800343e:	b118      	cbz	r0, 8003448 <__swbuf_r+0x12>
 8003440:	6a03      	ldr	r3, [r0, #32]
 8003442:	b90b      	cbnz	r3, 8003448 <__swbuf_r+0x12>
 8003444:	f7ff ff20 	bl	8003288 <__sinit>
 8003448:	69a3      	ldr	r3, [r4, #24]
 800344a:	60a3      	str	r3, [r4, #8]
 800344c:	89a3      	ldrh	r3, [r4, #12]
 800344e:	071a      	lsls	r2, r3, #28
 8003450:	d501      	bpl.n	8003456 <__swbuf_r+0x20>
 8003452:	6923      	ldr	r3, [r4, #16]
 8003454:	b943      	cbnz	r3, 8003468 <__swbuf_r+0x32>
 8003456:	4621      	mov	r1, r4
 8003458:	4628      	mov	r0, r5
 800345a:	f000 f82b 	bl	80034b4 <__swsetup_r>
 800345e:	b118      	cbz	r0, 8003468 <__swbuf_r+0x32>
 8003460:	f04f 37ff 	mov.w	r7, #4294967295
 8003464:	4638      	mov	r0, r7
 8003466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	6922      	ldr	r2, [r4, #16]
 800346c:	1a98      	subs	r0, r3, r2
 800346e:	6963      	ldr	r3, [r4, #20]
 8003470:	b2f6      	uxtb	r6, r6
 8003472:	4283      	cmp	r3, r0
 8003474:	4637      	mov	r7, r6
 8003476:	dc05      	bgt.n	8003484 <__swbuf_r+0x4e>
 8003478:	4621      	mov	r1, r4
 800347a:	4628      	mov	r0, r5
 800347c:	f000 fa68 	bl	8003950 <_fflush_r>
 8003480:	2800      	cmp	r0, #0
 8003482:	d1ed      	bne.n	8003460 <__swbuf_r+0x2a>
 8003484:	68a3      	ldr	r3, [r4, #8]
 8003486:	3b01      	subs	r3, #1
 8003488:	60a3      	str	r3, [r4, #8]
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	6022      	str	r2, [r4, #0]
 8003490:	701e      	strb	r6, [r3, #0]
 8003492:	6962      	ldr	r2, [r4, #20]
 8003494:	1c43      	adds	r3, r0, #1
 8003496:	429a      	cmp	r2, r3
 8003498:	d004      	beq.n	80034a4 <__swbuf_r+0x6e>
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	07db      	lsls	r3, r3, #31
 800349e:	d5e1      	bpl.n	8003464 <__swbuf_r+0x2e>
 80034a0:	2e0a      	cmp	r6, #10
 80034a2:	d1df      	bne.n	8003464 <__swbuf_r+0x2e>
 80034a4:	4621      	mov	r1, r4
 80034a6:	4628      	mov	r0, r5
 80034a8:	f000 fa52 	bl	8003950 <_fflush_r>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d0d9      	beq.n	8003464 <__swbuf_r+0x2e>
 80034b0:	e7d6      	b.n	8003460 <__swbuf_r+0x2a>
	...

080034b4 <__swsetup_r>:
 80034b4:	b538      	push	{r3, r4, r5, lr}
 80034b6:	4b29      	ldr	r3, [pc, #164]	@ (800355c <__swsetup_r+0xa8>)
 80034b8:	4605      	mov	r5, r0
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	460c      	mov	r4, r1
 80034be:	b118      	cbz	r0, 80034c8 <__swsetup_r+0x14>
 80034c0:	6a03      	ldr	r3, [r0, #32]
 80034c2:	b90b      	cbnz	r3, 80034c8 <__swsetup_r+0x14>
 80034c4:	f7ff fee0 	bl	8003288 <__sinit>
 80034c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034cc:	0719      	lsls	r1, r3, #28
 80034ce:	d422      	bmi.n	8003516 <__swsetup_r+0x62>
 80034d0:	06da      	lsls	r2, r3, #27
 80034d2:	d407      	bmi.n	80034e4 <__swsetup_r+0x30>
 80034d4:	2209      	movs	r2, #9
 80034d6:	602a      	str	r2, [r5, #0]
 80034d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034dc:	81a3      	strh	r3, [r4, #12]
 80034de:	f04f 30ff 	mov.w	r0, #4294967295
 80034e2:	e033      	b.n	800354c <__swsetup_r+0x98>
 80034e4:	0758      	lsls	r0, r3, #29
 80034e6:	d512      	bpl.n	800350e <__swsetup_r+0x5a>
 80034e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034ea:	b141      	cbz	r1, 80034fe <__swsetup_r+0x4a>
 80034ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80034f0:	4299      	cmp	r1, r3
 80034f2:	d002      	beq.n	80034fa <__swsetup_r+0x46>
 80034f4:	4628      	mov	r0, r5
 80034f6:	f000 f8af 	bl	8003658 <_free_r>
 80034fa:	2300      	movs	r3, #0
 80034fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003504:	81a3      	strh	r3, [r4, #12]
 8003506:	2300      	movs	r3, #0
 8003508:	6063      	str	r3, [r4, #4]
 800350a:	6923      	ldr	r3, [r4, #16]
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	89a3      	ldrh	r3, [r4, #12]
 8003510:	f043 0308 	orr.w	r3, r3, #8
 8003514:	81a3      	strh	r3, [r4, #12]
 8003516:	6923      	ldr	r3, [r4, #16]
 8003518:	b94b      	cbnz	r3, 800352e <__swsetup_r+0x7a>
 800351a:	89a3      	ldrh	r3, [r4, #12]
 800351c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003524:	d003      	beq.n	800352e <__swsetup_r+0x7a>
 8003526:	4621      	mov	r1, r4
 8003528:	4628      	mov	r0, r5
 800352a:	f000 fa5f 	bl	80039ec <__smakebuf_r>
 800352e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003532:	f013 0201 	ands.w	r2, r3, #1
 8003536:	d00a      	beq.n	800354e <__swsetup_r+0x9a>
 8003538:	2200      	movs	r2, #0
 800353a:	60a2      	str	r2, [r4, #8]
 800353c:	6962      	ldr	r2, [r4, #20]
 800353e:	4252      	negs	r2, r2
 8003540:	61a2      	str	r2, [r4, #24]
 8003542:	6922      	ldr	r2, [r4, #16]
 8003544:	b942      	cbnz	r2, 8003558 <__swsetup_r+0xa4>
 8003546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800354a:	d1c5      	bne.n	80034d8 <__swsetup_r+0x24>
 800354c:	bd38      	pop	{r3, r4, r5, pc}
 800354e:	0799      	lsls	r1, r3, #30
 8003550:	bf58      	it	pl
 8003552:	6962      	ldrpl	r2, [r4, #20]
 8003554:	60a2      	str	r2, [r4, #8]
 8003556:	e7f4      	b.n	8003542 <__swsetup_r+0x8e>
 8003558:	2000      	movs	r0, #0
 800355a:	e7f7      	b.n	800354c <__swsetup_r+0x98>
 800355c:	20000020 	.word	0x20000020

08003560 <memset>:
 8003560:	4402      	add	r2, r0
 8003562:	4603      	mov	r3, r0
 8003564:	4293      	cmp	r3, r2
 8003566:	d100      	bne.n	800356a <memset+0xa>
 8003568:	4770      	bx	lr
 800356a:	f803 1b01 	strb.w	r1, [r3], #1
 800356e:	e7f9      	b.n	8003564 <memset+0x4>

08003570 <_close_r>:
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	4d06      	ldr	r5, [pc, #24]	@ (800358c <_close_r+0x1c>)
 8003574:	2300      	movs	r3, #0
 8003576:	4604      	mov	r4, r0
 8003578:	4608      	mov	r0, r1
 800357a:	602b      	str	r3, [r5, #0]
 800357c:	f7fd fb18 	bl	8000bb0 <_close>
 8003580:	1c43      	adds	r3, r0, #1
 8003582:	d102      	bne.n	800358a <_close_r+0x1a>
 8003584:	682b      	ldr	r3, [r5, #0]
 8003586:	b103      	cbz	r3, 800358a <_close_r+0x1a>
 8003588:	6023      	str	r3, [r4, #0]
 800358a:	bd38      	pop	{r3, r4, r5, pc}
 800358c:	20000714 	.word	0x20000714

08003590 <_lseek_r>:
 8003590:	b538      	push	{r3, r4, r5, lr}
 8003592:	4d07      	ldr	r5, [pc, #28]	@ (80035b0 <_lseek_r+0x20>)
 8003594:	4604      	mov	r4, r0
 8003596:	4608      	mov	r0, r1
 8003598:	4611      	mov	r1, r2
 800359a:	2200      	movs	r2, #0
 800359c:	602a      	str	r2, [r5, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	f7fd fb2d 	bl	8000bfe <_lseek>
 80035a4:	1c43      	adds	r3, r0, #1
 80035a6:	d102      	bne.n	80035ae <_lseek_r+0x1e>
 80035a8:	682b      	ldr	r3, [r5, #0]
 80035aa:	b103      	cbz	r3, 80035ae <_lseek_r+0x1e>
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	bd38      	pop	{r3, r4, r5, pc}
 80035b0:	20000714 	.word	0x20000714

080035b4 <_read_r>:
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	4d07      	ldr	r5, [pc, #28]	@ (80035d4 <_read_r+0x20>)
 80035b8:	4604      	mov	r4, r0
 80035ba:	4608      	mov	r0, r1
 80035bc:	4611      	mov	r1, r2
 80035be:	2200      	movs	r2, #0
 80035c0:	602a      	str	r2, [r5, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f7fd fad7 	bl	8000b76 <_read>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	d102      	bne.n	80035d2 <_read_r+0x1e>
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	b103      	cbz	r3, 80035d2 <_read_r+0x1e>
 80035d0:	6023      	str	r3, [r4, #0]
 80035d2:	bd38      	pop	{r3, r4, r5, pc}
 80035d4:	20000714 	.word	0x20000714

080035d8 <_write_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	4d07      	ldr	r5, [pc, #28]	@ (80035f8 <_write_r+0x20>)
 80035dc:	4604      	mov	r4, r0
 80035de:	4608      	mov	r0, r1
 80035e0:	4611      	mov	r1, r2
 80035e2:	2200      	movs	r2, #0
 80035e4:	602a      	str	r2, [r5, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f7fc ff98 	bl	800051c <_write>
 80035ec:	1c43      	adds	r3, r0, #1
 80035ee:	d102      	bne.n	80035f6 <_write_r+0x1e>
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	b103      	cbz	r3, 80035f6 <_write_r+0x1e>
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
 80035f8:	20000714 	.word	0x20000714

080035fc <__errno>:
 80035fc:	4b01      	ldr	r3, [pc, #4]	@ (8003604 <__errno+0x8>)
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000020 	.word	0x20000020

08003608 <__libc_init_array>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	4d0d      	ldr	r5, [pc, #52]	@ (8003640 <__libc_init_array+0x38>)
 800360c:	4c0d      	ldr	r4, [pc, #52]	@ (8003644 <__libc_init_array+0x3c>)
 800360e:	1b64      	subs	r4, r4, r5
 8003610:	10a4      	asrs	r4, r4, #2
 8003612:	2600      	movs	r6, #0
 8003614:	42a6      	cmp	r6, r4
 8003616:	d109      	bne.n	800362c <__libc_init_array+0x24>
 8003618:	4d0b      	ldr	r5, [pc, #44]	@ (8003648 <__libc_init_array+0x40>)
 800361a:	4c0c      	ldr	r4, [pc, #48]	@ (800364c <__libc_init_array+0x44>)
 800361c:	f000 fa54 	bl	8003ac8 <_init>
 8003620:	1b64      	subs	r4, r4, r5
 8003622:	10a4      	asrs	r4, r4, #2
 8003624:	2600      	movs	r6, #0
 8003626:	42a6      	cmp	r6, r4
 8003628:	d105      	bne.n	8003636 <__libc_init_array+0x2e>
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003630:	4798      	blx	r3
 8003632:	3601      	adds	r6, #1
 8003634:	e7ee      	b.n	8003614 <__libc_init_array+0xc>
 8003636:	f855 3b04 	ldr.w	r3, [r5], #4
 800363a:	4798      	blx	r3
 800363c:	3601      	adds	r6, #1
 800363e:	e7f2      	b.n	8003626 <__libc_init_array+0x1e>
 8003640:	08003b10 	.word	0x08003b10
 8003644:	08003b10 	.word	0x08003b10
 8003648:	08003b10 	.word	0x08003b10
 800364c:	08003b14 	.word	0x08003b14

08003650 <__retarget_lock_init_recursive>:
 8003650:	4770      	bx	lr

08003652 <__retarget_lock_acquire_recursive>:
 8003652:	4770      	bx	lr

08003654 <__retarget_lock_release_recursive>:
 8003654:	4770      	bx	lr
	...

08003658 <_free_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4605      	mov	r5, r0
 800365c:	2900      	cmp	r1, #0
 800365e:	d041      	beq.n	80036e4 <_free_r+0x8c>
 8003660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003664:	1f0c      	subs	r4, r1, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	bfb8      	it	lt
 800366a:	18e4      	addlt	r4, r4, r3
 800366c:	f000 f8e0 	bl	8003830 <__malloc_lock>
 8003670:	4a1d      	ldr	r2, [pc, #116]	@ (80036e8 <_free_r+0x90>)
 8003672:	6813      	ldr	r3, [r2, #0]
 8003674:	b933      	cbnz	r3, 8003684 <_free_r+0x2c>
 8003676:	6063      	str	r3, [r4, #4]
 8003678:	6014      	str	r4, [r2, #0]
 800367a:	4628      	mov	r0, r5
 800367c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003680:	f000 b8dc 	b.w	800383c <__malloc_unlock>
 8003684:	42a3      	cmp	r3, r4
 8003686:	d908      	bls.n	800369a <_free_r+0x42>
 8003688:	6820      	ldr	r0, [r4, #0]
 800368a:	1821      	adds	r1, r4, r0
 800368c:	428b      	cmp	r3, r1
 800368e:	bf01      	itttt	eq
 8003690:	6819      	ldreq	r1, [r3, #0]
 8003692:	685b      	ldreq	r3, [r3, #4]
 8003694:	1809      	addeq	r1, r1, r0
 8003696:	6021      	streq	r1, [r4, #0]
 8003698:	e7ed      	b.n	8003676 <_free_r+0x1e>
 800369a:	461a      	mov	r2, r3
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	b10b      	cbz	r3, 80036a4 <_free_r+0x4c>
 80036a0:	42a3      	cmp	r3, r4
 80036a2:	d9fa      	bls.n	800369a <_free_r+0x42>
 80036a4:	6811      	ldr	r1, [r2, #0]
 80036a6:	1850      	adds	r0, r2, r1
 80036a8:	42a0      	cmp	r0, r4
 80036aa:	d10b      	bne.n	80036c4 <_free_r+0x6c>
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	4401      	add	r1, r0
 80036b0:	1850      	adds	r0, r2, r1
 80036b2:	4283      	cmp	r3, r0
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	d1e0      	bne.n	800367a <_free_r+0x22>
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	6053      	str	r3, [r2, #4]
 80036be:	4408      	add	r0, r1
 80036c0:	6010      	str	r0, [r2, #0]
 80036c2:	e7da      	b.n	800367a <_free_r+0x22>
 80036c4:	d902      	bls.n	80036cc <_free_r+0x74>
 80036c6:	230c      	movs	r3, #12
 80036c8:	602b      	str	r3, [r5, #0]
 80036ca:	e7d6      	b.n	800367a <_free_r+0x22>
 80036cc:	6820      	ldr	r0, [r4, #0]
 80036ce:	1821      	adds	r1, r4, r0
 80036d0:	428b      	cmp	r3, r1
 80036d2:	bf04      	itt	eq
 80036d4:	6819      	ldreq	r1, [r3, #0]
 80036d6:	685b      	ldreq	r3, [r3, #4]
 80036d8:	6063      	str	r3, [r4, #4]
 80036da:	bf04      	itt	eq
 80036dc:	1809      	addeq	r1, r1, r0
 80036de:	6021      	streq	r1, [r4, #0]
 80036e0:	6054      	str	r4, [r2, #4]
 80036e2:	e7ca      	b.n	800367a <_free_r+0x22>
 80036e4:	bd38      	pop	{r3, r4, r5, pc}
 80036e6:	bf00      	nop
 80036e8:	20000720 	.word	0x20000720

080036ec <sbrk_aligned>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	4e0f      	ldr	r6, [pc, #60]	@ (800372c <sbrk_aligned+0x40>)
 80036f0:	460c      	mov	r4, r1
 80036f2:	6831      	ldr	r1, [r6, #0]
 80036f4:	4605      	mov	r5, r0
 80036f6:	b911      	cbnz	r1, 80036fe <sbrk_aligned+0x12>
 80036f8:	f000 f9d6 	bl	8003aa8 <_sbrk_r>
 80036fc:	6030      	str	r0, [r6, #0]
 80036fe:	4621      	mov	r1, r4
 8003700:	4628      	mov	r0, r5
 8003702:	f000 f9d1 	bl	8003aa8 <_sbrk_r>
 8003706:	1c43      	adds	r3, r0, #1
 8003708:	d103      	bne.n	8003712 <sbrk_aligned+0x26>
 800370a:	f04f 34ff 	mov.w	r4, #4294967295
 800370e:	4620      	mov	r0, r4
 8003710:	bd70      	pop	{r4, r5, r6, pc}
 8003712:	1cc4      	adds	r4, r0, #3
 8003714:	f024 0403 	bic.w	r4, r4, #3
 8003718:	42a0      	cmp	r0, r4
 800371a:	d0f8      	beq.n	800370e <sbrk_aligned+0x22>
 800371c:	1a21      	subs	r1, r4, r0
 800371e:	4628      	mov	r0, r5
 8003720:	f000 f9c2 	bl	8003aa8 <_sbrk_r>
 8003724:	3001      	adds	r0, #1
 8003726:	d1f2      	bne.n	800370e <sbrk_aligned+0x22>
 8003728:	e7ef      	b.n	800370a <sbrk_aligned+0x1e>
 800372a:	bf00      	nop
 800372c:	2000071c 	.word	0x2000071c

08003730 <_malloc_r>:
 8003730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003734:	1ccd      	adds	r5, r1, #3
 8003736:	f025 0503 	bic.w	r5, r5, #3
 800373a:	3508      	adds	r5, #8
 800373c:	2d0c      	cmp	r5, #12
 800373e:	bf38      	it	cc
 8003740:	250c      	movcc	r5, #12
 8003742:	2d00      	cmp	r5, #0
 8003744:	4606      	mov	r6, r0
 8003746:	db01      	blt.n	800374c <_malloc_r+0x1c>
 8003748:	42a9      	cmp	r1, r5
 800374a:	d904      	bls.n	8003756 <_malloc_r+0x26>
 800374c:	230c      	movs	r3, #12
 800374e:	6033      	str	r3, [r6, #0]
 8003750:	2000      	movs	r0, #0
 8003752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800382c <_malloc_r+0xfc>
 800375a:	f000 f869 	bl	8003830 <__malloc_lock>
 800375e:	f8d8 3000 	ldr.w	r3, [r8]
 8003762:	461c      	mov	r4, r3
 8003764:	bb44      	cbnz	r4, 80037b8 <_malloc_r+0x88>
 8003766:	4629      	mov	r1, r5
 8003768:	4630      	mov	r0, r6
 800376a:	f7ff ffbf 	bl	80036ec <sbrk_aligned>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	4604      	mov	r4, r0
 8003772:	d158      	bne.n	8003826 <_malloc_r+0xf6>
 8003774:	f8d8 4000 	ldr.w	r4, [r8]
 8003778:	4627      	mov	r7, r4
 800377a:	2f00      	cmp	r7, #0
 800377c:	d143      	bne.n	8003806 <_malloc_r+0xd6>
 800377e:	2c00      	cmp	r4, #0
 8003780:	d04b      	beq.n	800381a <_malloc_r+0xea>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	4639      	mov	r1, r7
 8003786:	4630      	mov	r0, r6
 8003788:	eb04 0903 	add.w	r9, r4, r3
 800378c:	f000 f98c 	bl	8003aa8 <_sbrk_r>
 8003790:	4581      	cmp	r9, r0
 8003792:	d142      	bne.n	800381a <_malloc_r+0xea>
 8003794:	6821      	ldr	r1, [r4, #0]
 8003796:	1a6d      	subs	r5, r5, r1
 8003798:	4629      	mov	r1, r5
 800379a:	4630      	mov	r0, r6
 800379c:	f7ff ffa6 	bl	80036ec <sbrk_aligned>
 80037a0:	3001      	adds	r0, #1
 80037a2:	d03a      	beq.n	800381a <_malloc_r+0xea>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	442b      	add	r3, r5
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	f8d8 3000 	ldr.w	r3, [r8]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	bb62      	cbnz	r2, 800380c <_malloc_r+0xdc>
 80037b2:	f8c8 7000 	str.w	r7, [r8]
 80037b6:	e00f      	b.n	80037d8 <_malloc_r+0xa8>
 80037b8:	6822      	ldr	r2, [r4, #0]
 80037ba:	1b52      	subs	r2, r2, r5
 80037bc:	d420      	bmi.n	8003800 <_malloc_r+0xd0>
 80037be:	2a0b      	cmp	r2, #11
 80037c0:	d917      	bls.n	80037f2 <_malloc_r+0xc2>
 80037c2:	1961      	adds	r1, r4, r5
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	6025      	str	r5, [r4, #0]
 80037c8:	bf18      	it	ne
 80037ca:	6059      	strne	r1, [r3, #4]
 80037cc:	6863      	ldr	r3, [r4, #4]
 80037ce:	bf08      	it	eq
 80037d0:	f8c8 1000 	streq.w	r1, [r8]
 80037d4:	5162      	str	r2, [r4, r5]
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	4630      	mov	r0, r6
 80037da:	f000 f82f 	bl	800383c <__malloc_unlock>
 80037de:	f104 000b 	add.w	r0, r4, #11
 80037e2:	1d23      	adds	r3, r4, #4
 80037e4:	f020 0007 	bic.w	r0, r0, #7
 80037e8:	1ac2      	subs	r2, r0, r3
 80037ea:	bf1c      	itt	ne
 80037ec:	1a1b      	subne	r3, r3, r0
 80037ee:	50a3      	strne	r3, [r4, r2]
 80037f0:	e7af      	b.n	8003752 <_malloc_r+0x22>
 80037f2:	6862      	ldr	r2, [r4, #4]
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	bf0c      	ite	eq
 80037f8:	f8c8 2000 	streq.w	r2, [r8]
 80037fc:	605a      	strne	r2, [r3, #4]
 80037fe:	e7eb      	b.n	80037d8 <_malloc_r+0xa8>
 8003800:	4623      	mov	r3, r4
 8003802:	6864      	ldr	r4, [r4, #4]
 8003804:	e7ae      	b.n	8003764 <_malloc_r+0x34>
 8003806:	463c      	mov	r4, r7
 8003808:	687f      	ldr	r7, [r7, #4]
 800380a:	e7b6      	b.n	800377a <_malloc_r+0x4a>
 800380c:	461a      	mov	r2, r3
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	42a3      	cmp	r3, r4
 8003812:	d1fb      	bne.n	800380c <_malloc_r+0xdc>
 8003814:	2300      	movs	r3, #0
 8003816:	6053      	str	r3, [r2, #4]
 8003818:	e7de      	b.n	80037d8 <_malloc_r+0xa8>
 800381a:	230c      	movs	r3, #12
 800381c:	6033      	str	r3, [r6, #0]
 800381e:	4630      	mov	r0, r6
 8003820:	f000 f80c 	bl	800383c <__malloc_unlock>
 8003824:	e794      	b.n	8003750 <_malloc_r+0x20>
 8003826:	6005      	str	r5, [r0, #0]
 8003828:	e7d6      	b.n	80037d8 <_malloc_r+0xa8>
 800382a:	bf00      	nop
 800382c:	20000720 	.word	0x20000720

08003830 <__malloc_lock>:
 8003830:	4801      	ldr	r0, [pc, #4]	@ (8003838 <__malloc_lock+0x8>)
 8003832:	f7ff bf0e 	b.w	8003652 <__retarget_lock_acquire_recursive>
 8003836:	bf00      	nop
 8003838:	20000718 	.word	0x20000718

0800383c <__malloc_unlock>:
 800383c:	4801      	ldr	r0, [pc, #4]	@ (8003844 <__malloc_unlock+0x8>)
 800383e:	f7ff bf09 	b.w	8003654 <__retarget_lock_release_recursive>
 8003842:	bf00      	nop
 8003844:	20000718 	.word	0x20000718

08003848 <__sflush_r>:
 8003848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800384c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003850:	0716      	lsls	r6, r2, #28
 8003852:	4605      	mov	r5, r0
 8003854:	460c      	mov	r4, r1
 8003856:	d454      	bmi.n	8003902 <__sflush_r+0xba>
 8003858:	684b      	ldr	r3, [r1, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	dc02      	bgt.n	8003864 <__sflush_r+0x1c>
 800385e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	dd48      	ble.n	80038f6 <__sflush_r+0xae>
 8003864:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003866:	2e00      	cmp	r6, #0
 8003868:	d045      	beq.n	80038f6 <__sflush_r+0xae>
 800386a:	2300      	movs	r3, #0
 800386c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003870:	682f      	ldr	r7, [r5, #0]
 8003872:	6a21      	ldr	r1, [r4, #32]
 8003874:	602b      	str	r3, [r5, #0]
 8003876:	d030      	beq.n	80038da <__sflush_r+0x92>
 8003878:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800387a:	89a3      	ldrh	r3, [r4, #12]
 800387c:	0759      	lsls	r1, r3, #29
 800387e:	d505      	bpl.n	800388c <__sflush_r+0x44>
 8003880:	6863      	ldr	r3, [r4, #4]
 8003882:	1ad2      	subs	r2, r2, r3
 8003884:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003886:	b10b      	cbz	r3, 800388c <__sflush_r+0x44>
 8003888:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800388a:	1ad2      	subs	r2, r2, r3
 800388c:	2300      	movs	r3, #0
 800388e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003890:	6a21      	ldr	r1, [r4, #32]
 8003892:	4628      	mov	r0, r5
 8003894:	47b0      	blx	r6
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	d106      	bne.n	80038aa <__sflush_r+0x62>
 800389c:	6829      	ldr	r1, [r5, #0]
 800389e:	291d      	cmp	r1, #29
 80038a0:	d82b      	bhi.n	80038fa <__sflush_r+0xb2>
 80038a2:	4a2a      	ldr	r2, [pc, #168]	@ (800394c <__sflush_r+0x104>)
 80038a4:	410a      	asrs	r2, r1
 80038a6:	07d6      	lsls	r6, r2, #31
 80038a8:	d427      	bmi.n	80038fa <__sflush_r+0xb2>
 80038aa:	2200      	movs	r2, #0
 80038ac:	6062      	str	r2, [r4, #4]
 80038ae:	04d9      	lsls	r1, r3, #19
 80038b0:	6922      	ldr	r2, [r4, #16]
 80038b2:	6022      	str	r2, [r4, #0]
 80038b4:	d504      	bpl.n	80038c0 <__sflush_r+0x78>
 80038b6:	1c42      	adds	r2, r0, #1
 80038b8:	d101      	bne.n	80038be <__sflush_r+0x76>
 80038ba:	682b      	ldr	r3, [r5, #0]
 80038bc:	b903      	cbnz	r3, 80038c0 <__sflush_r+0x78>
 80038be:	6560      	str	r0, [r4, #84]	@ 0x54
 80038c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038c2:	602f      	str	r7, [r5, #0]
 80038c4:	b1b9      	cbz	r1, 80038f6 <__sflush_r+0xae>
 80038c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038ca:	4299      	cmp	r1, r3
 80038cc:	d002      	beq.n	80038d4 <__sflush_r+0x8c>
 80038ce:	4628      	mov	r0, r5
 80038d0:	f7ff fec2 	bl	8003658 <_free_r>
 80038d4:	2300      	movs	r3, #0
 80038d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80038d8:	e00d      	b.n	80038f6 <__sflush_r+0xae>
 80038da:	2301      	movs	r3, #1
 80038dc:	4628      	mov	r0, r5
 80038de:	47b0      	blx	r6
 80038e0:	4602      	mov	r2, r0
 80038e2:	1c50      	adds	r0, r2, #1
 80038e4:	d1c9      	bne.n	800387a <__sflush_r+0x32>
 80038e6:	682b      	ldr	r3, [r5, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0c6      	beq.n	800387a <__sflush_r+0x32>
 80038ec:	2b1d      	cmp	r3, #29
 80038ee:	d001      	beq.n	80038f4 <__sflush_r+0xac>
 80038f0:	2b16      	cmp	r3, #22
 80038f2:	d11e      	bne.n	8003932 <__sflush_r+0xea>
 80038f4:	602f      	str	r7, [r5, #0]
 80038f6:	2000      	movs	r0, #0
 80038f8:	e022      	b.n	8003940 <__sflush_r+0xf8>
 80038fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038fe:	b21b      	sxth	r3, r3
 8003900:	e01b      	b.n	800393a <__sflush_r+0xf2>
 8003902:	690f      	ldr	r7, [r1, #16]
 8003904:	2f00      	cmp	r7, #0
 8003906:	d0f6      	beq.n	80038f6 <__sflush_r+0xae>
 8003908:	0793      	lsls	r3, r2, #30
 800390a:	680e      	ldr	r6, [r1, #0]
 800390c:	bf08      	it	eq
 800390e:	694b      	ldreq	r3, [r1, #20]
 8003910:	600f      	str	r7, [r1, #0]
 8003912:	bf18      	it	ne
 8003914:	2300      	movne	r3, #0
 8003916:	eba6 0807 	sub.w	r8, r6, r7
 800391a:	608b      	str	r3, [r1, #8]
 800391c:	f1b8 0f00 	cmp.w	r8, #0
 8003920:	dde9      	ble.n	80038f6 <__sflush_r+0xae>
 8003922:	6a21      	ldr	r1, [r4, #32]
 8003924:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003926:	4643      	mov	r3, r8
 8003928:	463a      	mov	r2, r7
 800392a:	4628      	mov	r0, r5
 800392c:	47b0      	blx	r6
 800392e:	2800      	cmp	r0, #0
 8003930:	dc08      	bgt.n	8003944 <__sflush_r+0xfc>
 8003932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800393a:	81a3      	strh	r3, [r4, #12]
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003944:	4407      	add	r7, r0
 8003946:	eba8 0800 	sub.w	r8, r8, r0
 800394a:	e7e7      	b.n	800391c <__sflush_r+0xd4>
 800394c:	dfbffffe 	.word	0xdfbffffe

08003950 <_fflush_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	690b      	ldr	r3, [r1, #16]
 8003954:	4605      	mov	r5, r0
 8003956:	460c      	mov	r4, r1
 8003958:	b913      	cbnz	r3, 8003960 <_fflush_r+0x10>
 800395a:	2500      	movs	r5, #0
 800395c:	4628      	mov	r0, r5
 800395e:	bd38      	pop	{r3, r4, r5, pc}
 8003960:	b118      	cbz	r0, 800396a <_fflush_r+0x1a>
 8003962:	6a03      	ldr	r3, [r0, #32]
 8003964:	b90b      	cbnz	r3, 800396a <_fflush_r+0x1a>
 8003966:	f7ff fc8f 	bl	8003288 <__sinit>
 800396a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f3      	beq.n	800395a <_fflush_r+0xa>
 8003972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003974:	07d0      	lsls	r0, r2, #31
 8003976:	d404      	bmi.n	8003982 <_fflush_r+0x32>
 8003978:	0599      	lsls	r1, r3, #22
 800397a:	d402      	bmi.n	8003982 <_fflush_r+0x32>
 800397c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800397e:	f7ff fe68 	bl	8003652 <__retarget_lock_acquire_recursive>
 8003982:	4628      	mov	r0, r5
 8003984:	4621      	mov	r1, r4
 8003986:	f7ff ff5f 	bl	8003848 <__sflush_r>
 800398a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800398c:	07da      	lsls	r2, r3, #31
 800398e:	4605      	mov	r5, r0
 8003990:	d4e4      	bmi.n	800395c <_fflush_r+0xc>
 8003992:	89a3      	ldrh	r3, [r4, #12]
 8003994:	059b      	lsls	r3, r3, #22
 8003996:	d4e1      	bmi.n	800395c <_fflush_r+0xc>
 8003998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800399a:	f7ff fe5b 	bl	8003654 <__retarget_lock_release_recursive>
 800399e:	e7dd      	b.n	800395c <_fflush_r+0xc>

080039a0 <__swhatbuf_r>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	460c      	mov	r4, r1
 80039a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039a8:	2900      	cmp	r1, #0
 80039aa:	b096      	sub	sp, #88	@ 0x58
 80039ac:	4615      	mov	r5, r2
 80039ae:	461e      	mov	r6, r3
 80039b0:	da0d      	bge.n	80039ce <__swhatbuf_r+0x2e>
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	bf14      	ite	ne
 80039be:	2340      	movne	r3, #64	@ 0x40
 80039c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80039c4:	2000      	movs	r0, #0
 80039c6:	6031      	str	r1, [r6, #0]
 80039c8:	602b      	str	r3, [r5, #0]
 80039ca:	b016      	add	sp, #88	@ 0x58
 80039cc:	bd70      	pop	{r4, r5, r6, pc}
 80039ce:	466a      	mov	r2, sp
 80039d0:	f000 f848 	bl	8003a64 <_fstat_r>
 80039d4:	2800      	cmp	r0, #0
 80039d6:	dbec      	blt.n	80039b2 <__swhatbuf_r+0x12>
 80039d8:	9901      	ldr	r1, [sp, #4]
 80039da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80039de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80039e2:	4259      	negs	r1, r3
 80039e4:	4159      	adcs	r1, r3
 80039e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039ea:	e7eb      	b.n	80039c4 <__swhatbuf_r+0x24>

080039ec <__smakebuf_r>:
 80039ec:	898b      	ldrh	r3, [r1, #12]
 80039ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039f0:	079d      	lsls	r5, r3, #30
 80039f2:	4606      	mov	r6, r0
 80039f4:	460c      	mov	r4, r1
 80039f6:	d507      	bpl.n	8003a08 <__smakebuf_r+0x1c>
 80039f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	6123      	str	r3, [r4, #16]
 8003a00:	2301      	movs	r3, #1
 8003a02:	6163      	str	r3, [r4, #20]
 8003a04:	b003      	add	sp, #12
 8003a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a08:	ab01      	add	r3, sp, #4
 8003a0a:	466a      	mov	r2, sp
 8003a0c:	f7ff ffc8 	bl	80039a0 <__swhatbuf_r>
 8003a10:	9f00      	ldr	r7, [sp, #0]
 8003a12:	4605      	mov	r5, r0
 8003a14:	4639      	mov	r1, r7
 8003a16:	4630      	mov	r0, r6
 8003a18:	f7ff fe8a 	bl	8003730 <_malloc_r>
 8003a1c:	b948      	cbnz	r0, 8003a32 <__smakebuf_r+0x46>
 8003a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a22:	059a      	lsls	r2, r3, #22
 8003a24:	d4ee      	bmi.n	8003a04 <__smakebuf_r+0x18>
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	f043 0302 	orr.w	r3, r3, #2
 8003a2e:	81a3      	strh	r3, [r4, #12]
 8003a30:	e7e2      	b.n	80039f8 <__smakebuf_r+0xc>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	6020      	str	r0, [r4, #0]
 8003a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	9b01      	ldr	r3, [sp, #4]
 8003a3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003a42:	b15b      	cbz	r3, 8003a5c <__smakebuf_r+0x70>
 8003a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f000 f81d 	bl	8003a88 <_isatty_r>
 8003a4e:	b128      	cbz	r0, 8003a5c <__smakebuf_r+0x70>
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	81a3      	strh	r3, [r4, #12]
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	431d      	orrs	r5, r3
 8003a60:	81a5      	strh	r5, [r4, #12]
 8003a62:	e7cf      	b.n	8003a04 <__smakebuf_r+0x18>

08003a64 <_fstat_r>:
 8003a64:	b538      	push	{r3, r4, r5, lr}
 8003a66:	4d07      	ldr	r5, [pc, #28]	@ (8003a84 <_fstat_r+0x20>)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	4608      	mov	r0, r1
 8003a6e:	4611      	mov	r1, r2
 8003a70:	602b      	str	r3, [r5, #0]
 8003a72:	f7fd f8a9 	bl	8000bc8 <_fstat>
 8003a76:	1c43      	adds	r3, r0, #1
 8003a78:	d102      	bne.n	8003a80 <_fstat_r+0x1c>
 8003a7a:	682b      	ldr	r3, [r5, #0]
 8003a7c:	b103      	cbz	r3, 8003a80 <_fstat_r+0x1c>
 8003a7e:	6023      	str	r3, [r4, #0]
 8003a80:	bd38      	pop	{r3, r4, r5, pc}
 8003a82:	bf00      	nop
 8003a84:	20000714 	.word	0x20000714

08003a88 <_isatty_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	4d06      	ldr	r5, [pc, #24]	@ (8003aa4 <_isatty_r+0x1c>)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	602b      	str	r3, [r5, #0]
 8003a94:	f7fd f8a8 	bl	8000be8 <_isatty>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_isatty_r+0x1a>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_isatty_r+0x1a>
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	20000714 	.word	0x20000714

08003aa8 <_sbrk_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4d06      	ldr	r5, [pc, #24]	@ (8003ac4 <_sbrk_r+0x1c>)
 8003aac:	2300      	movs	r3, #0
 8003aae:	4604      	mov	r4, r0
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	602b      	str	r3, [r5, #0]
 8003ab4:	f7fd f8b0 	bl	8000c18 <_sbrk>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d102      	bne.n	8003ac2 <_sbrk_r+0x1a>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	b103      	cbz	r3, 8003ac2 <_sbrk_r+0x1a>
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	20000714 	.word	0x20000714

08003ac8 <_init>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr

08003ad4 <_fini>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr
