
LED_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003fb8  08003fb8  00004fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004034  08004034  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004034  08004034  00005034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800403c  0800403c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800403c  0800403c  0000503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004040  08004040  00005040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004044  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  20000068  080040ac  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  080040ac  00006704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c705  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa9  00000000  00000000  0001279d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  00014748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000828  00000000  00000000  00015200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020339  00000000  00000000  00015a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5be  00000000  00000000  00035d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bea07  00000000  00000000  0004431f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102d26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c8  00000000  00000000  00102d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00106134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003fa0 	.word	0x08003fa0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003fa0 	.word	0x08003fa0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char* ptr, int len) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d002      	beq.n	80005b8 <_write+0x18>
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d111      	bne.n	80005dc <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	68b9      	ldr	r1, [r7, #8]
 80005c2:	4809      	ldr	r0, [pc, #36]	@ (80005e8 <_write+0x48>)
 80005c4:	f001 fea8 	bl	8002318 <HAL_UART_Transmit>
 80005c8:	4603      	mov	r3, r0
 80005ca:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80005cc:	7dfb      	ldrb	r3, [r7, #23]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d101      	bne.n	80005d6 <_write+0x36>
      return len;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	e004      	b.n	80005e0 <_write+0x40>
    else
      return -1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e001      	b.n	80005e0 <_write+0x40>
  }
  return -1;
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000084 	.word	0x20000084

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fb6b 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f821 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f8e5 	bl	80007c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fe:	f000 f889 	bl	8000714 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000602:	f000 f8b1 	bl	8000768 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("First application starting\n");
 8000606:	480b      	ldr	r0, [pc, #44]	@ (8000634 <main+0x48>)
 8000608:	f002 fe66 	bl	80032d8 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_print = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]

  while (1)
  {
    now = HAL_GetTick();
 8000614:	f000 fbc0 	bl	8000d98 <HAL_GetTick>
 8000618:	6038      	str	r0, [r7, #0]
    if (now - last_print >= 1000) {
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000624:	d3f6      	bcc.n	8000614 <main+0x28>
      printf("Лупинг%lu\n", now);
 8000626:	6839      	ldr	r1, [r7, #0]
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <main+0x4c>)
 800062a:	f002 fded 	bl	8003208 <iprintf>
      last_print = now;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	607b      	str	r3, [r7, #4]
    now = HAL_GetTick();
 8000632:	e7ef      	b.n	8000614 <main+0x28>
 8000634:	08003fb8 	.word	0x08003fb8
 8000638:	08003fd4 	.word	0x08003fd4

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	@ 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 ff24 	bl	8003498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b29      	ldr	r3, [pc, #164]	@ (800070c <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a28      	ldr	r2, [pc, #160]	@ (800070c <SystemClock_Config+0xd0>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <SystemClock_Config+0xd4>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80006b0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80006b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006ba:	2308      	movs	r3, #8
 80006bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fb52 	bl	8001d70 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f000 f925 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2103      	movs	r1, #3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 ff4e 	bl	8001594 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f000 f90f 	bl	8000920 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	@ 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_USART3_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <MX_USART3_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_USART3_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_USART3_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_USART3_UART_Init+0x4c>)
 800074c:	f001 fd94 	bl	8002278 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f8e3 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000084 	.word	0x20000084
 8000764:	40004800 	.word	0x40004800

08000768 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800076e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000772:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000776:	2206      	movs	r2, #6
 8000778:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800077c:	2202      	movs	r2, #2
 800077e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000782:	2200      	movs	r2, #0
 8000784:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000788:	2202      	movs	r2, #2
 800078a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800078e:	2201      	movs	r2, #1
 8000790:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000794:	2200      	movs	r2, #0
 8000796:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800079a:	2200      	movs	r2, #0
 800079c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007b2:	f000 fdb4 	bl	800131e <HAL_PCD_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80007bc:	f000 f8b0 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000cc 	.word	0x200000cc

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	@ 0x30
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000910 <MX_GPIO_Init+0x148>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a4a      	ldr	r2, [pc, #296]	@ (8000910 <MX_GPIO_Init+0x148>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b48      	ldr	r3, [pc, #288]	@ (8000910 <MX_GPIO_Init+0x148>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	4b44      	ldr	r3, [pc, #272]	@ (8000910 <MX_GPIO_Init+0x148>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a43      	ldr	r2, [pc, #268]	@ (8000910 <MX_GPIO_Init+0x148>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b41      	ldr	r3, [pc, #260]	@ (8000910 <MX_GPIO_Init+0x148>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b3d      	ldr	r3, [pc, #244]	@ (8000910 <MX_GPIO_Init+0x148>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a3c      	ldr	r2, [pc, #240]	@ (8000910 <MX_GPIO_Init+0x148>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b3a      	ldr	r3, [pc, #232]	@ (8000910 <MX_GPIO_Init+0x148>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b36      	ldr	r3, [pc, #216]	@ (8000910 <MX_GPIO_Init+0x148>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a35      	ldr	r2, [pc, #212]	@ (8000910 <MX_GPIO_Init+0x148>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b33      	ldr	r3, [pc, #204]	@ (8000910 <MX_GPIO_Init+0x148>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b2f      	ldr	r3, [pc, #188]	@ (8000910 <MX_GPIO_Init+0x148>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a2e      	ldr	r2, [pc, #184]	@ (8000910 <MX_GPIO_Init+0x148>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <MX_GPIO_Init+0x148>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <MX_GPIO_Init+0x148>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a27      	ldr	r2, [pc, #156]	@ (8000910 <MX_GPIO_Init+0x148>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <MX_GPIO_Init+0x148>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2101      	movs	r1, #1
 800088a:	4822      	ldr	r0, [pc, #136]	@ (8000914 <MX_GPIO_Init+0x14c>)
 800088c:	f000 fd2e 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2140      	movs	r1, #64	@ 0x40
 8000894:	4820      	ldr	r0, [pc, #128]	@ (8000918 <MX_GPIO_Init+0x150>)
 8000896:	f000 fd29 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008a0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481a      	ldr	r0, [pc, #104]	@ (800091c <MX_GPIO_Init+0x154>)
 80008b2:	f000 fb87 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4811      	ldr	r0, [pc, #68]	@ (8000914 <MX_GPIO_Init+0x14c>)
 80008ce:	f000 fb79 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d2:	2340      	movs	r3, #64	@ 0x40
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <MX_GPIO_Init+0x150>)
 80008ea:	f000 fb6b 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ee:	2380      	movs	r3, #128	@ 0x80
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_GPIO_Init+0x150>)
 8000902:	f000 fb5f 	bl	8000fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	@ 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40020400 	.word	0x40020400
 8000918:	40021800 	.word	0x40021800
 800091c:	40020800 	.word	0x40020800

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	@ 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <HAL_UART_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12c      	bne.n	80009f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	4a17      	ldr	r2, [pc, #92]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009e8:	2307      	movs	r3, #7
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <HAL_UART_MspInit+0x8c>)
 80009f4:	f000 fae6 	bl	8000fc4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	@ 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40004800 	.word	0x40004800
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b098      	sub	sp, #96	@ 0x60
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	223c      	movs	r2, #60	@ 0x3c
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fd33 	bl	8003498 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a3a:	d14d      	bne.n	8000ad8 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 ffc3 	bl	80019d4 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000a54:	f7ff ff64 	bl	8000920 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <HAL_PCD_MspInit+0xd4>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a60:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae0 <HAL_PCD_MspInit+0xd4>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae0 <HAL_PCD_MspInit+0xd4>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a74:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a86:	230a      	movs	r3, #10
 8000a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4814      	ldr	r0, [pc, #80]	@ (8000ae4 <HAL_PCD_MspInit+0xd8>)
 8000a92:	f000 fa97 	bl	8000fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480e      	ldr	r0, [pc, #56]	@ (8000ae4 <HAL_PCD_MspInit+0xd8>)
 8000aac:	f000 fa8a 	bl	8000fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <HAL_PCD_MspInit+0xd4>)
 8000ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_PCD_MspInit+0xd4>)
 8000ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aba:	6353      	str	r3, [r2, #52]	@ 0x34
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <HAL_PCD_MspInit+0xd4>)
 8000ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac4:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <HAL_PCD_MspInit+0xd4>)
 8000ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aca:	6453      	str	r3, [r2, #68]	@ 0x44
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <HAL_PCD_MspInit+0xd4>)
 8000ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ad8:	bf00      	nop
 8000ada:	3760      	adds	r7, #96	@ 0x60
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3e:	f000 f917 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	60f8      	str	r0, [r7, #12]
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	e00a      	b.n	8000b6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b58:	f3af 8000 	nop.w
 8000b5c:	4601      	mov	r1, r0
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	60ba      	str	r2, [r7, #8]
 8000b64:	b2ca      	uxtb	r2, r1
 8000b66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	dbf0      	blt.n	8000b58 <_read+0x12>
  }

  return len;
 8000b76:	687b      	ldr	r3, [r7, #4]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ba8:	605a      	str	r2, [r3, #4]
  return 0;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_isatty>:

int _isatty(int file)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc0:	2301      	movs	r3, #1
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf0:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <_sbrk+0x5c>)
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <_sbrk+0x60>)
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <_sbrk+0x64>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <_sbrk+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d207      	bcs.n	8000c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c18:	f002 fc8c 	bl	8003534 <__errno>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	220c      	movs	r2, #12
 8000c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e009      	b.n	8000c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <_sbrk+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20040000 	.word	0x20040000
 8000c48:	00000400 	.word	0x00000400
 8000c4c:	200005b0 	.word	0x200005b0
 8000c50:	20000708 	.word	0x20000708

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c7c:	f7ff ffea 	bl	8000c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c82:	490d      	ldr	r1, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c84:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c98:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f002 fc4b 	bl	8003540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fc9f 	bl	80005ec <main>
  bx  lr    
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cb0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cbc:	08004044 	.word	0x08004044
  ldr r2, =_sbss
 8000cc0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cc4:	20000704 	.word	0x20000704

08000cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <HAL_Init+0x40>)
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <HAL_Init+0x40>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	@ (8000d0c <HAL_Init+0x40>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f931 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f808 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fe14 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f93b 	bl	8000faa <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f911 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	@ (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	200005b4 	.word	0x200005b4

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	200005b4 	.word	0x200005b4

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffde 	bl	8000d98 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	@ (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	@ (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	@ 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff47 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff5c 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffb0 	bl	8000f18 <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	@ 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e165      	b.n	80012ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f040 8154 	bne.w	80012a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	2b02      	cmp	r3, #2
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b03      	cmp	r3, #3
 8001082:	d017      	beq.n	80010b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80ae 	beq.w	80012a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b5d      	ldr	r3, [pc, #372]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	4a5c      	ldr	r2, [pc, #368]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001158:	6453      	str	r3, [r2, #68]	@ 0x44
 800115a:	4b5a      	ldr	r3, [pc, #360]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	4a58      	ldr	r2, [pc, #352]	@ (80012c8 <HAL_GPIO_Init+0x304>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4f      	ldr	r2, [pc, #316]	@ (80012cc <HAL_GPIO_Init+0x308>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x21a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4e      	ldr	r2, [pc, #312]	@ (80012d0 <HAL_GPIO_Init+0x30c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x216>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4d      	ldr	r2, [pc, #308]	@ (80012d4 <HAL_GPIO_Init+0x310>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x212>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4c      	ldr	r2, [pc, #304]	@ (80012d8 <HAL_GPIO_Init+0x314>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4b      	ldr	r2, [pc, #300]	@ (80012dc <HAL_GPIO_Init+0x318>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x20a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4a      	ldr	r2, [pc, #296]	@ (80012e0 <HAL_GPIO_Init+0x31c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x206>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a49      	ldr	r2, [pc, #292]	@ (80012e4 <HAL_GPIO_Init+0x320>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x202>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00c      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00a      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	@ (80012c8 <HAL_GPIO_Init+0x304>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a31      	ldr	r2, [pc, #196]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a26      	ldr	r2, [pc, #152]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a0:	4a11      	ldr	r2, [pc, #68]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f ae96 	bls.w	8000fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af02      	add	r7, sp, #8
 8001324:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e108      	b.n	8001542 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fb5e 	bl	8000a0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800135e:	d102      	bne.n	8001366 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fbf4 	bl	8002b58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7c1a      	ldrb	r2, [r3, #16]
 8001378:	f88d 2000 	strb.w	r2, [sp]
 800137c:	3304      	adds	r3, #4
 800137e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001380:	f001 fb86 	bl	8002a90 <USB_CoreInit>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2202      	movs	r2, #2
 800138e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0d5      	b.n	8001542 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fbec 	bl	8002b7a <USB_SetCurrentMode>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2202      	movs	r2, #2
 80013ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0c6      	b.n	8001542 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e04a      	b.n	8001450 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3315      	adds	r3, #21
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	3314      	adds	r3, #20
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	b298      	uxth	r0, r3
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	332e      	adds	r3, #46	@ 0x2e
 80013f6:	4602      	mov	r2, r0
 80013f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	3318      	adds	r3, #24
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	331c      	adds	r3, #28
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3320      	adds	r3, #32
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	3324      	adds	r3, #36	@ 0x24
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	3301      	adds	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	791b      	ldrb	r3, [r3, #4]
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	429a      	cmp	r2, r3
 8001458:	d3af      	bcc.n	80013ba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e044      	b.n	80014ea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	3301      	adds	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	791b      	ldrb	r3, [r3, #4]
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3b5      	bcc.n	8001460 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7c1a      	ldrb	r2, [r3, #16]
 80014fc:	f88d 2000 	strb.w	r2, [sp]
 8001500:	3304      	adds	r3, #4
 8001502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001504:	f001 fb86 	bl	8002c14 <USB_DevInit>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2202      	movs	r2, #2
 8001512:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e013      	b.n	8001542 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7b1b      	ldrb	r3, [r3, #12]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d102      	bne.n	8001536 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f80a 	bl	800154a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fd41 	bl	8002fc2 <USB_DevDisconnect>

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	f043 0303 	orr.w	r3, r3, #3
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0cc      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b68      	ldr	r3, [pc, #416]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d90c      	bls.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b65      	ldr	r3, [pc, #404]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b63      	ldr	r3, [pc, #396]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b8      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e8:	4b59      	ldr	r3, [pc, #356]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a58      	ldr	r2, [pc, #352]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001600:	4b53      	ldr	r3, [pc, #332]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a52      	ldr	r2, [pc, #328]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800160a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160c:	4b50      	ldr	r3, [pc, #320]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	494d      	ldr	r1, [pc, #308]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d044      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d119      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e07f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d003      	beq.n	8001652 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	2b03      	cmp	r3, #3
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	4b3f      	ldr	r3, [pc, #252]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	4b3b      	ldr	r3, [pc, #236]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e067      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001672:	4b37      	ldr	r3, [pc, #220]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f023 0203 	bic.w	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4934      	ldr	r1, [pc, #208]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001684:	f7ff fb88 	bl	8000d98 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168c:	f7ff fb84 	bl	8000d98 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e04f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 020c 	and.w	r2, r3, #12
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1eb      	bne.n	800168c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b4:	4b25      	ldr	r3, [pc, #148]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d20c      	bcs.n	80016dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b22      	ldr	r3, [pc, #136]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e032      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4916      	ldr	r1, [pc, #88]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	490e      	ldr	r1, [pc, #56]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800171a:	f000 f821 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 800171e:	4602      	mov	r2, r0
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	490a      	ldr	r1, [pc, #40]	@ (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	5ccb      	ldrb	r3, [r1, r3]
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fae8 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00
 8001750:	40023800 	.word	0x40023800
 8001754:	08003fe8 	.word	0x08003fe8
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001764:	b094      	sub	sp, #80	@ 0x50
 8001766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001778:	4b79      	ldr	r3, [pc, #484]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d00d      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001784:	2b08      	cmp	r3, #8
 8001786:	f200 80e1 	bhi.w	800194c <HAL_RCC_GetSysClockFreq+0x1ec>
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x34>
 800178e:	2b04      	cmp	r3, #4
 8001790:	d003      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x3a>
 8001792:	e0db      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b73      	ldr	r3, [pc, #460]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x204>)
 8001796:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001798:	e0db      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179a:	4b73      	ldr	r3, [pc, #460]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x208>)
 800179c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800179e:	e0d8      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d063      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	099b      	lsrs	r3, r3, #6
 80017bc:	2200      	movs	r2, #0
 80017be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017d2:	4622      	mov	r2, r4
 80017d4:	462b      	mov	r3, r5
 80017d6:	f04f 0000 	mov.w	r0, #0
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	0159      	lsls	r1, r3, #5
 80017e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e4:	0150      	lsls	r0, r2, #5
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4621      	mov	r1, r4
 80017ec:	1a51      	subs	r1, r2, r1
 80017ee:	6139      	str	r1, [r7, #16]
 80017f0:	4629      	mov	r1, r5
 80017f2:	eb63 0301 	sbc.w	r3, r3, r1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001804:	4659      	mov	r1, fp
 8001806:	018b      	lsls	r3, r1, #6
 8001808:	4651      	mov	r1, sl
 800180a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180e:	4651      	mov	r1, sl
 8001810:	018a      	lsls	r2, r1, #6
 8001812:	4651      	mov	r1, sl
 8001814:	ebb2 0801 	subs.w	r8, r2, r1
 8001818:	4659      	mov	r1, fp
 800181a:	eb63 0901 	sbc.w	r9, r3, r1
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800182a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800182e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001832:	4690      	mov	r8, r2
 8001834:	4699      	mov	r9, r3
 8001836:	4623      	mov	r3, r4
 8001838:	eb18 0303 	adds.w	r3, r8, r3
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	462b      	mov	r3, r5
 8001840:	eb49 0303 	adc.w	r3, r9, r3
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001852:	4629      	mov	r1, r5
 8001854:	024b      	lsls	r3, r1, #9
 8001856:	4621      	mov	r1, r4
 8001858:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800185c:	4621      	mov	r1, r4
 800185e:	024a      	lsls	r2, r1, #9
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001866:	2200      	movs	r2, #0
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800186a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800186c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001870:	f7fe fd1e 	bl	80002b0 <__aeabi_uldivmod>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4613      	mov	r3, r2
 800187a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800187c:	e058      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187e:	4b38      	ldr	r3, [pc, #224]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	099b      	lsrs	r3, r3, #6
 8001884:	2200      	movs	r2, #0
 8001886:	4618      	mov	r0, r3
 8001888:	4611      	mov	r1, r2
 800188a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
 8001894:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001898:	4642      	mov	r2, r8
 800189a:	464b      	mov	r3, r9
 800189c:	f04f 0000 	mov.w	r0, #0
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	0159      	lsls	r1, r3, #5
 80018a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018aa:	0150      	lsls	r0, r2, #5
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4641      	mov	r1, r8
 80018b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80018b6:	4649      	mov	r1, r9
 80018b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018d0:	ebb2 040a 	subs.w	r4, r2, sl
 80018d4:	eb63 050b 	sbc.w	r5, r3, fp
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	00eb      	lsls	r3, r5, #3
 80018e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e6:	00e2      	lsls	r2, r4, #3
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	4643      	mov	r3, r8
 80018ee:	18e3      	adds	r3, r4, r3
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	464b      	mov	r3, r9
 80018f4:	eb45 0303 	adc.w	r3, r5, r3
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001906:	4629      	mov	r1, r5
 8001908:	028b      	lsls	r3, r1, #10
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001910:	4621      	mov	r1, r4
 8001912:	028a      	lsls	r2, r1, #10
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800191a:	2200      	movs	r2, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	61fa      	str	r2, [r7, #28]
 8001920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001924:	f7fe fcc4 	bl	80002b0 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001940:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x204>)
 800194e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001954:	4618      	mov	r0, r3
 8001956:	3750      	adds	r7, #80	@ 0x50
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	007a1200 	.word	0x007a1200

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <HAL_RCC_GetHCLKFreq+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001988:	f7ff fff0 	bl	800196c <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	@ (80019a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08003ff8 	.word	0x08003ff8

080019ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b0:	f7ff ffdc 	bl	800196c <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	0b5b      	lsrs	r3, r3, #13
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4903      	ldr	r1, [pc, #12]	@ (80019d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	08003ff8 	.word	0x08003ff8

080019d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d010      	beq.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80019f4:	4b87      	ldr	r3, [pc, #540]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80019f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019fa:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4984      	ldr	r1, [pc, #528]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8001a12:	2301      	movs	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d010      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a22:	4b7c      	ldr	r3, [pc, #496]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a28:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4978      	ldr	r1, [pc, #480]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8001a40:	2301      	movs	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8083 	beq.w	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b6f      	ldr	r3, [pc, #444]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b6c      	ldr	r3, [pc, #432]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a69      	ldr	r2, [pc, #420]	@ (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a7a:	f7ff f98d 	bl	8000d98 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a82:	f7ff f989 	bl	8000d98 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e162      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a94:	4b60      	ldr	r3, [pc, #384]	@ (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aa0:	4b5c      	ldr	r3, [pc, #368]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aa8:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d02f      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d028      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001abe:	4b55      	ldr	r3, [pc, #340]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ac6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ac8:	4b54      	ldr	r3, [pc, #336]	@ (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ace:	4b53      	ldr	r3, [pc, #332]	@ (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ad4:	4a4f      	ldr	r2, [pc, #316]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ada:	4b4e      	ldr	r3, [pc, #312]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d114      	bne.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f957 	bl	8000d98 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff f953 	bl	8000d98 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e12a      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b04:	4b43      	ldr	r3, [pc, #268]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ee      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b1c:	d10d      	bne.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b32:	4938      	ldr	r1, [pc, #224]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]
 8001b38:	e005      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8001b3a:	4b36      	ldr	r3, [pc, #216]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	4a35      	ldr	r2, [pc, #212]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b40:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001b44:	6093      	str	r3, [r2, #8]
 8001b46:	4b33      	ldr	r3, [pc, #204]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b48:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b52:	4930      	ldr	r1, [pc, #192]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00a      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b7a:	4b26      	ldr	r3, [pc, #152]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	4922      	ldr	r1, [pc, #136]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d011      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001baa:	491a      	ldr	r1, [pc, #104]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00a      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	490e      	ldr	r1, [pc, #56]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d004      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b80      	cmp	r3, #128	@ 0x80
 8001bee:	f040 8091 	bne.w	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bf8:	f7ff f8ce 	bl	8000d98 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bfe:	e013      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c00:	f7ff f8ca 	bl	8000d98 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d90c      	bls.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0a3      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	42470e40 	.word	0x42470e40
 8001c20:	424711e0 	.word	0x424711e0
 8001c24:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c28:	4b4e      	ldr	r3, [pc, #312]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e5      	bne.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001c34:	4a4c      	ldr	r2, [pc, #304]	@ (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d019      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c78:	d00e      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d019      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d115      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c96:	d110      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	019b      	lsls	r3, r3, #6
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	071b      	lsls	r3, r3, #28
 8001cb2:	492c      	ldr	r1, [pc, #176]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d010      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	019b      	lsls	r3, r3, #6
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	061b      	lsls	r3, r3, #24
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	071b      	lsls	r3, r3, #28
 8001ce0:	4920      	ldr	r1, [pc, #128]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001ce8:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cee:	f7ff f853 	bl	8000d98 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cf6:	f7ff f84f 	bl	8000d98 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e028      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00a      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d20:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2e:	490d      	ldr	r1, [pc, #52]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001d42:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d48:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d50:	4904      	ldr	r1, [pc, #16]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	424710d8 	.word	0x424710d8
 8001d6c:	42470068 	.word	0x42470068

08001d70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e273      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d075      	beq.n	8001e7a <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d8e:	4b88      	ldr	r3, [pc, #544]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d00c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d9a:	4b85      	ldr	r3, [pc, #532]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d112      	bne.n	8001dcc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da6:	4b82      	ldr	r3, [pc, #520]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001db2:	d10b      	bne.n	8001dcc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	4b7e      	ldr	r3, [pc, #504]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d05b      	beq.n	8001e78 <HAL_RCC_OscConfig+0x108>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d157      	bne.n	8001e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e24e      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd4:	d106      	bne.n	8001de4 <HAL_RCC_OscConfig+0x74>
 8001dd6:	4b76      	ldr	r3, [pc, #472]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a75      	ldr	r2, [pc, #468]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e01d      	b.n	8001e20 <HAL_RCC_OscConfig+0xb0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x98>
 8001dee:	4b70      	ldr	r3, [pc, #448]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6f      	ldr	r2, [pc, #444]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6c      	ldr	r2, [pc, #432]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e00b      	b.n	8001e20 <HAL_RCC_OscConfig+0xb0>
 8001e08:	4b69      	ldr	r3, [pc, #420]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a68      	ldr	r2, [pc, #416]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b66      	ldr	r3, [pc, #408]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a65      	ldr	r2, [pc, #404]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d013      	beq.n	8001e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7fe ffb6 	bl	8000d98 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e30:	f7fe ffb2 	bl	8000d98 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	@ 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e213      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0xc0>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7fe ffa2 	bl	8000d98 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e58:	f7fe ff9e 	bl	8000d98 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	@ 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1ff      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	4b51      	ldr	r3, [pc, #324]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0xe8>
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d063      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e86:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00b      	beq.n	8001eaa <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e92:	4b47      	ldr	r3, [pc, #284]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d11c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e9e:	4b44      	ldr	r3, [pc, #272]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d116      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x152>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d001      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e1d3      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4937      	ldr	r1, [pc, #220]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	e03a      	b.n	8001f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d020      	beq.n	8001f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee0:	4b34      	ldr	r3, [pc, #208]	@ (8001fb4 <HAL_RCC_OscConfig+0x244>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7fe ff57 	bl	8000d98 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eee:	f7fe ff53 	bl	8000d98 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e1b4      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0c:	4b28      	ldr	r3, [pc, #160]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4925      	ldr	r1, [pc, #148]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
 8001f20:	e015      	b.n	8001f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f22:	4b24      	ldr	r3, [pc, #144]	@ (8001fb4 <HAL_RCC_OscConfig+0x244>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe ff36 	bl	8000d98 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f30:	f7fe ff32 	bl	8000d98 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e193      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d036      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d016      	beq.n	8001f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <HAL_RCC_OscConfig+0x248>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7fe ff16 	bl	8000d98 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f70:	f7fe ff12 	bl	8000d98 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e173      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <HAL_RCC_OscConfig+0x240>)
 8001f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x200>
 8001f8e:	e01b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f90:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <HAL_RCC_OscConfig+0x248>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7fe feff 	bl	8000d98 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	e00e      	b.n	8001fbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9e:	f7fe fefb 	bl	8000d98 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d907      	bls.n	8001fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e15c      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	42470000 	.word	0x42470000
 8001fb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	4b8a      	ldr	r3, [pc, #552]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8001fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1ea      	bne.n	8001f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 8097 	beq.w	8002104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fda:	4b83      	ldr	r3, [pc, #524]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10f      	bne.n	8002006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	4b7f      	ldr	r3, [pc, #508]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	4a7e      	ldr	r2, [pc, #504]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	4b79      	ldr	r3, [pc, #484]	@ (80021ec <HAL_RCC_OscConfig+0x47c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002012:	4b76      	ldr	r3, [pc, #472]	@ (80021ec <HAL_RCC_OscConfig+0x47c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a75      	ldr	r2, [pc, #468]	@ (80021ec <HAL_RCC_OscConfig+0x47c>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7fe febb 	bl	8000d98 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7fe feb7 	bl	8000d98 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e118      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b6c      	ldr	r3, [pc, #432]	@ (80021ec <HAL_RCC_OscConfig+0x47c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x2ea>
 800204c:	4b66      	ldr	r3, [pc, #408]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002050:	4a65      	ldr	r2, [pc, #404]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6713      	str	r3, [r2, #112]	@ 0x70
 8002058:	e01c      	b.n	8002094 <HAL_RCC_OscConfig+0x324>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b05      	cmp	r3, #5
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x30c>
 8002062:	4b61      	ldr	r3, [pc, #388]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002066:	4a60      	ldr	r2, [pc, #384]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6713      	str	r3, [r2, #112]	@ 0x70
 800206e:	4b5e      	ldr	r3, [pc, #376]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002072:	4a5d      	ldr	r2, [pc, #372]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6713      	str	r3, [r2, #112]	@ 0x70
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0x324>
 800207c:	4b5a      	ldr	r3, [pc, #360]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002080:	4a59      	ldr	r2, [pc, #356]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	6713      	str	r3, [r2, #112]	@ 0x70
 8002088:	4b57      	ldr	r3, [pc, #348]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208c:	4a56      	ldr	r2, [pc, #344]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 800208e:	f023 0304 	bic.w	r3, r3, #4
 8002092:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d015      	beq.n	80020c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe fe7c 	bl	8000d98 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7fe fe78 	bl	8000d98 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0d7      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ba:	4b4b      	ldr	r3, [pc, #300]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0ee      	beq.n	80020a4 <HAL_RCC_OscConfig+0x334>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe fe66 	bl	8000d98 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7fe fe62 	bl	8000d98 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e0c1      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e6:	4b40      	ldr	r3, [pc, #256]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ee      	bne.n	80020d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d105      	bne.n	8002104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f8:	4b3b      	ldr	r3, [pc, #236]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	4a3a      	ldr	r2, [pc, #232]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 80020fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002102:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80ad 	beq.w	8002268 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800210e:	4b36      	ldr	r3, [pc, #216]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d060      	beq.n	80021dc <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d145      	bne.n	80021ae <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002122:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <HAL_RCC_OscConfig+0x480>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe fe36 	bl	8000d98 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002130:	f7fe fe32 	bl	8000d98 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e093      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	4b29      	ldr	r3, [pc, #164]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	019b      	lsls	r3, r3, #6
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	085b      	lsrs	r3, r3, #1
 8002166:	3b01      	subs	r3, #1
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	061b      	lsls	r3, r3, #24
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002178:	071b      	lsls	r3, r3, #28
 800217a:	491b      	ldr	r1, [pc, #108]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002180:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_RCC_OscConfig+0x480>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe fe07 	bl	8000d98 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe fe03 	bl	8000d98 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e064      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a0:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x41e>
 80021ac:	e05c      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <HAL_RCC_OscConfig+0x480>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fdf0 	bl	8000d98 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe fdec 	bl	8000d98 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e04d      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_RCC_OscConfig+0x478>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x44c>
 80021da:	e045      	b.n	8002268 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e040      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40007000 	.word	0x40007000
 80021f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <HAL_RCC_OscConfig+0x504>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d030      	beq.n	8002264 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d129      	bne.n	8002264 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d122      	bne.n	8002264 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002224:	4013      	ands	r3, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800222a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800222c:	4293      	cmp	r3, r2
 800222e:	d119      	bne.n	8002264 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	3b01      	subs	r3, #1
 800223e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d10f      	bne.n	8002264 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d107      	bne.n	8002264 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e042      	b.n	8002310 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fb6c 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2224      	movs	r2, #36	@ 0x24
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f973 	bl	80025a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b20      	cmp	r3, #32
 8002336:	d175      	bne.n	8002424 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_UART_Transmit+0x2c>
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e06e      	b.n	8002426 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2221      	movs	r2, #33	@ 0x21
 8002352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002356:	f7fe fd1f 	bl	8000d98 <HAL_GetTick>
 800235a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	88fa      	ldrh	r2, [r7, #6]
 8002360:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	88fa      	ldrh	r2, [r7, #6]
 8002366:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002370:	d108      	bne.n	8002384 <HAL_UART_Transmit+0x6c>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d104      	bne.n	8002384 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	e003      	b.n	800238c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800238c:	e02e      	b.n	80023ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	2180      	movs	r1, #128	@ 0x80
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f848 	bl	800242e <UART_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e03a      	b.n	8002426 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10b      	bne.n	80023ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	3302      	adds	r3, #2
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	e007      	b.n	80023de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	3301      	adds	r3, #1
 80023dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1cb      	bne.n	800238e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2140      	movs	r1, #64	@ 0x40
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f814 	bl	800242e <UART_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e006      	b.n	8002426 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	e000      	b.n	8002426 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
  }
}
 8002426:	4618      	mov	r0, r3
 8002428:	3720      	adds	r7, #32
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	4613      	mov	r3, r2
 800243c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243e:	e03b      	b.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002446:	d037      	beq.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002448:	f7fe fca6 	bl	8000d98 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	6a3a      	ldr	r2, [r7, #32]
 8002454:	429a      	cmp	r2, r3
 8002456:	d302      	bcc.n	800245e <UART_WaitOnFlagUntilTimeout+0x30>
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e03a      	b.n	80024d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d023      	beq.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b80      	cmp	r3, #128	@ 0x80
 8002474:	d020      	beq.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b40      	cmp	r3, #64	@ 0x40
 800247a:	d01d      	beq.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b08      	cmp	r3, #8
 8002488:	d116      	bne.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f81d 	bl	80024e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2208      	movs	r2, #8
 80024aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e00f      	b.n	80024d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4013      	ands	r3, r2
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d0b4      	beq.n	8002440 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b095      	sub	sp, #84	@ 0x54
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	330c      	adds	r3, #12
 80024ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f2:	e853 3f00 	ldrex	r3, [r3]
 80024f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002508:	643a      	str	r2, [r7, #64]	@ 0x40
 800250a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800250e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002510:	e841 2300 	strex	r3, r2, [r1]
 8002514:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e5      	bne.n	80024e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3314      	adds	r3, #20
 8002522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	e853 3f00 	ldrex	r3, [r3]
 800252a:	61fb      	str	r3, [r7, #28]
   return(result);
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3314      	adds	r3, #20
 800253a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800253c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002540:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002544:	e841 2300 	strex	r3, r2, [r1]
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e5      	bne.n	800251c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	2b01      	cmp	r3, #1
 8002556:	d119      	bne.n	800258c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	e853 3f00 	ldrex	r3, [r3]
 8002566:	60bb      	str	r3, [r7, #8]
   return(result);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f023 0310 	bic.w	r3, r3, #16
 800256e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	330c      	adds	r3, #12
 8002576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002578:	61ba      	str	r2, [r7, #24]
 800257a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257c:	6979      	ldr	r1, [r7, #20]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	e841 2300 	strex	r3, r2, [r1]
 8002584:	613b      	str	r3, [r7, #16]
   return(result);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e5      	bne.n	8002558 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800259a:	bf00      	nop
 800259c:	3754      	adds	r7, #84	@ 0x54
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ac:	b0c0      	sub	sp, #256	@ 0x100
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	ea40 0301 	orr.w	r3, r0, r1
 80025d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	431a      	orrs	r2, r3
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002600:	f021 010c 	bic.w	r1, r1, #12
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800260e:	430b      	orrs	r3, r1
 8002610:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800261e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002622:	6999      	ldr	r1, [r3, #24]
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	ea40 0301 	orr.w	r3, r0, r1
 800262e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b8f      	ldr	r3, [pc, #572]	@ (8002874 <UART_SetConfig+0x2cc>)
 8002638:	429a      	cmp	r2, r3
 800263a:	d005      	beq.n	8002648 <UART_SetConfig+0xa0>
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b8d      	ldr	r3, [pc, #564]	@ (8002878 <UART_SetConfig+0x2d0>)
 8002644:	429a      	cmp	r2, r3
 8002646:	d104      	bne.n	8002652 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002648:	f7ff f9b0 	bl	80019ac <HAL_RCC_GetPCLK2Freq>
 800264c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002650:	e003      	b.n	800265a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002652:	f7ff f997 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 8002656:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002664:	f040 810c 	bne.w	8002880 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800266c:	2200      	movs	r2, #0
 800266e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002672:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002676:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800267a:	4622      	mov	r2, r4
 800267c:	462b      	mov	r3, r5
 800267e:	1891      	adds	r1, r2, r2
 8002680:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002682:	415b      	adcs	r3, r3
 8002684:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002686:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800268a:	4621      	mov	r1, r4
 800268c:	eb12 0801 	adds.w	r8, r2, r1
 8002690:	4629      	mov	r1, r5
 8002692:	eb43 0901 	adc.w	r9, r3, r1
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026aa:	4690      	mov	r8, r2
 80026ac:	4699      	mov	r9, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	eb18 0303 	adds.w	r3, r8, r3
 80026b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026b8:	462b      	mov	r3, r5
 80026ba:	eb49 0303 	adc.w	r3, r9, r3
 80026be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026d6:	460b      	mov	r3, r1
 80026d8:	18db      	adds	r3, r3, r3
 80026da:	653b      	str	r3, [r7, #80]	@ 0x50
 80026dc:	4613      	mov	r3, r2
 80026de:	eb42 0303 	adc.w	r3, r2, r3
 80026e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80026e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026ec:	f7fd fde0 	bl	80002b0 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4b61      	ldr	r3, [pc, #388]	@ (800287c <UART_SetConfig+0x2d4>)
 80026f6:	fba3 2302 	umull	r2, r3, r3, r2
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	011c      	lsls	r4, r3, #4
 80026fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002702:	2200      	movs	r2, #0
 8002704:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002708:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800270c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002710:	4642      	mov	r2, r8
 8002712:	464b      	mov	r3, r9
 8002714:	1891      	adds	r1, r2, r2
 8002716:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002718:	415b      	adcs	r3, r3
 800271a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800271c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002720:	4641      	mov	r1, r8
 8002722:	eb12 0a01 	adds.w	sl, r2, r1
 8002726:	4649      	mov	r1, r9
 8002728:	eb43 0b01 	adc.w	fp, r3, r1
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002738:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800273c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002740:	4692      	mov	sl, r2
 8002742:	469b      	mov	fp, r3
 8002744:	4643      	mov	r3, r8
 8002746:	eb1a 0303 	adds.w	r3, sl, r3
 800274a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800274e:	464b      	mov	r3, r9
 8002750:	eb4b 0303 	adc.w	r3, fp, r3
 8002754:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002764:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002768:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800276c:	460b      	mov	r3, r1
 800276e:	18db      	adds	r3, r3, r3
 8002770:	643b      	str	r3, [r7, #64]	@ 0x40
 8002772:	4613      	mov	r3, r2
 8002774:	eb42 0303 	adc.w	r3, r2, r3
 8002778:	647b      	str	r3, [r7, #68]	@ 0x44
 800277a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800277e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002782:	f7fd fd95 	bl	80002b0 <__aeabi_uldivmod>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4611      	mov	r1, r2
 800278c:	4b3b      	ldr	r3, [pc, #236]	@ (800287c <UART_SetConfig+0x2d4>)
 800278e:	fba3 2301 	umull	r2, r3, r3, r1
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2264      	movs	r2, #100	@ 0x64
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	1acb      	subs	r3, r1, r3
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027a2:	4b36      	ldr	r3, [pc, #216]	@ (800287c <UART_SetConfig+0x2d4>)
 80027a4:	fba3 2302 	umull	r2, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027b0:	441c      	add	r4, r3
 80027b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027b6:	2200      	movs	r2, #0
 80027b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027c4:	4642      	mov	r2, r8
 80027c6:	464b      	mov	r3, r9
 80027c8:	1891      	adds	r1, r2, r2
 80027ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027cc:	415b      	adcs	r3, r3
 80027ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027d4:	4641      	mov	r1, r8
 80027d6:	1851      	adds	r1, r2, r1
 80027d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80027da:	4649      	mov	r1, r9
 80027dc:	414b      	adcs	r3, r1
 80027de:	637b      	str	r3, [r7, #52]	@ 0x34
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027ec:	4659      	mov	r1, fp
 80027ee:	00cb      	lsls	r3, r1, #3
 80027f0:	4651      	mov	r1, sl
 80027f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027f6:	4651      	mov	r1, sl
 80027f8:	00ca      	lsls	r2, r1, #3
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	4642      	mov	r2, r8
 8002802:	189b      	adds	r3, r3, r2
 8002804:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002808:	464b      	mov	r3, r9
 800280a:	460a      	mov	r2, r1
 800280c:	eb42 0303 	adc.w	r3, r2, r3
 8002810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002820:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002824:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002828:	460b      	mov	r3, r1
 800282a:	18db      	adds	r3, r3, r3
 800282c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800282e:	4613      	mov	r3, r2
 8002830:	eb42 0303 	adc.w	r3, r2, r3
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800283a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800283e:	f7fd fd37 	bl	80002b0 <__aeabi_uldivmod>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <UART_SetConfig+0x2d4>)
 8002848:	fba3 1302 	umull	r1, r3, r3, r2
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	2164      	movs	r1, #100	@ 0x64
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	3332      	adds	r3, #50	@ 0x32
 800285a:	4a08      	ldr	r2, [pc, #32]	@ (800287c <UART_SetConfig+0x2d4>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	f003 0207 	and.w	r2, r3, #7
 8002866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4422      	add	r2, r4
 800286e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002870:	e106      	b.n	8002a80 <UART_SetConfig+0x4d8>
 8002872:	bf00      	nop
 8002874:	40011000 	.word	0x40011000
 8002878:	40011400 	.word	0x40011400
 800287c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002884:	2200      	movs	r2, #0
 8002886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800288a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800288e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002892:	4642      	mov	r2, r8
 8002894:	464b      	mov	r3, r9
 8002896:	1891      	adds	r1, r2, r2
 8002898:	6239      	str	r1, [r7, #32]
 800289a:	415b      	adcs	r3, r3
 800289c:	627b      	str	r3, [r7, #36]	@ 0x24
 800289e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028a2:	4641      	mov	r1, r8
 80028a4:	1854      	adds	r4, r2, r1
 80028a6:	4649      	mov	r1, r9
 80028a8:	eb43 0501 	adc.w	r5, r3, r1
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	00eb      	lsls	r3, r5, #3
 80028b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ba:	00e2      	lsls	r2, r4, #3
 80028bc:	4614      	mov	r4, r2
 80028be:	461d      	mov	r5, r3
 80028c0:	4643      	mov	r3, r8
 80028c2:	18e3      	adds	r3, r4, r3
 80028c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028c8:	464b      	mov	r3, r9
 80028ca:	eb45 0303 	adc.w	r3, r5, r3
 80028ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028ee:	4629      	mov	r1, r5
 80028f0:	008b      	lsls	r3, r1, #2
 80028f2:	4621      	mov	r1, r4
 80028f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028f8:	4621      	mov	r1, r4
 80028fa:	008a      	lsls	r2, r1, #2
 80028fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002900:	f7fd fcd6 	bl	80002b0 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4b60      	ldr	r3, [pc, #384]	@ (8002a8c <UART_SetConfig+0x4e4>)
 800290a:	fba3 2302 	umull	r2, r3, r3, r2
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	011c      	lsls	r4, r3, #4
 8002912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002916:	2200      	movs	r2, #0
 8002918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800291c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002920:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002924:	4642      	mov	r2, r8
 8002926:	464b      	mov	r3, r9
 8002928:	1891      	adds	r1, r2, r2
 800292a:	61b9      	str	r1, [r7, #24]
 800292c:	415b      	adcs	r3, r3
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002934:	4641      	mov	r1, r8
 8002936:	1851      	adds	r1, r2, r1
 8002938:	6139      	str	r1, [r7, #16]
 800293a:	4649      	mov	r1, r9
 800293c:	414b      	adcs	r3, r1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800294c:	4659      	mov	r1, fp
 800294e:	00cb      	lsls	r3, r1, #3
 8002950:	4651      	mov	r1, sl
 8002952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002956:	4651      	mov	r1, sl
 8002958:	00ca      	lsls	r2, r1, #3
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	4603      	mov	r3, r0
 8002960:	4642      	mov	r2, r8
 8002962:	189b      	adds	r3, r3, r2
 8002964:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002968:	464b      	mov	r3, r9
 800296a:	460a      	mov	r2, r1
 800296c:	eb42 0303 	adc.w	r3, r2, r3
 8002970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800297e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800298c:	4649      	mov	r1, r9
 800298e:	008b      	lsls	r3, r1, #2
 8002990:	4641      	mov	r1, r8
 8002992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002996:	4641      	mov	r1, r8
 8002998:	008a      	lsls	r2, r1, #2
 800299a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800299e:	f7fd fc87 	bl	80002b0 <__aeabi_uldivmod>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	4b38      	ldr	r3, [pc, #224]	@ (8002a8c <UART_SetConfig+0x4e4>)
 80029aa:	fba3 2301 	umull	r2, r3, r3, r1
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2264      	movs	r2, #100	@ 0x64
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	1acb      	subs	r3, r1, r3
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	3332      	adds	r3, #50	@ 0x32
 80029bc:	4a33      	ldr	r2, [pc, #204]	@ (8002a8c <UART_SetConfig+0x4e4>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029c8:	441c      	add	r4, r3
 80029ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ce:	2200      	movs	r2, #0
 80029d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80029d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80029d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	1891      	adds	r1, r2, r2
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	415b      	adcs	r3, r3
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029e8:	4641      	mov	r1, r8
 80029ea:	1851      	adds	r1, r2, r1
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	4649      	mov	r1, r9
 80029f0:	414b      	adcs	r3, r1
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a00:	4659      	mov	r1, fp
 8002a02:	00cb      	lsls	r3, r1, #3
 8002a04:	4651      	mov	r1, sl
 8002a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	00ca      	lsls	r2, r1, #3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	4642      	mov	r2, r8
 8002a16:	189b      	adds	r3, r3, r2
 8002a18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	eb42 0303 	adc.w	r3, r2, r3
 8002a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a3c:	4649      	mov	r1, r9
 8002a3e:	008b      	lsls	r3, r1, #2
 8002a40:	4641      	mov	r1, r8
 8002a42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a46:	4641      	mov	r1, r8
 8002a48:	008a      	lsls	r2, r1, #2
 8002a4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a4e:	f7fd fc2f 	bl	80002b0 <__aeabi_uldivmod>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <UART_SetConfig+0x4e4>)
 8002a58:	fba3 1302 	umull	r1, r3, r3, r2
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	2164      	movs	r1, #100	@ 0x64
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	3332      	adds	r3, #50	@ 0x32
 8002a6a:	4a08      	ldr	r2, [pc, #32]	@ (8002a8c <UART_SetConfig+0x4e4>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	f003 020f 	and.w	r2, r3, #15
 8002a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4422      	add	r2, r4
 8002a7e:	609a      	str	r2, [r3, #8]
}
 8002a80:	bf00      	nop
 8002a82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a86:	46bd      	mov	sp, r7
 8002a88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a8c:	51eb851f 	.word	0x51eb851f

08002a90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a90:	b084      	sub	sp, #16
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	f107 001c 	add.w	r0, r7, #28
 8002a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002aa2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d123      	bne.n	8002af2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002abe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ad2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d105      	bne.n	8002ae6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa9a 	bl	8003020 <USB_CoreReset>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	e01b      	b.n	8002b2a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa8e 	bl	8003020 <USB_CoreReset>
 8002b04:	4603      	mov	r3, r0
 8002b06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b08:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b1c:	e005      	b.n	8002b2a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b2a:	7fbb      	ldrb	r3, [r7, #30]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d10b      	bne.n	8002b48 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f043 0206 	orr.w	r2, r3, #6
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b54:	b004      	add	sp, #16
 8002b56:	4770      	bx	lr

08002b58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 0201 	bic.w	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d115      	bne.n	8002bc8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002ba8:	200a      	movs	r0, #10
 8002baa:	f7fe f901 	bl	8000db0 <HAL_Delay>
      ms += 10U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	330a      	adds	r3, #10
 8002bb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fa25 	bl	8003004 <USB_GetMode>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d01e      	beq.n	8002bfe <USB_SetCurrentMode+0x84>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bc4:	d9f0      	bls.n	8002ba8 <USB_SetCurrentMode+0x2e>
 8002bc6:	e01a      	b.n	8002bfe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d115      	bne.n	8002bfa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002bda:	200a      	movs	r0, #10
 8002bdc:	f7fe f8e8 	bl	8000db0 <HAL_Delay>
      ms += 10U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	330a      	adds	r3, #10
 8002be4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fa0c 	bl	8003004 <USB_GetMode>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <USB_SetCurrentMode+0x84>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bf6:	d9f0      	bls.n	8002bda <USB_SetCurrentMode+0x60>
 8002bf8:	e001      	b.n	8002bfe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e005      	b.n	8002c0a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2bc8      	cmp	r3, #200	@ 0xc8
 8002c02:	d101      	bne.n	8002c08 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c14:	b084      	sub	sp, #16
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	e009      	b.n	8002c48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	3340      	adds	r3, #64	@ 0x40
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	2200      	movs	r2, #0
 8002c40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	3301      	adds	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0e      	cmp	r3, #14
 8002c4c:	d9f2      	bls.n	8002c34 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d11c      	bne.n	8002c90 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e005      	b.n	8002c9c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ca8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d10d      	bne.n	8002ccc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002cb8:	2100      	movs	r1, #0
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f968 	bl	8002f90 <USB_SetDevSpeed>
 8002cc0:	e008      	b.n	8002cd4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f963 	bl	8002f90 <USB_SetDevSpeed>
 8002cca:	e003      	b.n	8002cd4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ccc:	2103      	movs	r1, #3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f95e 	bl	8002f90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002cd4:	2110      	movs	r1, #16
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8fa 	bl	8002ed0 <USB_FlushTxFifo>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f924 	bl	8002f34 <USB_FlushRxFifo>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2300      	movs	r3, #0
 8002d00:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d14:	461a      	mov	r2, r3
 8002d16:	2300      	movs	r3, #0
 8002d18:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e043      	b.n	8002da8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d36:	d118      	bne.n	8002d6a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e013      	b.n	8002d7c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d60:	461a      	mov	r2, r3
 8002d62:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	e008      	b.n	8002d7c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d76:	461a      	mov	r2, r3
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002da0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	3301      	adds	r3, #1
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002dac:	461a      	mov	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d3b5      	bcc.n	8002d20 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	e043      	b.n	8002e42 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dd0:	d118      	bne.n	8002e04 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002de4:	461a      	mov	r2, r3
 8002de6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	e013      	b.n	8002e16 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e008      	b.n	8002e16 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e10:	461a      	mov	r2, r3
 8002e12:	2300      	movs	r3, #0
 8002e14:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e22:	461a      	mov	r2, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e34:	461a      	mov	r2, r3
 8002e36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e46:	461a      	mov	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d3b5      	bcc.n	8002dba <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e60:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002e6e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f043 0210 	orr.w	r2, r3, #16
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <USB_DevInit+0x2b8>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002e90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f043 0208 	orr.w	r2, r3, #8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ea4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d107      	bne.n	8002ebc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ec8:	b004      	add	sp, #16
 8002eca:	4770      	bx	lr
 8002ecc:	803c3800 	.word	0x803c3800

08002ed0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002eea:	d901      	bls.n	8002ef0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e01b      	b.n	8002f28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	daf2      	bge.n	8002ede <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	019b      	lsls	r3, r3, #6
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f14:	d901      	bls.n	8002f1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e006      	b.n	8002f28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d0f0      	beq.n	8002f08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3301      	adds	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f4c:	d901      	bls.n	8002f52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e018      	b.n	8002f84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	daf2      	bge.n	8002f40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2210      	movs	r2, #16
 8002f62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3301      	adds	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f70:	d901      	bls.n	8002f76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e006      	b.n	8002f84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d0f0      	beq.n	8002f64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	68f9      	ldr	r1, [r7, #12]
 8002fac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8002fdc:	f023 0303 	bic.w	r3, r3, #3
 8002fe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f003 0301 	and.w	r3, r3, #1
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3301      	adds	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003038:	d901      	bls.n	800303e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e01b      	b.n	8003076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	daf2      	bge.n	800302c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3301      	adds	r3, #1
 800305a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003062:	d901      	bls.n	8003068 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e006      	b.n	8003076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d0f0      	beq.n	8003056 <USB_CoreReset+0x36>

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <std>:
 8003084:	2300      	movs	r3, #0
 8003086:	b510      	push	{r4, lr}
 8003088:	4604      	mov	r4, r0
 800308a:	e9c0 3300 	strd	r3, r3, [r0]
 800308e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003092:	6083      	str	r3, [r0, #8]
 8003094:	8181      	strh	r1, [r0, #12]
 8003096:	6643      	str	r3, [r0, #100]	@ 0x64
 8003098:	81c2      	strh	r2, [r0, #14]
 800309a:	6183      	str	r3, [r0, #24]
 800309c:	4619      	mov	r1, r3
 800309e:	2208      	movs	r2, #8
 80030a0:	305c      	adds	r0, #92	@ 0x5c
 80030a2:	f000 f9f9 	bl	8003498 <memset>
 80030a6:	4b0d      	ldr	r3, [pc, #52]	@ (80030dc <std+0x58>)
 80030a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80030aa:	4b0d      	ldr	r3, [pc, #52]	@ (80030e0 <std+0x5c>)
 80030ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030ae:	4b0d      	ldr	r3, [pc, #52]	@ (80030e4 <std+0x60>)
 80030b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030b2:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <std+0x64>)
 80030b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <std+0x68>)
 80030b8:	6224      	str	r4, [r4, #32]
 80030ba:	429c      	cmp	r4, r3
 80030bc:	d006      	beq.n	80030cc <std+0x48>
 80030be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80030c2:	4294      	cmp	r4, r2
 80030c4:	d002      	beq.n	80030cc <std+0x48>
 80030c6:	33d0      	adds	r3, #208	@ 0xd0
 80030c8:	429c      	cmp	r4, r3
 80030ca:	d105      	bne.n	80030d8 <std+0x54>
 80030cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80030d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d4:	f000 ba58 	b.w	8003588 <__retarget_lock_init_recursive>
 80030d8:	bd10      	pop	{r4, pc}
 80030da:	bf00      	nop
 80030dc:	080032e9 	.word	0x080032e9
 80030e0:	0800330b 	.word	0x0800330b
 80030e4:	08003343 	.word	0x08003343
 80030e8:	08003367 	.word	0x08003367
 80030ec:	200005b8 	.word	0x200005b8

080030f0 <stdio_exit_handler>:
 80030f0:	4a02      	ldr	r2, [pc, #8]	@ (80030fc <stdio_exit_handler+0xc>)
 80030f2:	4903      	ldr	r1, [pc, #12]	@ (8003100 <stdio_exit_handler+0x10>)
 80030f4:	4803      	ldr	r0, [pc, #12]	@ (8003104 <stdio_exit_handler+0x14>)
 80030f6:	f000 b869 	b.w	80031cc <_fwalk_sglue>
 80030fa:	bf00      	nop
 80030fc:	2000000c 	.word	0x2000000c
 8003100:	08003e29 	.word	0x08003e29
 8003104:	2000001c 	.word	0x2000001c

08003108 <cleanup_stdio>:
 8003108:	6841      	ldr	r1, [r0, #4]
 800310a:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <cleanup_stdio+0x34>)
 800310c:	4299      	cmp	r1, r3
 800310e:	b510      	push	{r4, lr}
 8003110:	4604      	mov	r4, r0
 8003112:	d001      	beq.n	8003118 <cleanup_stdio+0x10>
 8003114:	f000 fe88 	bl	8003e28 <_fflush_r>
 8003118:	68a1      	ldr	r1, [r4, #8]
 800311a:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <cleanup_stdio+0x38>)
 800311c:	4299      	cmp	r1, r3
 800311e:	d002      	beq.n	8003126 <cleanup_stdio+0x1e>
 8003120:	4620      	mov	r0, r4
 8003122:	f000 fe81 	bl	8003e28 <_fflush_r>
 8003126:	68e1      	ldr	r1, [r4, #12]
 8003128:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <cleanup_stdio+0x3c>)
 800312a:	4299      	cmp	r1, r3
 800312c:	d004      	beq.n	8003138 <cleanup_stdio+0x30>
 800312e:	4620      	mov	r0, r4
 8003130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003134:	f000 be78 	b.w	8003e28 <_fflush_r>
 8003138:	bd10      	pop	{r4, pc}
 800313a:	bf00      	nop
 800313c:	200005b8 	.word	0x200005b8
 8003140:	20000620 	.word	0x20000620
 8003144:	20000688 	.word	0x20000688

08003148 <global_stdio_init.part.0>:
 8003148:	b510      	push	{r4, lr}
 800314a:	4b0b      	ldr	r3, [pc, #44]	@ (8003178 <global_stdio_init.part.0+0x30>)
 800314c:	4c0b      	ldr	r4, [pc, #44]	@ (800317c <global_stdio_init.part.0+0x34>)
 800314e:	4a0c      	ldr	r2, [pc, #48]	@ (8003180 <global_stdio_init.part.0+0x38>)
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	4620      	mov	r0, r4
 8003154:	2200      	movs	r2, #0
 8003156:	2104      	movs	r1, #4
 8003158:	f7ff ff94 	bl	8003084 <std>
 800315c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003160:	2201      	movs	r2, #1
 8003162:	2109      	movs	r1, #9
 8003164:	f7ff ff8e 	bl	8003084 <std>
 8003168:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800316c:	2202      	movs	r2, #2
 800316e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003172:	2112      	movs	r1, #18
 8003174:	f7ff bf86 	b.w	8003084 <std>
 8003178:	200006f0 	.word	0x200006f0
 800317c:	200005b8 	.word	0x200005b8
 8003180:	080030f1 	.word	0x080030f1

08003184 <__sfp_lock_acquire>:
 8003184:	4801      	ldr	r0, [pc, #4]	@ (800318c <__sfp_lock_acquire+0x8>)
 8003186:	f000 ba00 	b.w	800358a <__retarget_lock_acquire_recursive>
 800318a:	bf00      	nop
 800318c:	200006f9 	.word	0x200006f9

08003190 <__sfp_lock_release>:
 8003190:	4801      	ldr	r0, [pc, #4]	@ (8003198 <__sfp_lock_release+0x8>)
 8003192:	f000 b9fb 	b.w	800358c <__retarget_lock_release_recursive>
 8003196:	bf00      	nop
 8003198:	200006f9 	.word	0x200006f9

0800319c <__sinit>:
 800319c:	b510      	push	{r4, lr}
 800319e:	4604      	mov	r4, r0
 80031a0:	f7ff fff0 	bl	8003184 <__sfp_lock_acquire>
 80031a4:	6a23      	ldr	r3, [r4, #32]
 80031a6:	b11b      	cbz	r3, 80031b0 <__sinit+0x14>
 80031a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031ac:	f7ff bff0 	b.w	8003190 <__sfp_lock_release>
 80031b0:	4b04      	ldr	r3, [pc, #16]	@ (80031c4 <__sinit+0x28>)
 80031b2:	6223      	str	r3, [r4, #32]
 80031b4:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <__sinit+0x2c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f5      	bne.n	80031a8 <__sinit+0xc>
 80031bc:	f7ff ffc4 	bl	8003148 <global_stdio_init.part.0>
 80031c0:	e7f2      	b.n	80031a8 <__sinit+0xc>
 80031c2:	bf00      	nop
 80031c4:	08003109 	.word	0x08003109
 80031c8:	200006f0 	.word	0x200006f0

080031cc <_fwalk_sglue>:
 80031cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031d0:	4607      	mov	r7, r0
 80031d2:	4688      	mov	r8, r1
 80031d4:	4614      	mov	r4, r2
 80031d6:	2600      	movs	r6, #0
 80031d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031dc:	f1b9 0901 	subs.w	r9, r9, #1
 80031e0:	d505      	bpl.n	80031ee <_fwalk_sglue+0x22>
 80031e2:	6824      	ldr	r4, [r4, #0]
 80031e4:	2c00      	cmp	r4, #0
 80031e6:	d1f7      	bne.n	80031d8 <_fwalk_sglue+0xc>
 80031e8:	4630      	mov	r0, r6
 80031ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031ee:	89ab      	ldrh	r3, [r5, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d907      	bls.n	8003204 <_fwalk_sglue+0x38>
 80031f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031f8:	3301      	adds	r3, #1
 80031fa:	d003      	beq.n	8003204 <_fwalk_sglue+0x38>
 80031fc:	4629      	mov	r1, r5
 80031fe:	4638      	mov	r0, r7
 8003200:	47c0      	blx	r8
 8003202:	4306      	orrs	r6, r0
 8003204:	3568      	adds	r5, #104	@ 0x68
 8003206:	e7e9      	b.n	80031dc <_fwalk_sglue+0x10>

08003208 <iprintf>:
 8003208:	b40f      	push	{r0, r1, r2, r3}
 800320a:	b507      	push	{r0, r1, r2, lr}
 800320c:	4906      	ldr	r1, [pc, #24]	@ (8003228 <iprintf+0x20>)
 800320e:	ab04      	add	r3, sp, #16
 8003210:	6808      	ldr	r0, [r1, #0]
 8003212:	f853 2b04 	ldr.w	r2, [r3], #4
 8003216:	6881      	ldr	r1, [r0, #8]
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	f000 fadb 	bl	80037d4 <_vfiprintf_r>
 800321e:	b003      	add	sp, #12
 8003220:	f85d eb04 	ldr.w	lr, [sp], #4
 8003224:	b004      	add	sp, #16
 8003226:	4770      	bx	lr
 8003228:	20000018 	.word	0x20000018

0800322c <_puts_r>:
 800322c:	6a03      	ldr	r3, [r0, #32]
 800322e:	b570      	push	{r4, r5, r6, lr}
 8003230:	6884      	ldr	r4, [r0, #8]
 8003232:	4605      	mov	r5, r0
 8003234:	460e      	mov	r6, r1
 8003236:	b90b      	cbnz	r3, 800323c <_puts_r+0x10>
 8003238:	f7ff ffb0 	bl	800319c <__sinit>
 800323c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800323e:	07db      	lsls	r3, r3, #31
 8003240:	d405      	bmi.n	800324e <_puts_r+0x22>
 8003242:	89a3      	ldrh	r3, [r4, #12]
 8003244:	0598      	lsls	r0, r3, #22
 8003246:	d402      	bmi.n	800324e <_puts_r+0x22>
 8003248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800324a:	f000 f99e 	bl	800358a <__retarget_lock_acquire_recursive>
 800324e:	89a3      	ldrh	r3, [r4, #12]
 8003250:	0719      	lsls	r1, r3, #28
 8003252:	d502      	bpl.n	800325a <_puts_r+0x2e>
 8003254:	6923      	ldr	r3, [r4, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d135      	bne.n	80032c6 <_puts_r+0x9a>
 800325a:	4621      	mov	r1, r4
 800325c:	4628      	mov	r0, r5
 800325e:	f000 f8c5 	bl	80033ec <__swsetup_r>
 8003262:	b380      	cbz	r0, 80032c6 <_puts_r+0x9a>
 8003264:	f04f 35ff 	mov.w	r5, #4294967295
 8003268:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800326a:	07da      	lsls	r2, r3, #31
 800326c:	d405      	bmi.n	800327a <_puts_r+0x4e>
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	059b      	lsls	r3, r3, #22
 8003272:	d402      	bmi.n	800327a <_puts_r+0x4e>
 8003274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003276:	f000 f989 	bl	800358c <__retarget_lock_release_recursive>
 800327a:	4628      	mov	r0, r5
 800327c:	bd70      	pop	{r4, r5, r6, pc}
 800327e:	2b00      	cmp	r3, #0
 8003280:	da04      	bge.n	800328c <_puts_r+0x60>
 8003282:	69a2      	ldr	r2, [r4, #24]
 8003284:	429a      	cmp	r2, r3
 8003286:	dc17      	bgt.n	80032b8 <_puts_r+0x8c>
 8003288:	290a      	cmp	r1, #10
 800328a:	d015      	beq.n	80032b8 <_puts_r+0x8c>
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	6022      	str	r2, [r4, #0]
 8003292:	7019      	strb	r1, [r3, #0]
 8003294:	68a3      	ldr	r3, [r4, #8]
 8003296:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800329a:	3b01      	subs	r3, #1
 800329c:	60a3      	str	r3, [r4, #8]
 800329e:	2900      	cmp	r1, #0
 80032a0:	d1ed      	bne.n	800327e <_puts_r+0x52>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	da11      	bge.n	80032ca <_puts_r+0x9e>
 80032a6:	4622      	mov	r2, r4
 80032a8:	210a      	movs	r1, #10
 80032aa:	4628      	mov	r0, r5
 80032ac:	f000 f85f 	bl	800336e <__swbuf_r>
 80032b0:	3001      	adds	r0, #1
 80032b2:	d0d7      	beq.n	8003264 <_puts_r+0x38>
 80032b4:	250a      	movs	r5, #10
 80032b6:	e7d7      	b.n	8003268 <_puts_r+0x3c>
 80032b8:	4622      	mov	r2, r4
 80032ba:	4628      	mov	r0, r5
 80032bc:	f000 f857 	bl	800336e <__swbuf_r>
 80032c0:	3001      	adds	r0, #1
 80032c2:	d1e7      	bne.n	8003294 <_puts_r+0x68>
 80032c4:	e7ce      	b.n	8003264 <_puts_r+0x38>
 80032c6:	3e01      	subs	r6, #1
 80032c8:	e7e4      	b.n	8003294 <_puts_r+0x68>
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	6022      	str	r2, [r4, #0]
 80032d0:	220a      	movs	r2, #10
 80032d2:	701a      	strb	r2, [r3, #0]
 80032d4:	e7ee      	b.n	80032b4 <_puts_r+0x88>
	...

080032d8 <puts>:
 80032d8:	4b02      	ldr	r3, [pc, #8]	@ (80032e4 <puts+0xc>)
 80032da:	4601      	mov	r1, r0
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	f7ff bfa5 	b.w	800322c <_puts_r>
 80032e2:	bf00      	nop
 80032e4:	20000018 	.word	0x20000018

080032e8 <__sread>:
 80032e8:	b510      	push	{r4, lr}
 80032ea:	460c      	mov	r4, r1
 80032ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f0:	f000 f8fc 	bl	80034ec <_read_r>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	bfab      	itete	ge
 80032f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80032fa:	89a3      	ldrhlt	r3, [r4, #12]
 80032fc:	181b      	addge	r3, r3, r0
 80032fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003302:	bfac      	ite	ge
 8003304:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003306:	81a3      	strhlt	r3, [r4, #12]
 8003308:	bd10      	pop	{r4, pc}

0800330a <__swrite>:
 800330a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800330e:	461f      	mov	r7, r3
 8003310:	898b      	ldrh	r3, [r1, #12]
 8003312:	05db      	lsls	r3, r3, #23
 8003314:	4605      	mov	r5, r0
 8003316:	460c      	mov	r4, r1
 8003318:	4616      	mov	r6, r2
 800331a:	d505      	bpl.n	8003328 <__swrite+0x1e>
 800331c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003320:	2302      	movs	r3, #2
 8003322:	2200      	movs	r2, #0
 8003324:	f000 f8d0 	bl	80034c8 <_lseek_r>
 8003328:	89a3      	ldrh	r3, [r4, #12]
 800332a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800332e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003332:	81a3      	strh	r3, [r4, #12]
 8003334:	4632      	mov	r2, r6
 8003336:	463b      	mov	r3, r7
 8003338:	4628      	mov	r0, r5
 800333a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800333e:	f000 b8e7 	b.w	8003510 <_write_r>

08003342 <__sseek>:
 8003342:	b510      	push	{r4, lr}
 8003344:	460c      	mov	r4, r1
 8003346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800334a:	f000 f8bd 	bl	80034c8 <_lseek_r>
 800334e:	1c43      	adds	r3, r0, #1
 8003350:	89a3      	ldrh	r3, [r4, #12]
 8003352:	bf15      	itete	ne
 8003354:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003356:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800335a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800335e:	81a3      	strheq	r3, [r4, #12]
 8003360:	bf18      	it	ne
 8003362:	81a3      	strhne	r3, [r4, #12]
 8003364:	bd10      	pop	{r4, pc}

08003366 <__sclose>:
 8003366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800336a:	f000 b89d 	b.w	80034a8 <_close_r>

0800336e <__swbuf_r>:
 800336e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003370:	460e      	mov	r6, r1
 8003372:	4614      	mov	r4, r2
 8003374:	4605      	mov	r5, r0
 8003376:	b118      	cbz	r0, 8003380 <__swbuf_r+0x12>
 8003378:	6a03      	ldr	r3, [r0, #32]
 800337a:	b90b      	cbnz	r3, 8003380 <__swbuf_r+0x12>
 800337c:	f7ff ff0e 	bl	800319c <__sinit>
 8003380:	69a3      	ldr	r3, [r4, #24]
 8003382:	60a3      	str	r3, [r4, #8]
 8003384:	89a3      	ldrh	r3, [r4, #12]
 8003386:	071a      	lsls	r2, r3, #28
 8003388:	d501      	bpl.n	800338e <__swbuf_r+0x20>
 800338a:	6923      	ldr	r3, [r4, #16]
 800338c:	b943      	cbnz	r3, 80033a0 <__swbuf_r+0x32>
 800338e:	4621      	mov	r1, r4
 8003390:	4628      	mov	r0, r5
 8003392:	f000 f82b 	bl	80033ec <__swsetup_r>
 8003396:	b118      	cbz	r0, 80033a0 <__swbuf_r+0x32>
 8003398:	f04f 37ff 	mov.w	r7, #4294967295
 800339c:	4638      	mov	r0, r7
 800339e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	6922      	ldr	r2, [r4, #16]
 80033a4:	1a98      	subs	r0, r3, r2
 80033a6:	6963      	ldr	r3, [r4, #20]
 80033a8:	b2f6      	uxtb	r6, r6
 80033aa:	4283      	cmp	r3, r0
 80033ac:	4637      	mov	r7, r6
 80033ae:	dc05      	bgt.n	80033bc <__swbuf_r+0x4e>
 80033b0:	4621      	mov	r1, r4
 80033b2:	4628      	mov	r0, r5
 80033b4:	f000 fd38 	bl	8003e28 <_fflush_r>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d1ed      	bne.n	8003398 <__swbuf_r+0x2a>
 80033bc:	68a3      	ldr	r3, [r4, #8]
 80033be:	3b01      	subs	r3, #1
 80033c0:	60a3      	str	r3, [r4, #8]
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	6022      	str	r2, [r4, #0]
 80033c8:	701e      	strb	r6, [r3, #0]
 80033ca:	6962      	ldr	r2, [r4, #20]
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d004      	beq.n	80033dc <__swbuf_r+0x6e>
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	07db      	lsls	r3, r3, #31
 80033d6:	d5e1      	bpl.n	800339c <__swbuf_r+0x2e>
 80033d8:	2e0a      	cmp	r6, #10
 80033da:	d1df      	bne.n	800339c <__swbuf_r+0x2e>
 80033dc:	4621      	mov	r1, r4
 80033de:	4628      	mov	r0, r5
 80033e0:	f000 fd22 	bl	8003e28 <_fflush_r>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d0d9      	beq.n	800339c <__swbuf_r+0x2e>
 80033e8:	e7d6      	b.n	8003398 <__swbuf_r+0x2a>
	...

080033ec <__swsetup_r>:
 80033ec:	b538      	push	{r3, r4, r5, lr}
 80033ee:	4b29      	ldr	r3, [pc, #164]	@ (8003494 <__swsetup_r+0xa8>)
 80033f0:	4605      	mov	r5, r0
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	460c      	mov	r4, r1
 80033f6:	b118      	cbz	r0, 8003400 <__swsetup_r+0x14>
 80033f8:	6a03      	ldr	r3, [r0, #32]
 80033fa:	b90b      	cbnz	r3, 8003400 <__swsetup_r+0x14>
 80033fc:	f7ff fece 	bl	800319c <__sinit>
 8003400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003404:	0719      	lsls	r1, r3, #28
 8003406:	d422      	bmi.n	800344e <__swsetup_r+0x62>
 8003408:	06da      	lsls	r2, r3, #27
 800340a:	d407      	bmi.n	800341c <__swsetup_r+0x30>
 800340c:	2209      	movs	r2, #9
 800340e:	602a      	str	r2, [r5, #0]
 8003410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003414:	81a3      	strh	r3, [r4, #12]
 8003416:	f04f 30ff 	mov.w	r0, #4294967295
 800341a:	e033      	b.n	8003484 <__swsetup_r+0x98>
 800341c:	0758      	lsls	r0, r3, #29
 800341e:	d512      	bpl.n	8003446 <__swsetup_r+0x5a>
 8003420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003422:	b141      	cbz	r1, 8003436 <__swsetup_r+0x4a>
 8003424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003428:	4299      	cmp	r1, r3
 800342a:	d002      	beq.n	8003432 <__swsetup_r+0x46>
 800342c:	4628      	mov	r0, r5
 800342e:	f000 f8af 	bl	8003590 <_free_r>
 8003432:	2300      	movs	r3, #0
 8003434:	6363      	str	r3, [r4, #52]	@ 0x34
 8003436:	89a3      	ldrh	r3, [r4, #12]
 8003438:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800343c:	81a3      	strh	r3, [r4, #12]
 800343e:	2300      	movs	r3, #0
 8003440:	6063      	str	r3, [r4, #4]
 8003442:	6923      	ldr	r3, [r4, #16]
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	89a3      	ldrh	r3, [r4, #12]
 8003448:	f043 0308 	orr.w	r3, r3, #8
 800344c:	81a3      	strh	r3, [r4, #12]
 800344e:	6923      	ldr	r3, [r4, #16]
 8003450:	b94b      	cbnz	r3, 8003466 <__swsetup_r+0x7a>
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800345c:	d003      	beq.n	8003466 <__swsetup_r+0x7a>
 800345e:	4621      	mov	r1, r4
 8003460:	4628      	mov	r0, r5
 8003462:	f000 fd2f 	bl	8003ec4 <__smakebuf_r>
 8003466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800346a:	f013 0201 	ands.w	r2, r3, #1
 800346e:	d00a      	beq.n	8003486 <__swsetup_r+0x9a>
 8003470:	2200      	movs	r2, #0
 8003472:	60a2      	str	r2, [r4, #8]
 8003474:	6962      	ldr	r2, [r4, #20]
 8003476:	4252      	negs	r2, r2
 8003478:	61a2      	str	r2, [r4, #24]
 800347a:	6922      	ldr	r2, [r4, #16]
 800347c:	b942      	cbnz	r2, 8003490 <__swsetup_r+0xa4>
 800347e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003482:	d1c5      	bne.n	8003410 <__swsetup_r+0x24>
 8003484:	bd38      	pop	{r3, r4, r5, pc}
 8003486:	0799      	lsls	r1, r3, #30
 8003488:	bf58      	it	pl
 800348a:	6962      	ldrpl	r2, [r4, #20]
 800348c:	60a2      	str	r2, [r4, #8]
 800348e:	e7f4      	b.n	800347a <__swsetup_r+0x8e>
 8003490:	2000      	movs	r0, #0
 8003492:	e7f7      	b.n	8003484 <__swsetup_r+0x98>
 8003494:	20000018 	.word	0x20000018

08003498 <memset>:
 8003498:	4402      	add	r2, r0
 800349a:	4603      	mov	r3, r0
 800349c:	4293      	cmp	r3, r2
 800349e:	d100      	bne.n	80034a2 <memset+0xa>
 80034a0:	4770      	bx	lr
 80034a2:	f803 1b01 	strb.w	r1, [r3], #1
 80034a6:	e7f9      	b.n	800349c <memset+0x4>

080034a8 <_close_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	4d06      	ldr	r5, [pc, #24]	@ (80034c4 <_close_r+0x1c>)
 80034ac:	2300      	movs	r3, #0
 80034ae:	4604      	mov	r4, r0
 80034b0:	4608      	mov	r0, r1
 80034b2:	602b      	str	r3, [r5, #0]
 80034b4:	f7fd fb64 	bl	8000b80 <_close>
 80034b8:	1c43      	adds	r3, r0, #1
 80034ba:	d102      	bne.n	80034c2 <_close_r+0x1a>
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	b103      	cbz	r3, 80034c2 <_close_r+0x1a>
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
 80034c4:	200006f4 	.word	0x200006f4

080034c8 <_lseek_r>:
 80034c8:	b538      	push	{r3, r4, r5, lr}
 80034ca:	4d07      	ldr	r5, [pc, #28]	@ (80034e8 <_lseek_r+0x20>)
 80034cc:	4604      	mov	r4, r0
 80034ce:	4608      	mov	r0, r1
 80034d0:	4611      	mov	r1, r2
 80034d2:	2200      	movs	r2, #0
 80034d4:	602a      	str	r2, [r5, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f7fd fb79 	bl	8000bce <_lseek>
 80034dc:	1c43      	adds	r3, r0, #1
 80034de:	d102      	bne.n	80034e6 <_lseek_r+0x1e>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	b103      	cbz	r3, 80034e6 <_lseek_r+0x1e>
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
 80034e8:	200006f4 	.word	0x200006f4

080034ec <_read_r>:
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	4d07      	ldr	r5, [pc, #28]	@ (800350c <_read_r+0x20>)
 80034f0:	4604      	mov	r4, r0
 80034f2:	4608      	mov	r0, r1
 80034f4:	4611      	mov	r1, r2
 80034f6:	2200      	movs	r2, #0
 80034f8:	602a      	str	r2, [r5, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f7fd fb23 	bl	8000b46 <_read>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d102      	bne.n	800350a <_read_r+0x1e>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	b103      	cbz	r3, 800350a <_read_r+0x1e>
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	200006f4 	.word	0x200006f4

08003510 <_write_r>:
 8003510:	b538      	push	{r3, r4, r5, lr}
 8003512:	4d07      	ldr	r5, [pc, #28]	@ (8003530 <_write_r+0x20>)
 8003514:	4604      	mov	r4, r0
 8003516:	4608      	mov	r0, r1
 8003518:	4611      	mov	r1, r2
 800351a:	2200      	movs	r2, #0
 800351c:	602a      	str	r2, [r5, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	f7fd f83e 	bl	80005a0 <_write>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d102      	bne.n	800352e <_write_r+0x1e>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	b103      	cbz	r3, 800352e <_write_r+0x1e>
 800352c:	6023      	str	r3, [r4, #0]
 800352e:	bd38      	pop	{r3, r4, r5, pc}
 8003530:	200006f4 	.word	0x200006f4

08003534 <__errno>:
 8003534:	4b01      	ldr	r3, [pc, #4]	@ (800353c <__errno+0x8>)
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000018 	.word	0x20000018

08003540 <__libc_init_array>:
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	4d0d      	ldr	r5, [pc, #52]	@ (8003578 <__libc_init_array+0x38>)
 8003544:	4c0d      	ldr	r4, [pc, #52]	@ (800357c <__libc_init_array+0x3c>)
 8003546:	1b64      	subs	r4, r4, r5
 8003548:	10a4      	asrs	r4, r4, #2
 800354a:	2600      	movs	r6, #0
 800354c:	42a6      	cmp	r6, r4
 800354e:	d109      	bne.n	8003564 <__libc_init_array+0x24>
 8003550:	4d0b      	ldr	r5, [pc, #44]	@ (8003580 <__libc_init_array+0x40>)
 8003552:	4c0c      	ldr	r4, [pc, #48]	@ (8003584 <__libc_init_array+0x44>)
 8003554:	f000 fd24 	bl	8003fa0 <_init>
 8003558:	1b64      	subs	r4, r4, r5
 800355a:	10a4      	asrs	r4, r4, #2
 800355c:	2600      	movs	r6, #0
 800355e:	42a6      	cmp	r6, r4
 8003560:	d105      	bne.n	800356e <__libc_init_array+0x2e>
 8003562:	bd70      	pop	{r4, r5, r6, pc}
 8003564:	f855 3b04 	ldr.w	r3, [r5], #4
 8003568:	4798      	blx	r3
 800356a:	3601      	adds	r6, #1
 800356c:	e7ee      	b.n	800354c <__libc_init_array+0xc>
 800356e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003572:	4798      	blx	r3
 8003574:	3601      	adds	r6, #1
 8003576:	e7f2      	b.n	800355e <__libc_init_array+0x1e>
 8003578:	0800403c 	.word	0x0800403c
 800357c:	0800403c 	.word	0x0800403c
 8003580:	0800403c 	.word	0x0800403c
 8003584:	08004040 	.word	0x08004040

08003588 <__retarget_lock_init_recursive>:
 8003588:	4770      	bx	lr

0800358a <__retarget_lock_acquire_recursive>:
 800358a:	4770      	bx	lr

0800358c <__retarget_lock_release_recursive>:
 800358c:	4770      	bx	lr
	...

08003590 <_free_r>:
 8003590:	b538      	push	{r3, r4, r5, lr}
 8003592:	4605      	mov	r5, r0
 8003594:	2900      	cmp	r1, #0
 8003596:	d041      	beq.n	800361c <_free_r+0x8c>
 8003598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800359c:	1f0c      	subs	r4, r1, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bfb8      	it	lt
 80035a2:	18e4      	addlt	r4, r4, r3
 80035a4:	f000 f8e0 	bl	8003768 <__malloc_lock>
 80035a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003620 <_free_r+0x90>)
 80035aa:	6813      	ldr	r3, [r2, #0]
 80035ac:	b933      	cbnz	r3, 80035bc <_free_r+0x2c>
 80035ae:	6063      	str	r3, [r4, #4]
 80035b0:	6014      	str	r4, [r2, #0]
 80035b2:	4628      	mov	r0, r5
 80035b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035b8:	f000 b8dc 	b.w	8003774 <__malloc_unlock>
 80035bc:	42a3      	cmp	r3, r4
 80035be:	d908      	bls.n	80035d2 <_free_r+0x42>
 80035c0:	6820      	ldr	r0, [r4, #0]
 80035c2:	1821      	adds	r1, r4, r0
 80035c4:	428b      	cmp	r3, r1
 80035c6:	bf01      	itttt	eq
 80035c8:	6819      	ldreq	r1, [r3, #0]
 80035ca:	685b      	ldreq	r3, [r3, #4]
 80035cc:	1809      	addeq	r1, r1, r0
 80035ce:	6021      	streq	r1, [r4, #0]
 80035d0:	e7ed      	b.n	80035ae <_free_r+0x1e>
 80035d2:	461a      	mov	r2, r3
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	b10b      	cbz	r3, 80035dc <_free_r+0x4c>
 80035d8:	42a3      	cmp	r3, r4
 80035da:	d9fa      	bls.n	80035d2 <_free_r+0x42>
 80035dc:	6811      	ldr	r1, [r2, #0]
 80035de:	1850      	adds	r0, r2, r1
 80035e0:	42a0      	cmp	r0, r4
 80035e2:	d10b      	bne.n	80035fc <_free_r+0x6c>
 80035e4:	6820      	ldr	r0, [r4, #0]
 80035e6:	4401      	add	r1, r0
 80035e8:	1850      	adds	r0, r2, r1
 80035ea:	4283      	cmp	r3, r0
 80035ec:	6011      	str	r1, [r2, #0]
 80035ee:	d1e0      	bne.n	80035b2 <_free_r+0x22>
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	6053      	str	r3, [r2, #4]
 80035f6:	4408      	add	r0, r1
 80035f8:	6010      	str	r0, [r2, #0]
 80035fa:	e7da      	b.n	80035b2 <_free_r+0x22>
 80035fc:	d902      	bls.n	8003604 <_free_r+0x74>
 80035fe:	230c      	movs	r3, #12
 8003600:	602b      	str	r3, [r5, #0]
 8003602:	e7d6      	b.n	80035b2 <_free_r+0x22>
 8003604:	6820      	ldr	r0, [r4, #0]
 8003606:	1821      	adds	r1, r4, r0
 8003608:	428b      	cmp	r3, r1
 800360a:	bf04      	itt	eq
 800360c:	6819      	ldreq	r1, [r3, #0]
 800360e:	685b      	ldreq	r3, [r3, #4]
 8003610:	6063      	str	r3, [r4, #4]
 8003612:	bf04      	itt	eq
 8003614:	1809      	addeq	r1, r1, r0
 8003616:	6021      	streq	r1, [r4, #0]
 8003618:	6054      	str	r4, [r2, #4]
 800361a:	e7ca      	b.n	80035b2 <_free_r+0x22>
 800361c:	bd38      	pop	{r3, r4, r5, pc}
 800361e:	bf00      	nop
 8003620:	20000700 	.word	0x20000700

08003624 <sbrk_aligned>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	4e0f      	ldr	r6, [pc, #60]	@ (8003664 <sbrk_aligned+0x40>)
 8003628:	460c      	mov	r4, r1
 800362a:	6831      	ldr	r1, [r6, #0]
 800362c:	4605      	mov	r5, r0
 800362e:	b911      	cbnz	r1, 8003636 <sbrk_aligned+0x12>
 8003630:	f000 fca6 	bl	8003f80 <_sbrk_r>
 8003634:	6030      	str	r0, [r6, #0]
 8003636:	4621      	mov	r1, r4
 8003638:	4628      	mov	r0, r5
 800363a:	f000 fca1 	bl	8003f80 <_sbrk_r>
 800363e:	1c43      	adds	r3, r0, #1
 8003640:	d103      	bne.n	800364a <sbrk_aligned+0x26>
 8003642:	f04f 34ff 	mov.w	r4, #4294967295
 8003646:	4620      	mov	r0, r4
 8003648:	bd70      	pop	{r4, r5, r6, pc}
 800364a:	1cc4      	adds	r4, r0, #3
 800364c:	f024 0403 	bic.w	r4, r4, #3
 8003650:	42a0      	cmp	r0, r4
 8003652:	d0f8      	beq.n	8003646 <sbrk_aligned+0x22>
 8003654:	1a21      	subs	r1, r4, r0
 8003656:	4628      	mov	r0, r5
 8003658:	f000 fc92 	bl	8003f80 <_sbrk_r>
 800365c:	3001      	adds	r0, #1
 800365e:	d1f2      	bne.n	8003646 <sbrk_aligned+0x22>
 8003660:	e7ef      	b.n	8003642 <sbrk_aligned+0x1e>
 8003662:	bf00      	nop
 8003664:	200006fc 	.word	0x200006fc

08003668 <_malloc_r>:
 8003668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800366c:	1ccd      	adds	r5, r1, #3
 800366e:	f025 0503 	bic.w	r5, r5, #3
 8003672:	3508      	adds	r5, #8
 8003674:	2d0c      	cmp	r5, #12
 8003676:	bf38      	it	cc
 8003678:	250c      	movcc	r5, #12
 800367a:	2d00      	cmp	r5, #0
 800367c:	4606      	mov	r6, r0
 800367e:	db01      	blt.n	8003684 <_malloc_r+0x1c>
 8003680:	42a9      	cmp	r1, r5
 8003682:	d904      	bls.n	800368e <_malloc_r+0x26>
 8003684:	230c      	movs	r3, #12
 8003686:	6033      	str	r3, [r6, #0]
 8003688:	2000      	movs	r0, #0
 800368a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800368e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003764 <_malloc_r+0xfc>
 8003692:	f000 f869 	bl	8003768 <__malloc_lock>
 8003696:	f8d8 3000 	ldr.w	r3, [r8]
 800369a:	461c      	mov	r4, r3
 800369c:	bb44      	cbnz	r4, 80036f0 <_malloc_r+0x88>
 800369e:	4629      	mov	r1, r5
 80036a0:	4630      	mov	r0, r6
 80036a2:	f7ff ffbf 	bl	8003624 <sbrk_aligned>
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	4604      	mov	r4, r0
 80036aa:	d158      	bne.n	800375e <_malloc_r+0xf6>
 80036ac:	f8d8 4000 	ldr.w	r4, [r8]
 80036b0:	4627      	mov	r7, r4
 80036b2:	2f00      	cmp	r7, #0
 80036b4:	d143      	bne.n	800373e <_malloc_r+0xd6>
 80036b6:	2c00      	cmp	r4, #0
 80036b8:	d04b      	beq.n	8003752 <_malloc_r+0xea>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	4639      	mov	r1, r7
 80036be:	4630      	mov	r0, r6
 80036c0:	eb04 0903 	add.w	r9, r4, r3
 80036c4:	f000 fc5c 	bl	8003f80 <_sbrk_r>
 80036c8:	4581      	cmp	r9, r0
 80036ca:	d142      	bne.n	8003752 <_malloc_r+0xea>
 80036cc:	6821      	ldr	r1, [r4, #0]
 80036ce:	1a6d      	subs	r5, r5, r1
 80036d0:	4629      	mov	r1, r5
 80036d2:	4630      	mov	r0, r6
 80036d4:	f7ff ffa6 	bl	8003624 <sbrk_aligned>
 80036d8:	3001      	adds	r0, #1
 80036da:	d03a      	beq.n	8003752 <_malloc_r+0xea>
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	442b      	add	r3, r5
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	f8d8 3000 	ldr.w	r3, [r8]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	bb62      	cbnz	r2, 8003744 <_malloc_r+0xdc>
 80036ea:	f8c8 7000 	str.w	r7, [r8]
 80036ee:	e00f      	b.n	8003710 <_malloc_r+0xa8>
 80036f0:	6822      	ldr	r2, [r4, #0]
 80036f2:	1b52      	subs	r2, r2, r5
 80036f4:	d420      	bmi.n	8003738 <_malloc_r+0xd0>
 80036f6:	2a0b      	cmp	r2, #11
 80036f8:	d917      	bls.n	800372a <_malloc_r+0xc2>
 80036fa:	1961      	adds	r1, r4, r5
 80036fc:	42a3      	cmp	r3, r4
 80036fe:	6025      	str	r5, [r4, #0]
 8003700:	bf18      	it	ne
 8003702:	6059      	strne	r1, [r3, #4]
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	bf08      	it	eq
 8003708:	f8c8 1000 	streq.w	r1, [r8]
 800370c:	5162      	str	r2, [r4, r5]
 800370e:	604b      	str	r3, [r1, #4]
 8003710:	4630      	mov	r0, r6
 8003712:	f000 f82f 	bl	8003774 <__malloc_unlock>
 8003716:	f104 000b 	add.w	r0, r4, #11
 800371a:	1d23      	adds	r3, r4, #4
 800371c:	f020 0007 	bic.w	r0, r0, #7
 8003720:	1ac2      	subs	r2, r0, r3
 8003722:	bf1c      	itt	ne
 8003724:	1a1b      	subne	r3, r3, r0
 8003726:	50a3      	strne	r3, [r4, r2]
 8003728:	e7af      	b.n	800368a <_malloc_r+0x22>
 800372a:	6862      	ldr	r2, [r4, #4]
 800372c:	42a3      	cmp	r3, r4
 800372e:	bf0c      	ite	eq
 8003730:	f8c8 2000 	streq.w	r2, [r8]
 8003734:	605a      	strne	r2, [r3, #4]
 8003736:	e7eb      	b.n	8003710 <_malloc_r+0xa8>
 8003738:	4623      	mov	r3, r4
 800373a:	6864      	ldr	r4, [r4, #4]
 800373c:	e7ae      	b.n	800369c <_malloc_r+0x34>
 800373e:	463c      	mov	r4, r7
 8003740:	687f      	ldr	r7, [r7, #4]
 8003742:	e7b6      	b.n	80036b2 <_malloc_r+0x4a>
 8003744:	461a      	mov	r2, r3
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	42a3      	cmp	r3, r4
 800374a:	d1fb      	bne.n	8003744 <_malloc_r+0xdc>
 800374c:	2300      	movs	r3, #0
 800374e:	6053      	str	r3, [r2, #4]
 8003750:	e7de      	b.n	8003710 <_malloc_r+0xa8>
 8003752:	230c      	movs	r3, #12
 8003754:	6033      	str	r3, [r6, #0]
 8003756:	4630      	mov	r0, r6
 8003758:	f000 f80c 	bl	8003774 <__malloc_unlock>
 800375c:	e794      	b.n	8003688 <_malloc_r+0x20>
 800375e:	6005      	str	r5, [r0, #0]
 8003760:	e7d6      	b.n	8003710 <_malloc_r+0xa8>
 8003762:	bf00      	nop
 8003764:	20000700 	.word	0x20000700

08003768 <__malloc_lock>:
 8003768:	4801      	ldr	r0, [pc, #4]	@ (8003770 <__malloc_lock+0x8>)
 800376a:	f7ff bf0e 	b.w	800358a <__retarget_lock_acquire_recursive>
 800376e:	bf00      	nop
 8003770:	200006f8 	.word	0x200006f8

08003774 <__malloc_unlock>:
 8003774:	4801      	ldr	r0, [pc, #4]	@ (800377c <__malloc_unlock+0x8>)
 8003776:	f7ff bf09 	b.w	800358c <__retarget_lock_release_recursive>
 800377a:	bf00      	nop
 800377c:	200006f8 	.word	0x200006f8

08003780 <__sfputc_r>:
 8003780:	6893      	ldr	r3, [r2, #8]
 8003782:	3b01      	subs	r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	b410      	push	{r4}
 8003788:	6093      	str	r3, [r2, #8]
 800378a:	da08      	bge.n	800379e <__sfputc_r+0x1e>
 800378c:	6994      	ldr	r4, [r2, #24]
 800378e:	42a3      	cmp	r3, r4
 8003790:	db01      	blt.n	8003796 <__sfputc_r+0x16>
 8003792:	290a      	cmp	r1, #10
 8003794:	d103      	bne.n	800379e <__sfputc_r+0x1e>
 8003796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800379a:	f7ff bde8 	b.w	800336e <__swbuf_r>
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	1c58      	adds	r0, r3, #1
 80037a2:	6010      	str	r0, [r2, #0]
 80037a4:	7019      	strb	r1, [r3, #0]
 80037a6:	4608      	mov	r0, r1
 80037a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <__sfputs_r>:
 80037ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b0:	4606      	mov	r6, r0
 80037b2:	460f      	mov	r7, r1
 80037b4:	4614      	mov	r4, r2
 80037b6:	18d5      	adds	r5, r2, r3
 80037b8:	42ac      	cmp	r4, r5
 80037ba:	d101      	bne.n	80037c0 <__sfputs_r+0x12>
 80037bc:	2000      	movs	r0, #0
 80037be:	e007      	b.n	80037d0 <__sfputs_r+0x22>
 80037c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037c4:	463a      	mov	r2, r7
 80037c6:	4630      	mov	r0, r6
 80037c8:	f7ff ffda 	bl	8003780 <__sfputc_r>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d1f3      	bne.n	80037b8 <__sfputs_r+0xa>
 80037d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037d4 <_vfiprintf_r>:
 80037d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d8:	460d      	mov	r5, r1
 80037da:	b09d      	sub	sp, #116	@ 0x74
 80037dc:	4614      	mov	r4, r2
 80037de:	4698      	mov	r8, r3
 80037e0:	4606      	mov	r6, r0
 80037e2:	b118      	cbz	r0, 80037ec <_vfiprintf_r+0x18>
 80037e4:	6a03      	ldr	r3, [r0, #32]
 80037e6:	b90b      	cbnz	r3, 80037ec <_vfiprintf_r+0x18>
 80037e8:	f7ff fcd8 	bl	800319c <__sinit>
 80037ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037ee:	07d9      	lsls	r1, r3, #31
 80037f0:	d405      	bmi.n	80037fe <_vfiprintf_r+0x2a>
 80037f2:	89ab      	ldrh	r3, [r5, #12]
 80037f4:	059a      	lsls	r2, r3, #22
 80037f6:	d402      	bmi.n	80037fe <_vfiprintf_r+0x2a>
 80037f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037fa:	f7ff fec6 	bl	800358a <__retarget_lock_acquire_recursive>
 80037fe:	89ab      	ldrh	r3, [r5, #12]
 8003800:	071b      	lsls	r3, r3, #28
 8003802:	d501      	bpl.n	8003808 <_vfiprintf_r+0x34>
 8003804:	692b      	ldr	r3, [r5, #16]
 8003806:	b99b      	cbnz	r3, 8003830 <_vfiprintf_r+0x5c>
 8003808:	4629      	mov	r1, r5
 800380a:	4630      	mov	r0, r6
 800380c:	f7ff fdee 	bl	80033ec <__swsetup_r>
 8003810:	b170      	cbz	r0, 8003830 <_vfiprintf_r+0x5c>
 8003812:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003814:	07dc      	lsls	r4, r3, #31
 8003816:	d504      	bpl.n	8003822 <_vfiprintf_r+0x4e>
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	b01d      	add	sp, #116	@ 0x74
 800381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003822:	89ab      	ldrh	r3, [r5, #12]
 8003824:	0598      	lsls	r0, r3, #22
 8003826:	d4f7      	bmi.n	8003818 <_vfiprintf_r+0x44>
 8003828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800382a:	f7ff feaf 	bl	800358c <__retarget_lock_release_recursive>
 800382e:	e7f3      	b.n	8003818 <_vfiprintf_r+0x44>
 8003830:	2300      	movs	r3, #0
 8003832:	9309      	str	r3, [sp, #36]	@ 0x24
 8003834:	2320      	movs	r3, #32
 8003836:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800383a:	f8cd 800c 	str.w	r8, [sp, #12]
 800383e:	2330      	movs	r3, #48	@ 0x30
 8003840:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80039f0 <_vfiprintf_r+0x21c>
 8003844:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003848:	f04f 0901 	mov.w	r9, #1
 800384c:	4623      	mov	r3, r4
 800384e:	469a      	mov	sl, r3
 8003850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003854:	b10a      	cbz	r2, 800385a <_vfiprintf_r+0x86>
 8003856:	2a25      	cmp	r2, #37	@ 0x25
 8003858:	d1f9      	bne.n	800384e <_vfiprintf_r+0x7a>
 800385a:	ebba 0b04 	subs.w	fp, sl, r4
 800385e:	d00b      	beq.n	8003878 <_vfiprintf_r+0xa4>
 8003860:	465b      	mov	r3, fp
 8003862:	4622      	mov	r2, r4
 8003864:	4629      	mov	r1, r5
 8003866:	4630      	mov	r0, r6
 8003868:	f7ff ffa1 	bl	80037ae <__sfputs_r>
 800386c:	3001      	adds	r0, #1
 800386e:	f000 80a7 	beq.w	80039c0 <_vfiprintf_r+0x1ec>
 8003872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003874:	445a      	add	r2, fp
 8003876:	9209      	str	r2, [sp, #36]	@ 0x24
 8003878:	f89a 3000 	ldrb.w	r3, [sl]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 809f 	beq.w	80039c0 <_vfiprintf_r+0x1ec>
 8003882:	2300      	movs	r3, #0
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800388c:	f10a 0a01 	add.w	sl, sl, #1
 8003890:	9304      	str	r3, [sp, #16]
 8003892:	9307      	str	r3, [sp, #28]
 8003894:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003898:	931a      	str	r3, [sp, #104]	@ 0x68
 800389a:	4654      	mov	r4, sl
 800389c:	2205      	movs	r2, #5
 800389e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a2:	4853      	ldr	r0, [pc, #332]	@ (80039f0 <_vfiprintf_r+0x21c>)
 80038a4:	f7fc fcb4 	bl	8000210 <memchr>
 80038a8:	9a04      	ldr	r2, [sp, #16]
 80038aa:	b9d8      	cbnz	r0, 80038e4 <_vfiprintf_r+0x110>
 80038ac:	06d1      	lsls	r1, r2, #27
 80038ae:	bf44      	itt	mi
 80038b0:	2320      	movmi	r3, #32
 80038b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038b6:	0713      	lsls	r3, r2, #28
 80038b8:	bf44      	itt	mi
 80038ba:	232b      	movmi	r3, #43	@ 0x2b
 80038bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038c0:	f89a 3000 	ldrb.w	r3, [sl]
 80038c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80038c6:	d015      	beq.n	80038f4 <_vfiprintf_r+0x120>
 80038c8:	9a07      	ldr	r2, [sp, #28]
 80038ca:	4654      	mov	r4, sl
 80038cc:	2000      	movs	r0, #0
 80038ce:	f04f 0c0a 	mov.w	ip, #10
 80038d2:	4621      	mov	r1, r4
 80038d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038d8:	3b30      	subs	r3, #48	@ 0x30
 80038da:	2b09      	cmp	r3, #9
 80038dc:	d94b      	bls.n	8003976 <_vfiprintf_r+0x1a2>
 80038de:	b1b0      	cbz	r0, 800390e <_vfiprintf_r+0x13a>
 80038e0:	9207      	str	r2, [sp, #28]
 80038e2:	e014      	b.n	800390e <_vfiprintf_r+0x13a>
 80038e4:	eba0 0308 	sub.w	r3, r0, r8
 80038e8:	fa09 f303 	lsl.w	r3, r9, r3
 80038ec:	4313      	orrs	r3, r2
 80038ee:	9304      	str	r3, [sp, #16]
 80038f0:	46a2      	mov	sl, r4
 80038f2:	e7d2      	b.n	800389a <_vfiprintf_r+0xc6>
 80038f4:	9b03      	ldr	r3, [sp, #12]
 80038f6:	1d19      	adds	r1, r3, #4
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	9103      	str	r1, [sp, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bfbb      	ittet	lt
 8003900:	425b      	neglt	r3, r3
 8003902:	f042 0202 	orrlt.w	r2, r2, #2
 8003906:	9307      	strge	r3, [sp, #28]
 8003908:	9307      	strlt	r3, [sp, #28]
 800390a:	bfb8      	it	lt
 800390c:	9204      	strlt	r2, [sp, #16]
 800390e:	7823      	ldrb	r3, [r4, #0]
 8003910:	2b2e      	cmp	r3, #46	@ 0x2e
 8003912:	d10a      	bne.n	800392a <_vfiprintf_r+0x156>
 8003914:	7863      	ldrb	r3, [r4, #1]
 8003916:	2b2a      	cmp	r3, #42	@ 0x2a
 8003918:	d132      	bne.n	8003980 <_vfiprintf_r+0x1ac>
 800391a:	9b03      	ldr	r3, [sp, #12]
 800391c:	1d1a      	adds	r2, r3, #4
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	9203      	str	r2, [sp, #12]
 8003922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003926:	3402      	adds	r4, #2
 8003928:	9305      	str	r3, [sp, #20]
 800392a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003a00 <_vfiprintf_r+0x22c>
 800392e:	7821      	ldrb	r1, [r4, #0]
 8003930:	2203      	movs	r2, #3
 8003932:	4650      	mov	r0, sl
 8003934:	f7fc fc6c 	bl	8000210 <memchr>
 8003938:	b138      	cbz	r0, 800394a <_vfiprintf_r+0x176>
 800393a:	9b04      	ldr	r3, [sp, #16]
 800393c:	eba0 000a 	sub.w	r0, r0, sl
 8003940:	2240      	movs	r2, #64	@ 0x40
 8003942:	4082      	lsls	r2, r0
 8003944:	4313      	orrs	r3, r2
 8003946:	3401      	adds	r4, #1
 8003948:	9304      	str	r3, [sp, #16]
 800394a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800394e:	4829      	ldr	r0, [pc, #164]	@ (80039f4 <_vfiprintf_r+0x220>)
 8003950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003954:	2206      	movs	r2, #6
 8003956:	f7fc fc5b 	bl	8000210 <memchr>
 800395a:	2800      	cmp	r0, #0
 800395c:	d03f      	beq.n	80039de <_vfiprintf_r+0x20a>
 800395e:	4b26      	ldr	r3, [pc, #152]	@ (80039f8 <_vfiprintf_r+0x224>)
 8003960:	bb1b      	cbnz	r3, 80039aa <_vfiprintf_r+0x1d6>
 8003962:	9b03      	ldr	r3, [sp, #12]
 8003964:	3307      	adds	r3, #7
 8003966:	f023 0307 	bic.w	r3, r3, #7
 800396a:	3308      	adds	r3, #8
 800396c:	9303      	str	r3, [sp, #12]
 800396e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003970:	443b      	add	r3, r7
 8003972:	9309      	str	r3, [sp, #36]	@ 0x24
 8003974:	e76a      	b.n	800384c <_vfiprintf_r+0x78>
 8003976:	fb0c 3202 	mla	r2, ip, r2, r3
 800397a:	460c      	mov	r4, r1
 800397c:	2001      	movs	r0, #1
 800397e:	e7a8      	b.n	80038d2 <_vfiprintf_r+0xfe>
 8003980:	2300      	movs	r3, #0
 8003982:	3401      	adds	r4, #1
 8003984:	9305      	str	r3, [sp, #20]
 8003986:	4619      	mov	r1, r3
 8003988:	f04f 0c0a 	mov.w	ip, #10
 800398c:	4620      	mov	r0, r4
 800398e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003992:	3a30      	subs	r2, #48	@ 0x30
 8003994:	2a09      	cmp	r2, #9
 8003996:	d903      	bls.n	80039a0 <_vfiprintf_r+0x1cc>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0c6      	beq.n	800392a <_vfiprintf_r+0x156>
 800399c:	9105      	str	r1, [sp, #20]
 800399e:	e7c4      	b.n	800392a <_vfiprintf_r+0x156>
 80039a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80039a4:	4604      	mov	r4, r0
 80039a6:	2301      	movs	r3, #1
 80039a8:	e7f0      	b.n	800398c <_vfiprintf_r+0x1b8>
 80039aa:	ab03      	add	r3, sp, #12
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	462a      	mov	r2, r5
 80039b0:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <_vfiprintf_r+0x228>)
 80039b2:	a904      	add	r1, sp, #16
 80039b4:	4630      	mov	r0, r6
 80039b6:	f3af 8000 	nop.w
 80039ba:	4607      	mov	r7, r0
 80039bc:	1c78      	adds	r0, r7, #1
 80039be:	d1d6      	bne.n	800396e <_vfiprintf_r+0x19a>
 80039c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039c2:	07d9      	lsls	r1, r3, #31
 80039c4:	d405      	bmi.n	80039d2 <_vfiprintf_r+0x1fe>
 80039c6:	89ab      	ldrh	r3, [r5, #12]
 80039c8:	059a      	lsls	r2, r3, #22
 80039ca:	d402      	bmi.n	80039d2 <_vfiprintf_r+0x1fe>
 80039cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039ce:	f7ff fddd 	bl	800358c <__retarget_lock_release_recursive>
 80039d2:	89ab      	ldrh	r3, [r5, #12]
 80039d4:	065b      	lsls	r3, r3, #25
 80039d6:	f53f af1f 	bmi.w	8003818 <_vfiprintf_r+0x44>
 80039da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039dc:	e71e      	b.n	800381c <_vfiprintf_r+0x48>
 80039de:	ab03      	add	r3, sp, #12
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	462a      	mov	r2, r5
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <_vfiprintf_r+0x228>)
 80039e6:	a904      	add	r1, sp, #16
 80039e8:	4630      	mov	r0, r6
 80039ea:	f000 f879 	bl	8003ae0 <_printf_i>
 80039ee:	e7e4      	b.n	80039ba <_vfiprintf_r+0x1e6>
 80039f0:	08004000 	.word	0x08004000
 80039f4:	0800400a 	.word	0x0800400a
 80039f8:	00000000 	.word	0x00000000
 80039fc:	080037af 	.word	0x080037af
 8003a00:	08004006 	.word	0x08004006

08003a04 <_printf_common>:
 8003a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a08:	4616      	mov	r6, r2
 8003a0a:	4698      	mov	r8, r3
 8003a0c:	688a      	ldr	r2, [r1, #8]
 8003a0e:	690b      	ldr	r3, [r1, #16]
 8003a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a14:	4293      	cmp	r3, r2
 8003a16:	bfb8      	it	lt
 8003a18:	4613      	movlt	r3, r2
 8003a1a:	6033      	str	r3, [r6, #0]
 8003a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a20:	4607      	mov	r7, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	b10a      	cbz	r2, 8003a2a <_printf_common+0x26>
 8003a26:	3301      	adds	r3, #1
 8003a28:	6033      	str	r3, [r6, #0]
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	0699      	lsls	r1, r3, #26
 8003a2e:	bf42      	ittt	mi
 8003a30:	6833      	ldrmi	r3, [r6, #0]
 8003a32:	3302      	addmi	r3, #2
 8003a34:	6033      	strmi	r3, [r6, #0]
 8003a36:	6825      	ldr	r5, [r4, #0]
 8003a38:	f015 0506 	ands.w	r5, r5, #6
 8003a3c:	d106      	bne.n	8003a4c <_printf_common+0x48>
 8003a3e:	f104 0a19 	add.w	sl, r4, #25
 8003a42:	68e3      	ldr	r3, [r4, #12]
 8003a44:	6832      	ldr	r2, [r6, #0]
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	42ab      	cmp	r3, r5
 8003a4a:	dc26      	bgt.n	8003a9a <_printf_common+0x96>
 8003a4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a50:	6822      	ldr	r2, [r4, #0]
 8003a52:	3b00      	subs	r3, #0
 8003a54:	bf18      	it	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	0692      	lsls	r2, r2, #26
 8003a5a:	d42b      	bmi.n	8003ab4 <_printf_common+0xb0>
 8003a5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a60:	4641      	mov	r1, r8
 8003a62:	4638      	mov	r0, r7
 8003a64:	47c8      	blx	r9
 8003a66:	3001      	adds	r0, #1
 8003a68:	d01e      	beq.n	8003aa8 <_printf_common+0xa4>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	6922      	ldr	r2, [r4, #16]
 8003a6e:	f003 0306 	and.w	r3, r3, #6
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	bf02      	ittt	eq
 8003a76:	68e5      	ldreq	r5, [r4, #12]
 8003a78:	6833      	ldreq	r3, [r6, #0]
 8003a7a:	1aed      	subeq	r5, r5, r3
 8003a7c:	68a3      	ldr	r3, [r4, #8]
 8003a7e:	bf0c      	ite	eq
 8003a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a84:	2500      	movne	r5, #0
 8003a86:	4293      	cmp	r3, r2
 8003a88:	bfc4      	itt	gt
 8003a8a:	1a9b      	subgt	r3, r3, r2
 8003a8c:	18ed      	addgt	r5, r5, r3
 8003a8e:	2600      	movs	r6, #0
 8003a90:	341a      	adds	r4, #26
 8003a92:	42b5      	cmp	r5, r6
 8003a94:	d11a      	bne.n	8003acc <_printf_common+0xc8>
 8003a96:	2000      	movs	r0, #0
 8003a98:	e008      	b.n	8003aac <_printf_common+0xa8>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	4652      	mov	r2, sl
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	4638      	mov	r0, r7
 8003aa2:	47c8      	blx	r9
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d103      	bne.n	8003ab0 <_printf_common+0xac>
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab0:	3501      	adds	r5, #1
 8003ab2:	e7c6      	b.n	8003a42 <_printf_common+0x3e>
 8003ab4:	18e1      	adds	r1, r4, r3
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	2030      	movs	r0, #48	@ 0x30
 8003aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003abe:	4422      	add	r2, r4
 8003ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ac8:	3302      	adds	r3, #2
 8003aca:	e7c7      	b.n	8003a5c <_printf_common+0x58>
 8003acc:	2301      	movs	r3, #1
 8003ace:	4622      	mov	r2, r4
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	4638      	mov	r0, r7
 8003ad4:	47c8      	blx	r9
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	d0e6      	beq.n	8003aa8 <_printf_common+0xa4>
 8003ada:	3601      	adds	r6, #1
 8003adc:	e7d9      	b.n	8003a92 <_printf_common+0x8e>
	...

08003ae0 <_printf_i>:
 8003ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae4:	7e0f      	ldrb	r7, [r1, #24]
 8003ae6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ae8:	2f78      	cmp	r7, #120	@ 0x78
 8003aea:	4691      	mov	r9, r2
 8003aec:	4680      	mov	r8, r0
 8003aee:	460c      	mov	r4, r1
 8003af0:	469a      	mov	sl, r3
 8003af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003af6:	d807      	bhi.n	8003b08 <_printf_i+0x28>
 8003af8:	2f62      	cmp	r7, #98	@ 0x62
 8003afa:	d80a      	bhi.n	8003b12 <_printf_i+0x32>
 8003afc:	2f00      	cmp	r7, #0
 8003afe:	f000 80d2 	beq.w	8003ca6 <_printf_i+0x1c6>
 8003b02:	2f58      	cmp	r7, #88	@ 0x58
 8003b04:	f000 80b9 	beq.w	8003c7a <_printf_i+0x19a>
 8003b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b10:	e03a      	b.n	8003b88 <_printf_i+0xa8>
 8003b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b16:	2b15      	cmp	r3, #21
 8003b18:	d8f6      	bhi.n	8003b08 <_printf_i+0x28>
 8003b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8003b20 <_printf_i+0x40>)
 8003b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b20:	08003b79 	.word	0x08003b79
 8003b24:	08003b8d 	.word	0x08003b8d
 8003b28:	08003b09 	.word	0x08003b09
 8003b2c:	08003b09 	.word	0x08003b09
 8003b30:	08003b09 	.word	0x08003b09
 8003b34:	08003b09 	.word	0x08003b09
 8003b38:	08003b8d 	.word	0x08003b8d
 8003b3c:	08003b09 	.word	0x08003b09
 8003b40:	08003b09 	.word	0x08003b09
 8003b44:	08003b09 	.word	0x08003b09
 8003b48:	08003b09 	.word	0x08003b09
 8003b4c:	08003c8d 	.word	0x08003c8d
 8003b50:	08003bb7 	.word	0x08003bb7
 8003b54:	08003c47 	.word	0x08003c47
 8003b58:	08003b09 	.word	0x08003b09
 8003b5c:	08003b09 	.word	0x08003b09
 8003b60:	08003caf 	.word	0x08003caf
 8003b64:	08003b09 	.word	0x08003b09
 8003b68:	08003bb7 	.word	0x08003bb7
 8003b6c:	08003b09 	.word	0x08003b09
 8003b70:	08003b09 	.word	0x08003b09
 8003b74:	08003c4f 	.word	0x08003c4f
 8003b78:	6833      	ldr	r3, [r6, #0]
 8003b7a:	1d1a      	adds	r2, r3, #4
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6032      	str	r2, [r6, #0]
 8003b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e09d      	b.n	8003cc8 <_printf_i+0x1e8>
 8003b8c:	6833      	ldr	r3, [r6, #0]
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	1d19      	adds	r1, r3, #4
 8003b92:	6031      	str	r1, [r6, #0]
 8003b94:	0606      	lsls	r6, r0, #24
 8003b96:	d501      	bpl.n	8003b9c <_printf_i+0xbc>
 8003b98:	681d      	ldr	r5, [r3, #0]
 8003b9a:	e003      	b.n	8003ba4 <_printf_i+0xc4>
 8003b9c:	0645      	lsls	r5, r0, #25
 8003b9e:	d5fb      	bpl.n	8003b98 <_printf_i+0xb8>
 8003ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ba4:	2d00      	cmp	r5, #0
 8003ba6:	da03      	bge.n	8003bb0 <_printf_i+0xd0>
 8003ba8:	232d      	movs	r3, #45	@ 0x2d
 8003baa:	426d      	negs	r5, r5
 8003bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bb0:	4859      	ldr	r0, [pc, #356]	@ (8003d18 <_printf_i+0x238>)
 8003bb2:	230a      	movs	r3, #10
 8003bb4:	e011      	b.n	8003bda <_printf_i+0xfa>
 8003bb6:	6821      	ldr	r1, [r4, #0]
 8003bb8:	6833      	ldr	r3, [r6, #0]
 8003bba:	0608      	lsls	r0, r1, #24
 8003bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003bc0:	d402      	bmi.n	8003bc8 <_printf_i+0xe8>
 8003bc2:	0649      	lsls	r1, r1, #25
 8003bc4:	bf48      	it	mi
 8003bc6:	b2ad      	uxthmi	r5, r5
 8003bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003bca:	4853      	ldr	r0, [pc, #332]	@ (8003d18 <_printf_i+0x238>)
 8003bcc:	6033      	str	r3, [r6, #0]
 8003bce:	bf14      	ite	ne
 8003bd0:	230a      	movne	r3, #10
 8003bd2:	2308      	moveq	r3, #8
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003bda:	6866      	ldr	r6, [r4, #4]
 8003bdc:	60a6      	str	r6, [r4, #8]
 8003bde:	2e00      	cmp	r6, #0
 8003be0:	bfa2      	ittt	ge
 8003be2:	6821      	ldrge	r1, [r4, #0]
 8003be4:	f021 0104 	bicge.w	r1, r1, #4
 8003be8:	6021      	strge	r1, [r4, #0]
 8003bea:	b90d      	cbnz	r5, 8003bf0 <_printf_i+0x110>
 8003bec:	2e00      	cmp	r6, #0
 8003bee:	d04b      	beq.n	8003c88 <_printf_i+0x1a8>
 8003bf0:	4616      	mov	r6, r2
 8003bf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bf6:	fb03 5711 	mls	r7, r3, r1, r5
 8003bfa:	5dc7      	ldrb	r7, [r0, r7]
 8003bfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c00:	462f      	mov	r7, r5
 8003c02:	42bb      	cmp	r3, r7
 8003c04:	460d      	mov	r5, r1
 8003c06:	d9f4      	bls.n	8003bf2 <_printf_i+0x112>
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d10b      	bne.n	8003c24 <_printf_i+0x144>
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	07df      	lsls	r7, r3, #31
 8003c10:	d508      	bpl.n	8003c24 <_printf_i+0x144>
 8003c12:	6923      	ldr	r3, [r4, #16]
 8003c14:	6861      	ldr	r1, [r4, #4]
 8003c16:	4299      	cmp	r1, r3
 8003c18:	bfde      	ittt	le
 8003c1a:	2330      	movle	r3, #48	@ 0x30
 8003c1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c24:	1b92      	subs	r2, r2, r6
 8003c26:	6122      	str	r2, [r4, #16]
 8003c28:	f8cd a000 	str.w	sl, [sp]
 8003c2c:	464b      	mov	r3, r9
 8003c2e:	aa03      	add	r2, sp, #12
 8003c30:	4621      	mov	r1, r4
 8003c32:	4640      	mov	r0, r8
 8003c34:	f7ff fee6 	bl	8003a04 <_printf_common>
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d14a      	bne.n	8003cd2 <_printf_i+0x1f2>
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c40:	b004      	add	sp, #16
 8003c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	f043 0320 	orr.w	r3, r3, #32
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	4833      	ldr	r0, [pc, #204]	@ (8003d1c <_printf_i+0x23c>)
 8003c50:	2778      	movs	r7, #120	@ 0x78
 8003c52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	6831      	ldr	r1, [r6, #0]
 8003c5a:	061f      	lsls	r7, r3, #24
 8003c5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c60:	d402      	bmi.n	8003c68 <_printf_i+0x188>
 8003c62:	065f      	lsls	r7, r3, #25
 8003c64:	bf48      	it	mi
 8003c66:	b2ad      	uxthmi	r5, r5
 8003c68:	6031      	str	r1, [r6, #0]
 8003c6a:	07d9      	lsls	r1, r3, #31
 8003c6c:	bf44      	itt	mi
 8003c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8003c72:	6023      	strmi	r3, [r4, #0]
 8003c74:	b11d      	cbz	r5, 8003c7e <_printf_i+0x19e>
 8003c76:	2310      	movs	r3, #16
 8003c78:	e7ac      	b.n	8003bd4 <_printf_i+0xf4>
 8003c7a:	4827      	ldr	r0, [pc, #156]	@ (8003d18 <_printf_i+0x238>)
 8003c7c:	e7e9      	b.n	8003c52 <_printf_i+0x172>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	f023 0320 	bic.w	r3, r3, #32
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	e7f6      	b.n	8003c76 <_printf_i+0x196>
 8003c88:	4616      	mov	r6, r2
 8003c8a:	e7bd      	b.n	8003c08 <_printf_i+0x128>
 8003c8c:	6833      	ldr	r3, [r6, #0]
 8003c8e:	6825      	ldr	r5, [r4, #0]
 8003c90:	6961      	ldr	r1, [r4, #20]
 8003c92:	1d18      	adds	r0, r3, #4
 8003c94:	6030      	str	r0, [r6, #0]
 8003c96:	062e      	lsls	r6, r5, #24
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	d501      	bpl.n	8003ca0 <_printf_i+0x1c0>
 8003c9c:	6019      	str	r1, [r3, #0]
 8003c9e:	e002      	b.n	8003ca6 <_printf_i+0x1c6>
 8003ca0:	0668      	lsls	r0, r5, #25
 8003ca2:	d5fb      	bpl.n	8003c9c <_printf_i+0x1bc>
 8003ca4:	8019      	strh	r1, [r3, #0]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	6123      	str	r3, [r4, #16]
 8003caa:	4616      	mov	r6, r2
 8003cac:	e7bc      	b.n	8003c28 <_printf_i+0x148>
 8003cae:	6833      	ldr	r3, [r6, #0]
 8003cb0:	1d1a      	adds	r2, r3, #4
 8003cb2:	6032      	str	r2, [r6, #0]
 8003cb4:	681e      	ldr	r6, [r3, #0]
 8003cb6:	6862      	ldr	r2, [r4, #4]
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f7fc faa8 	bl	8000210 <memchr>
 8003cc0:	b108      	cbz	r0, 8003cc6 <_printf_i+0x1e6>
 8003cc2:	1b80      	subs	r0, r0, r6
 8003cc4:	6060      	str	r0, [r4, #4]
 8003cc6:	6863      	ldr	r3, [r4, #4]
 8003cc8:	6123      	str	r3, [r4, #16]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cd0:	e7aa      	b.n	8003c28 <_printf_i+0x148>
 8003cd2:	6923      	ldr	r3, [r4, #16]
 8003cd4:	4632      	mov	r2, r6
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	4640      	mov	r0, r8
 8003cda:	47d0      	blx	sl
 8003cdc:	3001      	adds	r0, #1
 8003cde:	d0ad      	beq.n	8003c3c <_printf_i+0x15c>
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	079b      	lsls	r3, r3, #30
 8003ce4:	d413      	bmi.n	8003d0e <_printf_i+0x22e>
 8003ce6:	68e0      	ldr	r0, [r4, #12]
 8003ce8:	9b03      	ldr	r3, [sp, #12]
 8003cea:	4298      	cmp	r0, r3
 8003cec:	bfb8      	it	lt
 8003cee:	4618      	movlt	r0, r3
 8003cf0:	e7a6      	b.n	8003c40 <_printf_i+0x160>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	4632      	mov	r2, r6
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	47d0      	blx	sl
 8003cfc:	3001      	adds	r0, #1
 8003cfe:	d09d      	beq.n	8003c3c <_printf_i+0x15c>
 8003d00:	3501      	adds	r5, #1
 8003d02:	68e3      	ldr	r3, [r4, #12]
 8003d04:	9903      	ldr	r1, [sp, #12]
 8003d06:	1a5b      	subs	r3, r3, r1
 8003d08:	42ab      	cmp	r3, r5
 8003d0a:	dcf2      	bgt.n	8003cf2 <_printf_i+0x212>
 8003d0c:	e7eb      	b.n	8003ce6 <_printf_i+0x206>
 8003d0e:	2500      	movs	r5, #0
 8003d10:	f104 0619 	add.w	r6, r4, #25
 8003d14:	e7f5      	b.n	8003d02 <_printf_i+0x222>
 8003d16:	bf00      	nop
 8003d18:	08004011 	.word	0x08004011
 8003d1c:	08004022 	.word	0x08004022

08003d20 <__sflush_r>:
 8003d20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d28:	0716      	lsls	r6, r2, #28
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	d454      	bmi.n	8003dda <__sflush_r+0xba>
 8003d30:	684b      	ldr	r3, [r1, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	dc02      	bgt.n	8003d3c <__sflush_r+0x1c>
 8003d36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	dd48      	ble.n	8003dce <__sflush_r+0xae>
 8003d3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d3e:	2e00      	cmp	r6, #0
 8003d40:	d045      	beq.n	8003dce <__sflush_r+0xae>
 8003d42:	2300      	movs	r3, #0
 8003d44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003d48:	682f      	ldr	r7, [r5, #0]
 8003d4a:	6a21      	ldr	r1, [r4, #32]
 8003d4c:	602b      	str	r3, [r5, #0]
 8003d4e:	d030      	beq.n	8003db2 <__sflush_r+0x92>
 8003d50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	0759      	lsls	r1, r3, #29
 8003d56:	d505      	bpl.n	8003d64 <__sflush_r+0x44>
 8003d58:	6863      	ldr	r3, [r4, #4]
 8003d5a:	1ad2      	subs	r2, r2, r3
 8003d5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d5e:	b10b      	cbz	r3, 8003d64 <__sflush_r+0x44>
 8003d60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	2300      	movs	r3, #0
 8003d66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d68:	6a21      	ldr	r1, [r4, #32]
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	47b0      	blx	r6
 8003d6e:	1c43      	adds	r3, r0, #1
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	d106      	bne.n	8003d82 <__sflush_r+0x62>
 8003d74:	6829      	ldr	r1, [r5, #0]
 8003d76:	291d      	cmp	r1, #29
 8003d78:	d82b      	bhi.n	8003dd2 <__sflush_r+0xb2>
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e24 <__sflush_r+0x104>)
 8003d7c:	410a      	asrs	r2, r1
 8003d7e:	07d6      	lsls	r6, r2, #31
 8003d80:	d427      	bmi.n	8003dd2 <__sflush_r+0xb2>
 8003d82:	2200      	movs	r2, #0
 8003d84:	6062      	str	r2, [r4, #4]
 8003d86:	04d9      	lsls	r1, r3, #19
 8003d88:	6922      	ldr	r2, [r4, #16]
 8003d8a:	6022      	str	r2, [r4, #0]
 8003d8c:	d504      	bpl.n	8003d98 <__sflush_r+0x78>
 8003d8e:	1c42      	adds	r2, r0, #1
 8003d90:	d101      	bne.n	8003d96 <__sflush_r+0x76>
 8003d92:	682b      	ldr	r3, [r5, #0]
 8003d94:	b903      	cbnz	r3, 8003d98 <__sflush_r+0x78>
 8003d96:	6560      	str	r0, [r4, #84]	@ 0x54
 8003d98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d9a:	602f      	str	r7, [r5, #0]
 8003d9c:	b1b9      	cbz	r1, 8003dce <__sflush_r+0xae>
 8003d9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003da2:	4299      	cmp	r1, r3
 8003da4:	d002      	beq.n	8003dac <__sflush_r+0x8c>
 8003da6:	4628      	mov	r0, r5
 8003da8:	f7ff fbf2 	bl	8003590 <_free_r>
 8003dac:	2300      	movs	r3, #0
 8003dae:	6363      	str	r3, [r4, #52]	@ 0x34
 8003db0:	e00d      	b.n	8003dce <__sflush_r+0xae>
 8003db2:	2301      	movs	r3, #1
 8003db4:	4628      	mov	r0, r5
 8003db6:	47b0      	blx	r6
 8003db8:	4602      	mov	r2, r0
 8003dba:	1c50      	adds	r0, r2, #1
 8003dbc:	d1c9      	bne.n	8003d52 <__sflush_r+0x32>
 8003dbe:	682b      	ldr	r3, [r5, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0c6      	beq.n	8003d52 <__sflush_r+0x32>
 8003dc4:	2b1d      	cmp	r3, #29
 8003dc6:	d001      	beq.n	8003dcc <__sflush_r+0xac>
 8003dc8:	2b16      	cmp	r3, #22
 8003dca:	d11e      	bne.n	8003e0a <__sflush_r+0xea>
 8003dcc:	602f      	str	r7, [r5, #0]
 8003dce:	2000      	movs	r0, #0
 8003dd0:	e022      	b.n	8003e18 <__sflush_r+0xf8>
 8003dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dd6:	b21b      	sxth	r3, r3
 8003dd8:	e01b      	b.n	8003e12 <__sflush_r+0xf2>
 8003dda:	690f      	ldr	r7, [r1, #16]
 8003ddc:	2f00      	cmp	r7, #0
 8003dde:	d0f6      	beq.n	8003dce <__sflush_r+0xae>
 8003de0:	0793      	lsls	r3, r2, #30
 8003de2:	680e      	ldr	r6, [r1, #0]
 8003de4:	bf08      	it	eq
 8003de6:	694b      	ldreq	r3, [r1, #20]
 8003de8:	600f      	str	r7, [r1, #0]
 8003dea:	bf18      	it	ne
 8003dec:	2300      	movne	r3, #0
 8003dee:	eba6 0807 	sub.w	r8, r6, r7
 8003df2:	608b      	str	r3, [r1, #8]
 8003df4:	f1b8 0f00 	cmp.w	r8, #0
 8003df8:	dde9      	ble.n	8003dce <__sflush_r+0xae>
 8003dfa:	6a21      	ldr	r1, [r4, #32]
 8003dfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003dfe:	4643      	mov	r3, r8
 8003e00:	463a      	mov	r2, r7
 8003e02:	4628      	mov	r0, r5
 8003e04:	47b0      	blx	r6
 8003e06:	2800      	cmp	r0, #0
 8003e08:	dc08      	bgt.n	8003e1c <__sflush_r+0xfc>
 8003e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e12:	81a3      	strh	r3, [r4, #12]
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e1c:	4407      	add	r7, r0
 8003e1e:	eba8 0800 	sub.w	r8, r8, r0
 8003e22:	e7e7      	b.n	8003df4 <__sflush_r+0xd4>
 8003e24:	dfbffffe 	.word	0xdfbffffe

08003e28 <_fflush_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	690b      	ldr	r3, [r1, #16]
 8003e2c:	4605      	mov	r5, r0
 8003e2e:	460c      	mov	r4, r1
 8003e30:	b913      	cbnz	r3, 8003e38 <_fflush_r+0x10>
 8003e32:	2500      	movs	r5, #0
 8003e34:	4628      	mov	r0, r5
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
 8003e38:	b118      	cbz	r0, 8003e42 <_fflush_r+0x1a>
 8003e3a:	6a03      	ldr	r3, [r0, #32]
 8003e3c:	b90b      	cbnz	r3, 8003e42 <_fflush_r+0x1a>
 8003e3e:	f7ff f9ad 	bl	800319c <__sinit>
 8003e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f3      	beq.n	8003e32 <_fflush_r+0xa>
 8003e4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003e4c:	07d0      	lsls	r0, r2, #31
 8003e4e:	d404      	bmi.n	8003e5a <_fflush_r+0x32>
 8003e50:	0599      	lsls	r1, r3, #22
 8003e52:	d402      	bmi.n	8003e5a <_fflush_r+0x32>
 8003e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e56:	f7ff fb98 	bl	800358a <__retarget_lock_acquire_recursive>
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	f7ff ff5f 	bl	8003d20 <__sflush_r>
 8003e62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e64:	07da      	lsls	r2, r3, #31
 8003e66:	4605      	mov	r5, r0
 8003e68:	d4e4      	bmi.n	8003e34 <_fflush_r+0xc>
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	059b      	lsls	r3, r3, #22
 8003e6e:	d4e1      	bmi.n	8003e34 <_fflush_r+0xc>
 8003e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e72:	f7ff fb8b 	bl	800358c <__retarget_lock_release_recursive>
 8003e76:	e7dd      	b.n	8003e34 <_fflush_r+0xc>

08003e78 <__swhatbuf_r>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e80:	2900      	cmp	r1, #0
 8003e82:	b096      	sub	sp, #88	@ 0x58
 8003e84:	4615      	mov	r5, r2
 8003e86:	461e      	mov	r6, r3
 8003e88:	da0d      	bge.n	8003ea6 <__swhatbuf_r+0x2e>
 8003e8a:	89a3      	ldrh	r3, [r4, #12]
 8003e8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e90:	f04f 0100 	mov.w	r1, #0
 8003e94:	bf14      	ite	ne
 8003e96:	2340      	movne	r3, #64	@ 0x40
 8003e98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	6031      	str	r1, [r6, #0]
 8003ea0:	602b      	str	r3, [r5, #0]
 8003ea2:	b016      	add	sp, #88	@ 0x58
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
 8003ea6:	466a      	mov	r2, sp
 8003ea8:	f000 f848 	bl	8003f3c <_fstat_r>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	dbec      	blt.n	8003e8a <__swhatbuf_r+0x12>
 8003eb0:	9901      	ldr	r1, [sp, #4]
 8003eb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003eb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003eba:	4259      	negs	r1, r3
 8003ebc:	4159      	adcs	r1, r3
 8003ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ec2:	e7eb      	b.n	8003e9c <__swhatbuf_r+0x24>

08003ec4 <__smakebuf_r>:
 8003ec4:	898b      	ldrh	r3, [r1, #12]
 8003ec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ec8:	079d      	lsls	r5, r3, #30
 8003eca:	4606      	mov	r6, r0
 8003ecc:	460c      	mov	r4, r1
 8003ece:	d507      	bpl.n	8003ee0 <__smakebuf_r+0x1c>
 8003ed0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	6123      	str	r3, [r4, #16]
 8003ed8:	2301      	movs	r3, #1
 8003eda:	6163      	str	r3, [r4, #20]
 8003edc:	b003      	add	sp, #12
 8003ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee0:	ab01      	add	r3, sp, #4
 8003ee2:	466a      	mov	r2, sp
 8003ee4:	f7ff ffc8 	bl	8003e78 <__swhatbuf_r>
 8003ee8:	9f00      	ldr	r7, [sp, #0]
 8003eea:	4605      	mov	r5, r0
 8003eec:	4639      	mov	r1, r7
 8003eee:	4630      	mov	r0, r6
 8003ef0:	f7ff fbba 	bl	8003668 <_malloc_r>
 8003ef4:	b948      	cbnz	r0, 8003f0a <__smakebuf_r+0x46>
 8003ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003efa:	059a      	lsls	r2, r3, #22
 8003efc:	d4ee      	bmi.n	8003edc <__smakebuf_r+0x18>
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	f043 0302 	orr.w	r3, r3, #2
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	e7e2      	b.n	8003ed0 <__smakebuf_r+0xc>
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	6020      	str	r0, [r4, #0]
 8003f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	9b01      	ldr	r3, [sp, #4]
 8003f16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003f1a:	b15b      	cbz	r3, 8003f34 <__smakebuf_r+0x70>
 8003f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f20:	4630      	mov	r0, r6
 8003f22:	f000 f81d 	bl	8003f60 <_isatty_r>
 8003f26:	b128      	cbz	r0, 8003f34 <__smakebuf_r+0x70>
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	81a3      	strh	r3, [r4, #12]
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	431d      	orrs	r5, r3
 8003f38:	81a5      	strh	r5, [r4, #12]
 8003f3a:	e7cf      	b.n	8003edc <__smakebuf_r+0x18>

08003f3c <_fstat_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4d07      	ldr	r5, [pc, #28]	@ (8003f5c <_fstat_r+0x20>)
 8003f40:	2300      	movs	r3, #0
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	602b      	str	r3, [r5, #0]
 8003f4a:	f7fc fe25 	bl	8000b98 <_fstat>
 8003f4e:	1c43      	adds	r3, r0, #1
 8003f50:	d102      	bne.n	8003f58 <_fstat_r+0x1c>
 8003f52:	682b      	ldr	r3, [r5, #0]
 8003f54:	b103      	cbz	r3, 8003f58 <_fstat_r+0x1c>
 8003f56:	6023      	str	r3, [r4, #0]
 8003f58:	bd38      	pop	{r3, r4, r5, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200006f4 	.word	0x200006f4

08003f60 <_isatty_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	4d06      	ldr	r5, [pc, #24]	@ (8003f7c <_isatty_r+0x1c>)
 8003f64:	2300      	movs	r3, #0
 8003f66:	4604      	mov	r4, r0
 8003f68:	4608      	mov	r0, r1
 8003f6a:	602b      	str	r3, [r5, #0]
 8003f6c:	f7fc fe24 	bl	8000bb8 <_isatty>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d102      	bne.n	8003f7a <_isatty_r+0x1a>
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	b103      	cbz	r3, 8003f7a <_isatty_r+0x1a>
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	200006f4 	.word	0x200006f4

08003f80 <_sbrk_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d06      	ldr	r5, [pc, #24]	@ (8003f9c <_sbrk_r+0x1c>)
 8003f84:	2300      	movs	r3, #0
 8003f86:	4604      	mov	r4, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	602b      	str	r3, [r5, #0]
 8003f8c:	f7fc fe2c 	bl	8000be8 <_sbrk>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_sbrk_r+0x1a>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_sbrk_r+0x1a>
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	200006f4 	.word	0x200006f4

08003fa0 <_init>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	bf00      	nop
 8003fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa6:	bc08      	pop	{r3}
 8003fa8:	469e      	mov	lr, r3
 8003faa:	4770      	bx	lr

08003fac <_fini>:
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	bf00      	nop
 8003fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb2:	bc08      	pop	{r3}
 8003fb4:	469e      	mov	lr, r3
 8003fb6:	4770      	bx	lr
