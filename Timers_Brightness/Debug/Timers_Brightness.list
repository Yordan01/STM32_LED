
Timers_Brightness.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b68  08003b68  00004b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b80  08003b80  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b80  08003b80  00004b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b88  08003b88  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b88  08003b88  00004b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b8c  08003b8c  00004b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  2000000c  08003b9c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08003b9c  000055a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001064b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022da  00000000  00000000  00015687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00017968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bee  00000000  00000000  000188a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f763  00000000  00000000  00019496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a4d  00000000  00000000  00038bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c19a4  00000000  00000000  0004b646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cfea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004190  00000000  00000000  0010d030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001111c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003b50 	.word	0x08003b50

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003b50 	.word	0x08003b50

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fbd7 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f837 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f96f 	bl	80007e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000506:	f000 f913 	bl	8000730 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800050a:	f000 f93b 	bl	8000784 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 800050e:	f000 f899 	bl	8000644 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000512:	2104      	movs	r1, #4
 8000514:	4814      	ldr	r0, [pc, #80]	@ (8000568 <main+0x74>)
 8000516:	f001 ff47 	bl	80023a8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int8_t pwm_change = 1;
 800051a:	2301      	movs	r3, #1
 800051c:	73fb      	strb	r3, [r7, #15]
  uint16_t pwm_value = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	81bb      	strh	r3, [r7, #12]
  uint32_t now = 0, next_change = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]

  while (1)
  {

  	now = uwTick;
 800052a:	4b10      	ldr	r3, [pc, #64]	@ (800056c <main+0x78>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	607b      	str	r3, [r7, #4]

  	if (now >= next_change){
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	429a      	cmp	r2, r3
 8000536:	d3f8      	bcc.n	800052a <main+0x36>

  		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_value);
 8000538:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <main+0x74>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	89ba      	ldrh	r2, [r7, #12]
 800053e:	639a      	str	r2, [r3, #56]	@ 0x38

			pwm_value += pwm_change;
 8000540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000544:	b29a      	uxth	r2, r3
 8000546:	89bb      	ldrh	r3, [r7, #12]
 8000548:	4413      	add	r3, r2
 800054a:	81bb      	strh	r3, [r7, #12]

  		if (pwm_value == 0) pwm_change = 1;
 800054c:	89bb      	ldrh	r3, [r7, #12]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d101      	bne.n	8000556 <main+0x62>
 8000552:	2301      	movs	r3, #1
 8000554:	73fb      	strb	r3, [r7, #15]
  		if (pwm_value == 100) pwm_change = -1;
 8000556:	89bb      	ldrh	r3, [r7, #12]
 8000558:	2b64      	cmp	r3, #100	@ 0x64
 800055a:	d101      	bne.n	8000560 <main+0x6c>
 800055c:	23ff      	movs	r3, #255	@ 0xff
 800055e:	73fb      	strb	r3, [r7, #15]

  		next_change = now + 20;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3314      	adds	r3, #20
 8000564:	60bb      	str	r3, [r7, #8]
  	now = uwTick;
 8000566:	e7e0      	b.n	800052a <main+0x36>
 8000568:	20000028 	.word	0x20000028
 800056c:	2000059c 	.word	0x2000059c

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	@ 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2234      	movs	r2, #52	@ 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fab9 	bl	8003af6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b28      	ldr	r3, [pc, #160]	@ (800063c <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	4a27      	ldr	r2, [pc, #156]	@ (800063c <SystemClock_Config+0xcc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a4:	4b25      	ldr	r3, [pc, #148]	@ (800063c <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a21      	ldr	r2, [pc, #132]	@ (8000640 <SystemClock_Config+0xd0>)
 80005ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005e4:	2364      	movs	r3, #100	@ 0x64
 80005e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fba9 	bl	8001d50 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000604:	f000 f99c 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	2103      	movs	r1, #3
 8000624:	4618      	mov	r0, r3
 8000626:	f000 ffa5 	bl	8001574 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000630:	f000 f986 	bl	8000940 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3750      	adds	r7, #80	@ 0x50
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08e      	sub	sp, #56	@ 0x38
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
 8000670:	615a      	str	r2, [r3, #20]
 8000672:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000674:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <MX_TIM4_Init+0xe4>)
 8000676:	4a2d      	ldr	r2, [pc, #180]	@ (800072c <MX_TIM4_Init+0xe8>)
 8000678:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 800067a:	4b2b      	ldr	r3, [pc, #172]	@ (8000728 <MX_TIM4_Init+0xe4>)
 800067c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000680:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <MX_TIM4_Init+0xe4>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <MX_TIM4_Init+0xe4>)
 800068a:	2263      	movs	r2, #99	@ 0x63
 800068c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <MX_TIM4_Init+0xe4>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000694:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <MX_TIM4_Init+0xe4>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800069a:	4823      	ldr	r0, [pc, #140]	@ (8000728 <MX_TIM4_Init+0xe4>)
 800069c:	f001 fddc 	bl	8002258 <HAL_TIM_Base_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80006a6:	f000 f94b 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80006b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006b4:	4619      	mov	r1, r3
 80006b6:	481c      	ldr	r0, [pc, #112]	@ (8000728 <MX_TIM4_Init+0xe4>)
 80006b8:	f002 f800 	bl	80026bc <HAL_TIM_ConfigClockSource>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80006c2:	f000 f93d 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80006c6:	4818      	ldr	r0, [pc, #96]	@ (8000728 <MX_TIM4_Init+0xe4>)
 80006c8:	f001 fe15 	bl	80022f6 <HAL_TIM_PWM_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80006d2:	f000 f935 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	@ (8000728 <MX_TIM4_Init+0xe4>)
 80006e6:	f002 fbcd 	bl	8002e84 <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80006f0:	f000 f926 	bl	8000940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f4:	2360      	movs	r3, #96	@ 0x60
 80006f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2204      	movs	r2, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4807      	ldr	r0, [pc, #28]	@ (8000728 <MX_TIM4_Init+0xe4>)
 800070c:	f001 ff14 	bl	8002538 <HAL_TIM_PWM_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000716:	f000 f913 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800071a:	4803      	ldr	r0, [pc, #12]	@ (8000728 <MX_TIM4_Init+0xe4>)
 800071c:	f000 f960 	bl	80009e0 <HAL_TIM_MspPostInit>

}
 8000720:	bf00      	nop
 8000722:	3738      	adds	r7, #56	@ 0x38
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000028 	.word	0x20000028
 800072c:	40000800 	.word	0x40000800

08000730 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USART3_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_USART3_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_USART3_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USART3_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USART3_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USART3_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USART3_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USART3_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_USART3_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_USART3_UART_Init+0x4c>)
 8000768:	f002 fc08 	bl	8002f7c <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f8e5 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000070 	.word	0x20000070
 8000780:	40004800 	.word	0x40004800

08000784 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800078a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800078e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000790:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000792:	2206      	movs	r2, #6
 8000794:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000798:	2202      	movs	r2, #2
 800079a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800079c:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007bc:	2201      	movs	r2, #1
 80007be:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007ce:	f000 fd96 	bl	80012fe <HAL_PCD_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80007d8:	f000 f8b2 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000b8 	.word	0x200000b8

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	@ 0x30
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
 80007fe:	4b4c      	ldr	r3, [pc, #304]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a4b      	ldr	r2, [pc, #300]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b49      	ldr	r3, [pc, #292]	@ (8000930 <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	4b45      	ldr	r3, [pc, #276]	@ (8000930 <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a44      	ldr	r2, [pc, #272]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b42      	ldr	r3, [pc, #264]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b3e      	ldr	r3, [pc, #248]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a3d      	ldr	r2, [pc, #244]	@ (8000930 <MX_GPIO_Init+0x14c>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b3b      	ldr	r3, [pc, #236]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b37      	ldr	r3, [pc, #220]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a36      	ldr	r2, [pc, #216]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b34      	ldr	r3, [pc, #208]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b30      	ldr	r3, [pc, #192]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a2f      	ldr	r2, [pc, #188]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b2d      	ldr	r3, [pc, #180]	@ (8000930 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <MX_GPIO_Init+0x14c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a28      	ldr	r2, [pc, #160]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b26      	ldr	r3, [pc, #152]	@ (8000930 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008a8:	4822      	ldr	r0, [pc, #136]	@ (8000934 <MX_GPIO_Init+0x150>)
 80008aa:	f000 fd0f 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	@ 0x40
 80008b2:	4821      	ldr	r0, [pc, #132]	@ (8000938 <MX_GPIO_Init+0x154>)
 80008b4:	f000 fd0a 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481b      	ldr	r0, [pc, #108]	@ (800093c <MX_GPIO_Init+0x158>)
 80008d0:	f000 fb68 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008d4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4811      	ldr	r0, [pc, #68]	@ (8000934 <MX_GPIO_Init+0x150>)
 80008ee:	f000 fb59 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f2:	2340      	movs	r3, #64	@ 0x40
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	480b      	ldr	r0, [pc, #44]	@ (8000938 <MX_GPIO_Init+0x154>)
 800090a:	f000 fb4b 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800090e:	2380      	movs	r3, #128	@ 0x80
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_GPIO_Init+0x154>)
 8000922:	f000 fb3f 	bl	8000fa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	@ 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020400 	.word	0x40020400
 8000938:	40021800 	.word	0x40021800
 800093c:	40020800 	.word	0x40020800

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	@ 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0b      	ldr	r2, [pc, #44]	@ (80009d8 <HAL_TIM_Base_MspInit+0x3c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d10d      	bne.n	80009ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <HAL_TIM_Base_MspInit+0x40>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a09      	ldr	r2, [pc, #36]	@ (80009dc <HAL_TIM_Base_MspInit+0x40>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <HAL_TIM_Base_MspInit+0x40>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40000800 	.word	0x40000800
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <HAL_TIM_MspPostInit+0x68>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d11d      	bne.n	8000a3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <HAL_TIM_MspPostInit+0x6c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a10      	ldr	r2, [pc, #64]	@ (8000a4c <HAL_TIM_MspPostInit+0x6c>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <HAL_TIM_MspPostInit+0x6c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a1e:	2380      	movs	r3, #128	@ 0x80
 8000a20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <HAL_TIM_MspPostInit+0x70>)
 8000a3a:	f000 fab3 	bl	8000fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3720      	adds	r7, #32
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40000800 	.word	0x40000800
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020400 	.word	0x40020400

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	@ (8000ad8 <HAL_UART_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12c      	bne.n	8000ad0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	4a17      	ldr	r2, [pc, #92]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_UART_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <HAL_UART_MspInit+0x8c>)
 8000acc:	f000 fa6a 	bl	8000fa4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40004800 	.word	0x40004800
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020c00 	.word	0x40020c00

08000ae4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b098      	sub	sp, #96	@ 0x60
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	223c      	movs	r2, #60	@ 0x3c
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fff6 	bl	8003af6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b12:	d156      	bne.n	8000bc2 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b14:	23c0      	movs	r3, #192	@ 0xc0
 8000b16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLI2SQ;
 8000b24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b28:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 ff3e 	bl	80019b4 <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 8000b3e:	f7ff feff 	bl	8000940 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <HAL_PCD_MspInit+0xe8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a20      	ldr	r2, [pc, #128]	@ (8000bcc <HAL_PCD_MspInit+0xe8>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <HAL_PCD_MspInit+0xe8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b5e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b70:	230a      	movs	r3, #10
 8000b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4815      	ldr	r0, [pc, #84]	@ (8000bd0 <HAL_PCD_MspInit+0xec>)
 8000b7c:	f000 fa12 	bl	8000fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b92:	4619      	mov	r1, r3
 8000b94:	480e      	ldr	r0, [pc, #56]	@ (8000bd0 <HAL_PCD_MspInit+0xec>)
 8000b96:	f000 fa05 	bl	8000fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <HAL_PCD_MspInit+0xe8>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000bcc <HAL_PCD_MspInit+0xe8>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba4:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_PCD_MspInit+0xe8>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bae:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_PCD_MspInit+0xe8>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb6:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <HAL_PCD_MspInit+0xe8>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3760      	adds	r7, #96	@ 0x60
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 f891 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f002 ff3f 	bl	8003b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fc33 	bl	80004f4 <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c90:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c9c:	08003b90 	.word	0x08003b90
  ldr r2, =_sbss
 8000ca0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca4:	200005a0 	.word	0x200005a0

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f931 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 f808 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fe34 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_InitTick+0x54>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_InitTick+0x58>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f93b 	bl	8000f8a <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00e      	b.n	8000d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d80a      	bhi.n	8000d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 f911 	bl	8000f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4a06      	ldr	r2, [pc, #24]	@ (8000d4c <HAL_InitTick+0x5c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000004 	.word	0x20000004

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	2000059c 	.word	0x2000059c

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <HAL_GetTick+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	2000059c 	.word	0x2000059c

08000d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff ffee 	bl	8000d78 <HAL_GetTick>
 8000d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da8:	d005      	beq.n	8000db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_Delay+0x44>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db6:	bf00      	nop
 8000db8:	f7ff ffde 	bl	8000d78 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d8f7      	bhi.n	8000db8 <HAL_Delay+0x28>
  {
  }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff8e 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff47 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff5c 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff8e 	bl	8000e90 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5d 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffb0 	bl	8000ef8 <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	@ 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e165      	b.n	800128c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 8154 	bne.w	8001286 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d005      	beq.n	8000ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d130      	bne.n	8001058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	f003 0201 	and.w	r2, r3, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b03      	cmp	r3, #3
 8001062:	d017      	beq.n	8001094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d123      	bne.n	80010e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	69b9      	ldr	r1, [r7, #24]
 80010e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0203 	and.w	r2, r3, #3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80ae 	beq.w	8001286 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b5d      	ldr	r3, [pc, #372]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a5c      	ldr	r2, [pc, #368]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b5a      	ldr	r3, [pc, #360]	@ (80012a4 <HAL_GPIO_Init+0x300>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001146:	4a58      	ldr	r2, [pc, #352]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4f      	ldr	r2, [pc, #316]	@ (80012ac <HAL_GPIO_Init+0x308>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x21a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4e      	ldr	r2, [pc, #312]	@ (80012b0 <HAL_GPIO_Init+0x30c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x216>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4d      	ldr	r2, [pc, #308]	@ (80012b4 <HAL_GPIO_Init+0x310>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x212>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4c      	ldr	r2, [pc, #304]	@ (80012b8 <HAL_GPIO_Init+0x314>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x20e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4b      	ldr	r2, [pc, #300]	@ (80012bc <HAL_GPIO_Init+0x318>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x20a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4a      	ldr	r2, [pc, #296]	@ (80012c0 <HAL_GPIO_Init+0x31c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x206>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a49      	ldr	r2, [pc, #292]	@ (80012c4 <HAL_GPIO_Init+0x320>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x202>
 80011a2:	2306      	movs	r3, #6
 80011a4:	e00c      	b.n	80011c0 <HAL_GPIO_Init+0x21c>
 80011a6:	2307      	movs	r3, #7
 80011a8:	e00a      	b.n	80011c0 <HAL_GPIO_Init+0x21c>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x21c>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x21c>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x21c>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x21c>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x21c>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4935      	ldr	r1, [pc, #212]	@ (80012a8 <HAL_GPIO_Init+0x304>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a31      	ldr	r2, [pc, #196]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b2f      	ldr	r3, [pc, #188]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a26      	ldr	r2, [pc, #152]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001232:	4b25      	ldr	r3, [pc, #148]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001256:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001280:	4a11      	ldr	r2, [pc, #68]	@ (80012c8 <HAL_GPIO_Init+0x324>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f ae96 	bls.w	8000fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40021400 	.word	0x40021400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af02      	add	r7, sp, #8
 8001304:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e108      	b.n	8001522 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fbda 	bl	8000ae4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800133e:	d102      	bne.n	8001346 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f002 f93e 	bl	80035cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7c1a      	ldrb	r2, [r3, #16]
 8001358:	f88d 2000 	strb.w	r2, [sp]
 800135c:	3304      	adds	r3, #4
 800135e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001360:	f002 f8d0 	bl	8003504 <USB_CoreInit>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2202      	movs	r2, #2
 800136e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0d5      	b.n	8001522 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f002 f936 	bl	80035ee <USB_SetCurrentMode>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2202      	movs	r2, #2
 800138c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0c6      	b.n	8001522 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e04a      	b.n	8001430 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3315      	adds	r3, #21
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	3314      	adds	r3, #20
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	b298      	uxth	r0, r3
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	332e      	adds	r3, #46	@ 0x2e
 80013d6:	4602      	mov	r2, r0
 80013d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	3318      	adds	r3, #24
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	331c      	adds	r3, #28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	3320      	adds	r3, #32
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3324      	adds	r3, #36	@ 0x24
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	3301      	adds	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	791b      	ldrb	r3, [r3, #4]
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	429a      	cmp	r2, r3
 8001438:	d3af      	bcc.n	800139a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e044      	b.n	80014ca <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	3301      	adds	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	791b      	ldrb	r3, [r3, #4]
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3b5      	bcc.n	8001440 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7c1a      	ldrb	r2, [r3, #16]
 80014dc:	f88d 2000 	strb.w	r2, [sp]
 80014e0:	3304      	adds	r3, #4
 80014e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e4:	f002 f8d0 	bl	8003688 <USB_DevInit>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2202      	movs	r2, #2
 80014f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e013      	b.n	8001522 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7b1b      	ldrb	r3, [r3, #12]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d102      	bne.n	8001516 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f80a 	bl	800152a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fa8b 	bl	8003a36 <USB_DevDisconnect>

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155c:	f043 0303 	orr.w	r3, r3, #3
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0cc      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b68      	ldr	r3, [pc, #416]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d90c      	bls.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b65      	ldr	r3, [pc, #404]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b63      	ldr	r3, [pc, #396]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0b8      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c8:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a58      	ldr	r2, [pc, #352]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e0:	4b53      	ldr	r3, [pc, #332]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a52      	ldr	r2, [pc, #328]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ec:	4b50      	ldr	r3, [pc, #320]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	494d      	ldr	r1, [pc, #308]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d044      	beq.n	8001694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b47      	ldr	r3, [pc, #284]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d119      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e07f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d003      	beq.n	8001632 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162e:	2b03      	cmp	r3, #3
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	4b3f      	ldr	r3, [pc, #252]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e06f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	4b3b      	ldr	r3, [pc, #236]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e067      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001652:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f023 0203 	bic.w	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4934      	ldr	r1, [pc, #208]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001664:	f7ff fb88 	bl	8000d78 <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	e00a      	b.n	8001682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166c:	f7ff fb84 	bl	8000d78 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e04f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	4b2b      	ldr	r3, [pc, #172]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 020c 	and.w	r2, r3, #12
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	429a      	cmp	r2, r3
 8001692:	d1eb      	bne.n	800166c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001694:	4b25      	ldr	r3, [pc, #148]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d20c      	bcs.n	80016bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e032      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c8:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4916      	ldr	r1, [pc, #88]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	490e      	ldr	r1, [pc, #56]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016fa:	f000 f821 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	490a      	ldr	r1, [pc, #40]	@ (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	5ccb      	ldrb	r3, [r1, r3]
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <HAL_RCC_ClockConfig+0x1c8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fae8 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00
 8001730:	40023800 	.word	0x40023800
 8001734:	08003b68 	.word	0x08003b68
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001744:	b094      	sub	sp, #80	@ 0x50
 8001746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001758:	4b79      	ldr	r3, [pc, #484]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d00d      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x40>
 8001764:	2b08      	cmp	r3, #8
 8001766:	f200 80e1 	bhi.w	800192c <HAL_RCC_GetSysClockFreq+0x1ec>
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x34>
 800176e:	2b04      	cmp	r3, #4
 8001770:	d003      	beq.n	800177a <HAL_RCC_GetSysClockFreq+0x3a>
 8001772:	e0db      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001774:	4b73      	ldr	r3, [pc, #460]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x204>)
 8001776:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001778:	e0db      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800177a:	4b73      	ldr	r3, [pc, #460]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x208>)
 800177c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800177e:	e0d8      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001780:	4b6f      	ldr	r3, [pc, #444]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800178a:	4b6d      	ldr	r3, [pc, #436]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d063      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001796:	4b6a      	ldr	r3, [pc, #424]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	099b      	lsrs	r3, r3, #6
 800179c:	2200      	movs	r2, #0
 800179e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017aa:	2300      	movs	r3, #0
 80017ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017b2:	4622      	mov	r2, r4
 80017b4:	462b      	mov	r3, r5
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	0159      	lsls	r1, r3, #5
 80017c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c4:	0150      	lsls	r0, r2, #5
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4621      	mov	r1, r4
 80017cc:	1a51      	subs	r1, r2, r1
 80017ce:	6139      	str	r1, [r7, #16]
 80017d0:	4629      	mov	r1, r5
 80017d2:	eb63 0301 	sbc.w	r3, r3, r1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017e4:	4659      	mov	r1, fp
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	4651      	mov	r1, sl
 80017ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ee:	4651      	mov	r1, sl
 80017f0:	018a      	lsls	r2, r1, #6
 80017f2:	4651      	mov	r1, sl
 80017f4:	ebb2 0801 	subs.w	r8, r2, r1
 80017f8:	4659      	mov	r1, fp
 80017fa:	eb63 0901 	sbc.w	r9, r3, r1
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800180a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800180e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001812:	4690      	mov	r8, r2
 8001814:	4699      	mov	r9, r3
 8001816:	4623      	mov	r3, r4
 8001818:	eb18 0303 	adds.w	r3, r8, r3
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	462b      	mov	r3, r5
 8001820:	eb49 0303 	adc.w	r3, r9, r3
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001832:	4629      	mov	r1, r5
 8001834:	024b      	lsls	r3, r1, #9
 8001836:	4621      	mov	r1, r4
 8001838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800183c:	4621      	mov	r1, r4
 800183e:	024a      	lsls	r2, r1, #9
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001846:	2200      	movs	r2, #0
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800184a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800184c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001850:	f7fe fcd8 	bl	8000204 <__aeabi_uldivmod>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4613      	mov	r3, r2
 800185a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800185c:	e058      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185e:	4b38      	ldr	r3, [pc, #224]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	099b      	lsrs	r3, r3, #6
 8001864:	2200      	movs	r2, #0
 8001866:	4618      	mov	r0, r3
 8001868:	4611      	mov	r1, r2
 800186a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800186e:	623b      	str	r3, [r7, #32]
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
 8001874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001878:	4642      	mov	r2, r8
 800187a:	464b      	mov	r3, r9
 800187c:	f04f 0000 	mov.w	r0, #0
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	0159      	lsls	r1, r3, #5
 8001886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188a:	0150      	lsls	r0, r2, #5
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4641      	mov	r1, r8
 8001892:	ebb2 0a01 	subs.w	sl, r2, r1
 8001896:	4649      	mov	r1, r9
 8001898:	eb63 0b01 	sbc.w	fp, r3, r1
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018b0:	ebb2 040a 	subs.w	r4, r2, sl
 80018b4:	eb63 050b 	sbc.w	r5, r3, fp
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	00eb      	lsls	r3, r5, #3
 80018c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c6:	00e2      	lsls	r2, r4, #3
 80018c8:	4614      	mov	r4, r2
 80018ca:	461d      	mov	r5, r3
 80018cc:	4643      	mov	r3, r8
 80018ce:	18e3      	adds	r3, r4, r3
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	464b      	mov	r3, r9
 80018d4:	eb45 0303 	adc.w	r3, r5, r3
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018e6:	4629      	mov	r1, r5
 80018e8:	028b      	lsls	r3, r1, #10
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f0:	4621      	mov	r1, r4
 80018f2:	028a      	lsls	r2, r1, #10
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018fa:	2200      	movs	r2, #0
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	61fa      	str	r2, [r7, #28]
 8001900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001904:	f7fe fc7e 	bl	8000204 <__aeabi_uldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4613      	mov	r3, r2
 800190e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	0c1b      	lsrs	r3, r3, #16
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	3301      	adds	r3, #1
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001920:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800192a:	e002      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x204>)
 800192e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001934:	4618      	mov	r0, r3
 8001936:	3750      	adds	r7, #80	@ 0x50
 8001938:	46bd      	mov	sp, r7
 800193a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	00f42400 	.word	0x00f42400
 8001948:	007a1200 	.word	0x007a1200

0800194c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <HAL_RCC_GetHCLKFreq+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000000 	.word	0x20000000

08001964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001968:	f7ff fff0 	bl	800194c <HAL_RCC_GetHCLKFreq>
 800196c:	4602      	mov	r2, r0
 800196e:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	4903      	ldr	r1, [pc, #12]	@ (8001988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	08003b78 	.word	0x08003b78

0800198c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001990:	f7ff ffdc 	bl	800194c <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	0b5b      	lsrs	r3, r3, #13
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	@ (80019b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	08003b78 	.word	0x08003b78

080019b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d010      	beq.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80019d4:	4b87      	ldr	r3, [pc, #540]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80019d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019da:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	4984      	ldr	r1, [pc, #528]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80019f2:	2301      	movs	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d010      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a02:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a08:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4978      	ldr	r1, [pc, #480]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8001a20:	2301      	movs	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 8083 	beq.w	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a42:	4b6c      	ldr	r3, [pc, #432]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a69      	ldr	r2, [pc, #420]	@ (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a5a:	f7ff f98d 	bl	8000d78 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a62:	f7ff f989 	bl	8000d78 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e162      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a74:	4b60      	ldr	r3, [pc, #384]	@ (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a80:	4b5c      	ldr	r3, [pc, #368]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a88:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02f      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d028      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a9e:	4b55      	ldr	r3, [pc, #340]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001aa6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aa8:	4b54      	ldr	r3, [pc, #336]	@ (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001aae:	4b53      	ldr	r3, [pc, #332]	@ (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001aba:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d114      	bne.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f957 	bl	8000d78 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff f953 	bl	8000d78 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e12a      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ee      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001afc:	d10d      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001afe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001b0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b12:	4938      	ldr	r1, [pc, #224]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]
 8001b18:	e005      	b.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8001b1a:	4b36      	ldr	r3, [pc, #216]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	4a35      	ldr	r2, [pc, #212]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b20:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001b24:	6093      	str	r3, [r2, #8]
 8001b26:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b32:	4930      	ldr	r1, [pc, #192]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00a      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b5a:	4b26      	ldr	r3, [pc, #152]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b60:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b68:	4922      	ldr	r1, [pc, #136]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d011      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b82:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8a:	491a      	ldr	r1, [pc, #104]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00a      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001bac:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	490e      	ldr	r1, [pc, #56]	@ (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d004      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b80      	cmp	r3, #128	@ 0x80
 8001bce:	f040 8091 	bne.w	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bd8:	f7ff f8ce 	bl	8000d78 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bde:	e013      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001be0:	f7ff f8ca 	bl	8000d78 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d90c      	bls.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0a3      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	42470e40 	.word	0x42470e40
 8001c00:	424711e0 	.word	0x424711e0
 8001c04:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c08:	4b4e      	ldr	r3, [pc, #312]	@ (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e5      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001c14:	4a4c      	ldr	r2, [pc, #304]	@ (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c1a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d023      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d019      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c58:	d00e      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d019      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d115      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c76:	d110      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	019b      	lsls	r3, r3, #6
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	071b      	lsls	r3, r3, #28
 8001c92:	492c      	ldr	r1, [pc, #176]	@ (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d010      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	019b      	lsls	r3, r3, #6
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	061b      	lsls	r3, r3, #24
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	071b      	lsls	r3, r3, #28
 8001cc0:	4920      	ldr	r1, [pc, #128]	@ (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cc8:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cce:	f7ff f853 	bl	8000d78 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cd6:	f7ff f84f 	bl	8000d78 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e028      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ce8:	4b16      	ldr	r3, [pc, #88]	@ (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00a      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d00:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0e:	490d      	ldr	r1, [pc, #52]	@ (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d28:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	4904      	ldr	r1, [pc, #16]	@ (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	424710d8 	.word	0x424710d8
 8001d4c:	42470068 	.word	0x42470068

08001d50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e273      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d075      	beq.n	8001e5a <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d6e:	4b88      	ldr	r3, [pc, #544]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d00c      	beq.n	8001d94 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d7a:	4b85      	ldr	r3, [pc, #532]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d112      	bne.n	8001dac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d86:	4b82      	ldr	r3, [pc, #520]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d92:	d10b      	bne.n	8001dac <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	4b7e      	ldr	r3, [pc, #504]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d05b      	beq.n	8001e58 <HAL_RCC_OscConfig+0x108>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d157      	bne.n	8001e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e24e      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001db4:	d106      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x74>
 8001db6:	4b76      	ldr	r3, [pc, #472]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a75      	ldr	r2, [pc, #468]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e01d      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x98>
 8001dce:	4b70      	ldr	r3, [pc, #448]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6f      	ldr	r2, [pc, #444]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b6d      	ldr	r3, [pc, #436]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a6c      	ldr	r2, [pc, #432]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0xb0>
 8001de8:	4b69      	ldr	r3, [pc, #420]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a68      	ldr	r2, [pc, #416]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b66      	ldr	r3, [pc, #408]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a65      	ldr	r2, [pc, #404]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe ffb6 	bl	8000d78 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7fe ffb2 	bl	8000d78 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	@ 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e213      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b5b      	ldr	r3, [pc, #364]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xc0>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe ffa2 	bl	8000d78 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7fe ff9e 	bl	8000d78 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	@ 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e1ff      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	4b51      	ldr	r3, [pc, #324]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0xe8>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d063      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e72:	4b47      	ldr	r3, [pc, #284]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d11c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7e:	4b44      	ldr	r3, [pc, #272]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d116      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	4b41      	ldr	r3, [pc, #260]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x152>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e1d3      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4937      	ldr	r1, [pc, #220]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	e03a      	b.n	8001f2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec0:	4b34      	ldr	r3, [pc, #208]	@ (8001f94 <HAL_RCC_OscConfig+0x244>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7fe ff57 	bl	8000d78 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7fe ff53 	bl	8000d78 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e1b4      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4925      	ldr	r1, [pc, #148]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e015      	b.n	8001f2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f02:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <HAL_RCC_OscConfig+0x244>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7fe ff36 	bl	8000d78 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f10:	f7fe ff32 	bl	8000d78 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e193      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d036      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d016      	beq.n	8001f70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <HAL_RCC_OscConfig+0x248>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7fe ff16 	bl	8000d78 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7fe ff12 	bl	8000d78 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e173      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_RCC_OscConfig+0x240>)
 8001f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x200>
 8001f6e:	e01b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f70:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_RCC_OscConfig+0x248>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f76:	f7fe feff 	bl	8000d78 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	e00e      	b.n	8001f9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7e:	f7fe fefb 	bl	8000d78 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d907      	bls.n	8001f9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e15c      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
 8001f90:	40023800 	.word	0x40023800
 8001f94:	42470000 	.word	0x42470000
 8001f98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	4b8a      	ldr	r3, [pc, #552]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8001f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1ea      	bne.n	8001f7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8097 	beq.w	80020e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fba:	4b83      	ldr	r3, [pc, #524]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	4b7f      	ldr	r3, [pc, #508]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	4a7e      	ldr	r2, [pc, #504]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe6:	4b79      	ldr	r3, [pc, #484]	@ (80021cc <HAL_RCC_OscConfig+0x47c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d118      	bne.n	8002024 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff2:	4b76      	ldr	r3, [pc, #472]	@ (80021cc <HAL_RCC_OscConfig+0x47c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a75      	ldr	r2, [pc, #468]	@ (80021cc <HAL_RCC_OscConfig+0x47c>)
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffe:	f7fe febb 	bl	8000d78 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002006:	f7fe feb7 	bl	8000d78 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e118      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	4b6c      	ldr	r3, [pc, #432]	@ (80021cc <HAL_RCC_OscConfig+0x47c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x2ea>
 800202c:	4b66      	ldr	r3, [pc, #408]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002030:	4a65      	ldr	r2, [pc, #404]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6713      	str	r3, [r2, #112]	@ 0x70
 8002038:	e01c      	b.n	8002074 <HAL_RCC_OscConfig+0x324>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b05      	cmp	r3, #5
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x30c>
 8002042:	4b61      	ldr	r3, [pc, #388]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	4a60      	ldr	r2, [pc, #384]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6713      	str	r3, [r2, #112]	@ 0x70
 800204e:	4b5e      	ldr	r3, [pc, #376]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	4a5d      	ldr	r2, [pc, #372]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6713      	str	r3, [r2, #112]	@ 0x70
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0x324>
 800205c:	4b5a      	ldr	r3, [pc, #360]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002060:	4a59      	ldr	r2, [pc, #356]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	6713      	str	r3, [r2, #112]	@ 0x70
 8002068:	4b57      	ldr	r3, [pc, #348]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206c:	4a56      	ldr	r2, [pc, #344]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 800206e:	f023 0304 	bic.w	r3, r3, #4
 8002072:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d015      	beq.n	80020a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7fe fe7c 	bl	8000d78 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7fe fe78 	bl	8000d78 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0d7      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209a:	4b4b      	ldr	r3, [pc, #300]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0ee      	beq.n	8002084 <HAL_RCC_OscConfig+0x334>
 80020a6:	e014      	b.n	80020d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7fe fe66 	bl	8000d78 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7fe fe62 	bl	8000d78 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e0c1      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c6:	4b40      	ldr	r3, [pc, #256]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ee      	bne.n	80020b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d8:	4b3b      	ldr	r3, [pc, #236]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	4a3a      	ldr	r2, [pc, #232]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 80020de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80ad 	beq.w	8002248 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ee:	4b36      	ldr	r3, [pc, #216]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d060      	beq.n	80021bc <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d145      	bne.n	800218e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b33      	ldr	r3, [pc, #204]	@ (80021d0 <HAL_RCC_OscConfig+0x480>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe fe36 	bl	8000d78 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7fe fe32 	bl	8000d78 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e093      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	019b      	lsls	r3, r3, #6
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	3b01      	subs	r3, #1
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	061b      	lsls	r3, r3, #24
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	071b      	lsls	r3, r3, #28
 800215a:	491b      	ldr	r1, [pc, #108]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_RCC_OscConfig+0x480>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7fe fe07 	bl	8000d78 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7fe fe03 	bl	8000d78 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e064      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x41e>
 800218c:	e05c      	b.n	8002248 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <HAL_RCC_OscConfig+0x480>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe fdf0 	bl	8000d78 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7fe fdec 	bl	8000d78 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e04d      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_RCC_OscConfig+0x478>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x44c>
 80021ba:	e045      	b.n	8002248 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e040      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <HAL_RCC_OscConfig+0x504>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d030      	beq.n	8002244 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d129      	bne.n	8002244 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d122      	bne.n	8002244 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800220a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800220c:	4293      	cmp	r3, r2
 800220e:	d119      	bne.n	8002244 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	3b01      	subs	r3, #1
 800221e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d10f      	bne.n	8002244 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d107      	bne.n	8002244 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e041      	b.n	80022ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fb8c 	bl	800099c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f000 fad8 	bl	800284c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e041      	b.n	800238c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f839 	bl	8002394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	4619      	mov	r1, r3
 8002334:	4610      	mov	r0, r2
 8002336:	f000 fa89 	bl	800284c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_TIM_PWM_Start+0x24>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	bf14      	ite	ne
 80023c4:	2301      	movne	r3, #1
 80023c6:	2300      	moveq	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e022      	b.n	8002412 <HAL_TIM_PWM_Start+0x6a>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d109      	bne.n	80023e6 <HAL_TIM_PWM_Start+0x3e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	e015      	b.n	8002412 <HAL_TIM_PWM_Start+0x6a>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d109      	bne.n	8002400 <HAL_TIM_PWM_Start+0x58>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e008      	b.n	8002412 <HAL_TIM_PWM_Start+0x6a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	bf14      	ite	ne
 800240c:	2301      	movne	r3, #1
 800240e:	2300      	moveq	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e07c      	b.n	8002514 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <HAL_TIM_PWM_Start+0x82>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002428:	e013      	b.n	8002452 <HAL_TIM_PWM_Start+0xaa>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b04      	cmp	r3, #4
 800242e:	d104      	bne.n	800243a <HAL_TIM_PWM_Start+0x92>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002438:	e00b      	b.n	8002452 <HAL_TIM_PWM_Start+0xaa>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d104      	bne.n	800244a <HAL_TIM_PWM_Start+0xa2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002448:	e003      	b.n	8002452 <HAL_TIM_PWM_Start+0xaa>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2201      	movs	r2, #1
 8002458:	6839      	ldr	r1, [r7, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fcec 	bl	8002e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2d      	ldr	r2, [pc, #180]	@ (800251c <HAL_TIM_PWM_Start+0x174>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_TIM_PWM_Start+0xcc>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2c      	ldr	r2, [pc, #176]	@ (8002520 <HAL_TIM_PWM_Start+0x178>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d101      	bne.n	8002478 <HAL_TIM_PWM_Start+0xd0>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_TIM_PWM_Start+0xd2>
 8002478:	2300      	movs	r3, #0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800248c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a22      	ldr	r2, [pc, #136]	@ (800251c <HAL_TIM_PWM_Start+0x174>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d022      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024a0:	d01d      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002524 <HAL_TIM_PWM_Start+0x17c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d018      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002528 <HAL_TIM_PWM_Start+0x180>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1c      	ldr	r2, [pc, #112]	@ (800252c <HAL_TIM_PWM_Start+0x184>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00e      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a16      	ldr	r2, [pc, #88]	@ (8002520 <HAL_TIM_PWM_Start+0x178>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d009      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a18      	ldr	r2, [pc, #96]	@ (8002530 <HAL_TIM_PWM_Start+0x188>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a16      	ldr	r2, [pc, #88]	@ (8002534 <HAL_TIM_PWM_Start+0x18c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d111      	bne.n	8002502 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d010      	beq.n	8002512 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002500:	e007      	b.n	8002512 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40010000 	.word	0x40010000
 8002520:	40010400 	.word	0x40010400
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800
 800252c:	40000c00 	.word	0x40000c00
 8002530:	40014000 	.word	0x40014000
 8002534:	40001800 	.word	0x40001800

08002538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002552:	2302      	movs	r3, #2
 8002554:	e0ae      	b.n	80026b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0c      	cmp	r3, #12
 8002562:	f200 809f 	bhi.w	80026a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002566:	a201      	add	r2, pc, #4	@ (adr r2, 800256c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	080025a1 	.word	0x080025a1
 8002570:	080026a5 	.word	0x080026a5
 8002574:	080026a5 	.word	0x080026a5
 8002578:	080026a5 	.word	0x080026a5
 800257c:	080025e1 	.word	0x080025e1
 8002580:	080026a5 	.word	0x080026a5
 8002584:	080026a5 	.word	0x080026a5
 8002588:	080026a5 	.word	0x080026a5
 800258c:	08002623 	.word	0x08002623
 8002590:	080026a5 	.word	0x080026a5
 8002594:	080026a5 	.word	0x080026a5
 8002598:	080026a5 	.word	0x080026a5
 800259c:	08002663 	.word	0x08002663
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f9fc 	bl	80029a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0208 	orr.w	r2, r2, #8
 80025ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0204 	bic.w	r2, r2, #4
 80025ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6999      	ldr	r1, [r3, #24]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	619a      	str	r2, [r3, #24]
      break;
 80025de:	e064      	b.n	80026aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fa4c 	bl	8002a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6999      	ldr	r1, [r3, #24]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	021a      	lsls	r2, r3, #8
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	619a      	str	r2, [r3, #24]
      break;
 8002620:	e043      	b.n	80026aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 faa1 	bl	8002b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69da      	ldr	r2, [r3, #28]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0208 	orr.w	r2, r2, #8
 800263c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0204 	bic.w	r2, r2, #4
 800264c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69d9      	ldr	r1, [r3, #28]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	61da      	str	r2, [r3, #28]
      break;
 8002660:	e023      	b.n	80026aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 faf5 	bl	8002c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800267c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69da      	ldr	r2, [r3, #28]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800268c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69d9      	ldr	r1, [r3, #28]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	021a      	lsls	r2, r3, #8
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	61da      	str	r2, [r3, #28]
      break;
 80026a2:	e002      	b.n	80026aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	75fb      	strb	r3, [r7, #23]
      break;
 80026a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_TIM_ConfigClockSource+0x1c>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e0b4      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x186>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002710:	d03e      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0xd4>
 8002712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002716:	f200 8087 	bhi.w	8002828 <HAL_TIM_ConfigClockSource+0x16c>
 800271a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271e:	f000 8086 	beq.w	800282e <HAL_TIM_ConfigClockSource+0x172>
 8002722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002726:	d87f      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b70      	cmp	r3, #112	@ 0x70
 800272a:	d01a      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0xa6>
 800272c:	2b70      	cmp	r3, #112	@ 0x70
 800272e:	d87b      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b60      	cmp	r3, #96	@ 0x60
 8002732:	d050      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x11a>
 8002734:	2b60      	cmp	r3, #96	@ 0x60
 8002736:	d877      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b50      	cmp	r3, #80	@ 0x50
 800273a:	d03c      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0xfa>
 800273c:	2b50      	cmp	r3, #80	@ 0x50
 800273e:	d873      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b40      	cmp	r3, #64	@ 0x40
 8002742:	d058      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0x13a>
 8002744:	2b40      	cmp	r3, #64	@ 0x40
 8002746:	d86f      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b30      	cmp	r3, #48	@ 0x30
 800274a:	d064      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	2b30      	cmp	r3, #48	@ 0x30
 800274e:	d86b      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b20      	cmp	r3, #32
 8002752:	d060      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x15a>
 8002754:	2b20      	cmp	r3, #32
 8002756:	d867      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d05c      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x15a>
 800275c:	2b10      	cmp	r3, #16
 800275e:	d05a      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x15a>
 8002760:	e062      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002772:	f000 fb41 	bl	8002df8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	609a      	str	r2, [r3, #8]
      break;
 800278e:	e04f      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027a0:	f000 fb2a 	bl	8002df8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027b2:	609a      	str	r2, [r3, #8]
      break;
 80027b4:	e03c      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	461a      	mov	r2, r3
 80027c4:	f000 fa9e 	bl	8002d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2150      	movs	r1, #80	@ 0x50
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 faf7 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 80027d4:	e02c      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e2:	461a      	mov	r2, r3
 80027e4:	f000 fabd 	bl	8002d62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2160      	movs	r1, #96	@ 0x60
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fae7 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 80027f4:	e01c      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	461a      	mov	r2, r3
 8002804:	f000 fa7e 	bl	8002d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2140      	movs	r1, #64	@ 0x40
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fad7 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002814:	e00c      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	4610      	mov	r0, r2
 8002822:	f000 face 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 8002826:	e003      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      break;
 800282c:	e000      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800282e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a46      	ldr	r2, [pc, #280]	@ (8002978 <TIM_Base_SetConfig+0x12c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d013      	beq.n	800288c <TIM_Base_SetConfig+0x40>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286a:	d00f      	beq.n	800288c <TIM_Base_SetConfig+0x40>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a43      	ldr	r2, [pc, #268]	@ (800297c <TIM_Base_SetConfig+0x130>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00b      	beq.n	800288c <TIM_Base_SetConfig+0x40>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a42      	ldr	r2, [pc, #264]	@ (8002980 <TIM_Base_SetConfig+0x134>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d007      	beq.n	800288c <TIM_Base_SetConfig+0x40>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a41      	ldr	r2, [pc, #260]	@ (8002984 <TIM_Base_SetConfig+0x138>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d003      	beq.n	800288c <TIM_Base_SetConfig+0x40>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a40      	ldr	r2, [pc, #256]	@ (8002988 <TIM_Base_SetConfig+0x13c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d108      	bne.n	800289e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a35      	ldr	r2, [pc, #212]	@ (8002978 <TIM_Base_SetConfig+0x12c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d02b      	beq.n	80028fe <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ac:	d027      	beq.n	80028fe <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a32      	ldr	r2, [pc, #200]	@ (800297c <TIM_Base_SetConfig+0x130>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d023      	beq.n	80028fe <TIM_Base_SetConfig+0xb2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a31      	ldr	r2, [pc, #196]	@ (8002980 <TIM_Base_SetConfig+0x134>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01f      	beq.n	80028fe <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a30      	ldr	r2, [pc, #192]	@ (8002984 <TIM_Base_SetConfig+0x138>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01b      	beq.n	80028fe <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002988 <TIM_Base_SetConfig+0x13c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d017      	beq.n	80028fe <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a2e      	ldr	r2, [pc, #184]	@ (800298c <TIM_Base_SetConfig+0x140>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002990 <TIM_Base_SetConfig+0x144>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00f      	beq.n	80028fe <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002994 <TIM_Base_SetConfig+0x148>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00b      	beq.n	80028fe <TIM_Base_SetConfig+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002998 <TIM_Base_SetConfig+0x14c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a2a      	ldr	r2, [pc, #168]	@ (800299c <TIM_Base_SetConfig+0x150>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d003      	beq.n	80028fe <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a29      	ldr	r2, [pc, #164]	@ (80029a0 <TIM_Base_SetConfig+0x154>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d108      	bne.n	8002910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a10      	ldr	r2, [pc, #64]	@ (8002978 <TIM_Base_SetConfig+0x12c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d003      	beq.n	8002944 <TIM_Base_SetConfig+0xf8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a12      	ldr	r2, [pc, #72]	@ (8002988 <TIM_Base_SetConfig+0x13c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d103      	bne.n	800294c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d105      	bne.n	800296a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	611a      	str	r2, [r3, #16]
  }
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40010000 	.word	0x40010000
 800297c:	40000400 	.word	0x40000400
 8002980:	40000800 	.word	0x40000800
 8002984:	40000c00 	.word	0x40000c00
 8002988:	40010400 	.word	0x40010400
 800298c:	40014000 	.word	0x40014000
 8002990:	40014400 	.word	0x40014400
 8002994:	40014800 	.word	0x40014800
 8002998:	40001800 	.word	0x40001800
 800299c:	40001c00 	.word	0x40001c00
 80029a0:	40002000 	.word	0x40002000

080029a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f023 0201 	bic.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 0302 	bic.w	r3, r3, #2
 80029ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a20      	ldr	r2, [pc, #128]	@ (8002a7c <TIM_OC1_SetConfig+0xd8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d003      	beq.n	8002a08 <TIM_OC1_SetConfig+0x64>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a1f      	ldr	r2, [pc, #124]	@ (8002a80 <TIM_OC1_SetConfig+0xdc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10c      	bne.n	8002a22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f023 0308 	bic.w	r3, r3, #8
 8002a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f023 0304 	bic.w	r3, r3, #4
 8002a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a15      	ldr	r2, [pc, #84]	@ (8002a7c <TIM_OC1_SetConfig+0xd8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d003      	beq.n	8002a32 <TIM_OC1_SetConfig+0x8e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a14      	ldr	r2, [pc, #80]	@ (8002a80 <TIM_OC1_SetConfig+0xdc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d111      	bne.n	8002a56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	621a      	str	r2, [r3, #32]
}
 8002a70:	bf00      	nop
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40010400 	.word	0x40010400

08002a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f023 0210 	bic.w	r2, r3, #16
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f023 0320 	bic.w	r3, r3, #32
 8002ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a22      	ldr	r2, [pc, #136]	@ (8002b68 <TIM_OC2_SetConfig+0xe4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_OC2_SetConfig+0x68>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a21      	ldr	r2, [pc, #132]	@ (8002b6c <TIM_OC2_SetConfig+0xe8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d10d      	bne.n	8002b08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a17      	ldr	r2, [pc, #92]	@ (8002b68 <TIM_OC2_SetConfig+0xe4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <TIM_OC2_SetConfig+0x94>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a16      	ldr	r2, [pc, #88]	@ (8002b6c <TIM_OC2_SetConfig+0xe8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d113      	bne.n	8002b40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40010000 	.word	0x40010000
 8002b6c:	40010400 	.word	0x40010400

08002b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0303 	bic.w	r3, r3, #3
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a21      	ldr	r2, [pc, #132]	@ (8002c50 <TIM_OC3_SetConfig+0xe0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_OC3_SetConfig+0x66>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a20      	ldr	r2, [pc, #128]	@ (8002c54 <TIM_OC3_SetConfig+0xe4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10d      	bne.n	8002bf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a16      	ldr	r2, [pc, #88]	@ (8002c50 <TIM_OC3_SetConfig+0xe0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_OC3_SetConfig+0x92>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a15      	ldr	r2, [pc, #84]	@ (8002c54 <TIM_OC3_SetConfig+0xe4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d113      	bne.n	8002c2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	621a      	str	r2, [r3, #32]
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40010400 	.word	0x40010400

08002c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	031b      	lsls	r3, r3, #12
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a12      	ldr	r2, [pc, #72]	@ (8002cfc <TIM_OC4_SetConfig+0xa4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <TIM_OC4_SetConfig+0x68>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a11      	ldr	r2, [pc, #68]	@ (8002d00 <TIM_OC4_SetConfig+0xa8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d109      	bne.n	8002cd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	621a      	str	r2, [r3, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40010000 	.word	0x40010000
 8002d00:	40010400 	.word	0x40010400

08002d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f023 0201 	bic.w	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f023 030a 	bic.w	r3, r3, #10
 8002d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b087      	sub	sp, #28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f023 0210 	bic.w	r2, r3, #16
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	031b      	lsls	r3, r3, #12
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	621a      	str	r2, [r3, #32]
}
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f043 0307 	orr.w	r3, r3, #7
 8002de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	021a      	lsls	r2, r3, #8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	609a      	str	r2, [r3, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a1a      	ldr	r2, [r3, #32]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1a      	ldr	r2, [r3, #32]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	431a      	orrs	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e05a      	b.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a21      	ldr	r2, [pc, #132]	@ (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d022      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee8:	d01d      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1d      	ldr	r2, [pc, #116]	@ (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d018      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1a      	ldr	r2, [pc, #104]	@ (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	@ (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d009      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a17      	ldr	r2, [pc, #92]	@ (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a15      	ldr	r2, [pc, #84]	@ (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10c      	bne.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00
 8002f70:	40010400 	.word	0x40010400
 8002f74:	40014000 	.word	0x40014000
 8002f78:	40001800 	.word	0x40001800

08002f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e042      	b.n	8003014 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd fd56 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	@ 0x24
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f82b 	bl	800301c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800301c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003020:	b0c0      	sub	sp, #256	@ 0x100
 8003022:	af00      	add	r7, sp, #0
 8003024:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003038:	68d9      	ldr	r1, [r3, #12]
 800303a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	ea40 0301 	orr.w	r3, r0, r1
 8003044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	431a      	orrs	r2, r3
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	431a      	orrs	r2, r3
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003074:	f021 010c 	bic.w	r1, r1, #12
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003082:	430b      	orrs	r3, r1
 8003084:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003096:	6999      	ldr	r1, [r3, #24]
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	ea40 0301 	orr.w	r3, r0, r1
 80030a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4b8f      	ldr	r3, [pc, #572]	@ (80032e8 <UART_SetConfig+0x2cc>)
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d005      	beq.n	80030bc <UART_SetConfig+0xa0>
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b8d      	ldr	r3, [pc, #564]	@ (80032ec <UART_SetConfig+0x2d0>)
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d104      	bne.n	80030c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030bc:	f7fe fc66 	bl	800198c <HAL_RCC_GetPCLK2Freq>
 80030c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030c4:	e003      	b.n	80030ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030c6:	f7fe fc4d 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 80030ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030d8:	f040 810c 	bne.w	80032f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030e0:	2200      	movs	r2, #0
 80030e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030ee:	4622      	mov	r2, r4
 80030f0:	462b      	mov	r3, r5
 80030f2:	1891      	adds	r1, r2, r2
 80030f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030f6:	415b      	adcs	r3, r3
 80030f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030fe:	4621      	mov	r1, r4
 8003100:	eb12 0801 	adds.w	r8, r2, r1
 8003104:	4629      	mov	r1, r5
 8003106:	eb43 0901 	adc.w	r9, r3, r1
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800311a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800311e:	4690      	mov	r8, r2
 8003120:	4699      	mov	r9, r3
 8003122:	4623      	mov	r3, r4
 8003124:	eb18 0303 	adds.w	r3, r8, r3
 8003128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800312c:	462b      	mov	r3, r5
 800312e:	eb49 0303 	adc.w	r3, r9, r3
 8003132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003142:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003146:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800314a:	460b      	mov	r3, r1
 800314c:	18db      	adds	r3, r3, r3
 800314e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003150:	4613      	mov	r3, r2
 8003152:	eb42 0303 	adc.w	r3, r2, r3
 8003156:	657b      	str	r3, [r7, #84]	@ 0x54
 8003158:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800315c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003160:	f7fd f850 	bl	8000204 <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4b61      	ldr	r3, [pc, #388]	@ (80032f0 <UART_SetConfig+0x2d4>)
 800316a:	fba3 2302 	umull	r2, r3, r3, r2
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	011c      	lsls	r4, r3, #4
 8003172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003176:	2200      	movs	r2, #0
 8003178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800317c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003180:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	1891      	adds	r1, r2, r2
 800318a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800318c:	415b      	adcs	r3, r3
 800318e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003190:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003194:	4641      	mov	r1, r8
 8003196:	eb12 0a01 	adds.w	sl, r2, r1
 800319a:	4649      	mov	r1, r9
 800319c:	eb43 0b01 	adc.w	fp, r3, r1
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031b4:	4692      	mov	sl, r2
 80031b6:	469b      	mov	fp, r3
 80031b8:	4643      	mov	r3, r8
 80031ba:	eb1a 0303 	adds.w	r3, sl, r3
 80031be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031c2:	464b      	mov	r3, r9
 80031c4:	eb4b 0303 	adc.w	r3, fp, r3
 80031c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031e0:	460b      	mov	r3, r1
 80031e2:	18db      	adds	r3, r3, r3
 80031e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80031e6:	4613      	mov	r3, r2
 80031e8:	eb42 0303 	adc.w	r3, r2, r3
 80031ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031f6:	f7fd f805 	bl	8000204 <__aeabi_uldivmod>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	4b3b      	ldr	r3, [pc, #236]	@ (80032f0 <UART_SetConfig+0x2d4>)
 8003202:	fba3 2301 	umull	r2, r3, r3, r1
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2264      	movs	r2, #100	@ 0x64
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	1acb      	subs	r3, r1, r3
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003216:	4b36      	ldr	r3, [pc, #216]	@ (80032f0 <UART_SetConfig+0x2d4>)
 8003218:	fba3 2302 	umull	r2, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003224:	441c      	add	r4, r3
 8003226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800322a:	2200      	movs	r2, #0
 800322c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003230:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003234:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003238:	4642      	mov	r2, r8
 800323a:	464b      	mov	r3, r9
 800323c:	1891      	adds	r1, r2, r2
 800323e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003240:	415b      	adcs	r3, r3
 8003242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003248:	4641      	mov	r1, r8
 800324a:	1851      	adds	r1, r2, r1
 800324c:	6339      	str	r1, [r7, #48]	@ 0x30
 800324e:	4649      	mov	r1, r9
 8003250:	414b      	adcs	r3, r1
 8003252:	637b      	str	r3, [r7, #52]	@ 0x34
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003260:	4659      	mov	r1, fp
 8003262:	00cb      	lsls	r3, r1, #3
 8003264:	4651      	mov	r1, sl
 8003266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800326a:	4651      	mov	r1, sl
 800326c:	00ca      	lsls	r2, r1, #3
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	4603      	mov	r3, r0
 8003274:	4642      	mov	r2, r8
 8003276:	189b      	adds	r3, r3, r2
 8003278:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800327c:	464b      	mov	r3, r9
 800327e:	460a      	mov	r2, r1
 8003280:	eb42 0303 	adc.w	r3, r2, r3
 8003284:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003294:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003298:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800329c:	460b      	mov	r3, r1
 800329e:	18db      	adds	r3, r3, r3
 80032a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032a2:	4613      	mov	r3, r2
 80032a4:	eb42 0303 	adc.w	r3, r2, r3
 80032a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80032b2:	f7fc ffa7 	bl	8000204 <__aeabi_uldivmod>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4b0d      	ldr	r3, [pc, #52]	@ (80032f0 <UART_SetConfig+0x2d4>)
 80032bc:	fba3 1302 	umull	r1, r3, r3, r2
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	2164      	movs	r1, #100	@ 0x64
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	3332      	adds	r3, #50	@ 0x32
 80032ce:	4a08      	ldr	r2, [pc, #32]	@ (80032f0 <UART_SetConfig+0x2d4>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	f003 0207 	and.w	r2, r3, #7
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4422      	add	r2, r4
 80032e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032e4:	e106      	b.n	80034f4 <UART_SetConfig+0x4d8>
 80032e6:	bf00      	nop
 80032e8:	40011000 	.word	0x40011000
 80032ec:	40011400 	.word	0x40011400
 80032f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032f8:	2200      	movs	r2, #0
 80032fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003302:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003306:	4642      	mov	r2, r8
 8003308:	464b      	mov	r3, r9
 800330a:	1891      	adds	r1, r2, r2
 800330c:	6239      	str	r1, [r7, #32]
 800330e:	415b      	adcs	r3, r3
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
 8003312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003316:	4641      	mov	r1, r8
 8003318:	1854      	adds	r4, r2, r1
 800331a:	4649      	mov	r1, r9
 800331c:	eb43 0501 	adc.w	r5, r3, r1
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	00eb      	lsls	r3, r5, #3
 800332a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800332e:	00e2      	lsls	r2, r4, #3
 8003330:	4614      	mov	r4, r2
 8003332:	461d      	mov	r5, r3
 8003334:	4643      	mov	r3, r8
 8003336:	18e3      	adds	r3, r4, r3
 8003338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800333c:	464b      	mov	r3, r9
 800333e:	eb45 0303 	adc.w	r3, r5, r3
 8003342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003352:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003362:	4629      	mov	r1, r5
 8003364:	008b      	lsls	r3, r1, #2
 8003366:	4621      	mov	r1, r4
 8003368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800336c:	4621      	mov	r1, r4
 800336e:	008a      	lsls	r2, r1, #2
 8003370:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003374:	f7fc ff46 	bl	8000204 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4b60      	ldr	r3, [pc, #384]	@ (8003500 <UART_SetConfig+0x4e4>)
 800337e:	fba3 2302 	umull	r2, r3, r3, r2
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	011c      	lsls	r4, r3, #4
 8003386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800338a:	2200      	movs	r2, #0
 800338c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003390:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003394:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003398:	4642      	mov	r2, r8
 800339a:	464b      	mov	r3, r9
 800339c:	1891      	adds	r1, r2, r2
 800339e:	61b9      	str	r1, [r7, #24]
 80033a0:	415b      	adcs	r3, r3
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a8:	4641      	mov	r1, r8
 80033aa:	1851      	adds	r1, r2, r1
 80033ac:	6139      	str	r1, [r7, #16]
 80033ae:	4649      	mov	r1, r9
 80033b0:	414b      	adcs	r3, r1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033c0:	4659      	mov	r1, fp
 80033c2:	00cb      	lsls	r3, r1, #3
 80033c4:	4651      	mov	r1, sl
 80033c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ca:	4651      	mov	r1, sl
 80033cc:	00ca      	lsls	r2, r1, #3
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	4642      	mov	r2, r8
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033dc:	464b      	mov	r3, r9
 80033de:	460a      	mov	r2, r1
 80033e0:	eb42 0303 	adc.w	r3, r2, r3
 80033e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003400:	4649      	mov	r1, r9
 8003402:	008b      	lsls	r3, r1, #2
 8003404:	4641      	mov	r1, r8
 8003406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800340a:	4641      	mov	r1, r8
 800340c:	008a      	lsls	r2, r1, #2
 800340e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003412:	f7fc fef7 	bl	8000204 <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4611      	mov	r1, r2
 800341c:	4b38      	ldr	r3, [pc, #224]	@ (8003500 <UART_SetConfig+0x4e4>)
 800341e:	fba3 2301 	umull	r2, r3, r3, r1
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2264      	movs	r2, #100	@ 0x64
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	1acb      	subs	r3, r1, r3
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	3332      	adds	r3, #50	@ 0x32
 8003430:	4a33      	ldr	r2, [pc, #204]	@ (8003500 <UART_SetConfig+0x4e4>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800343c:	441c      	add	r4, r3
 800343e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003442:	2200      	movs	r2, #0
 8003444:	673b      	str	r3, [r7, #112]	@ 0x70
 8003446:	677a      	str	r2, [r7, #116]	@ 0x74
 8003448:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800344c:	4642      	mov	r2, r8
 800344e:	464b      	mov	r3, r9
 8003450:	1891      	adds	r1, r2, r2
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	415b      	adcs	r3, r3
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800345c:	4641      	mov	r1, r8
 800345e:	1851      	adds	r1, r2, r1
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	4649      	mov	r1, r9
 8003464:	414b      	adcs	r3, r1
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003474:	4659      	mov	r1, fp
 8003476:	00cb      	lsls	r3, r1, #3
 8003478:	4651      	mov	r1, sl
 800347a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800347e:	4651      	mov	r1, sl
 8003480:	00ca      	lsls	r2, r1, #3
 8003482:	4610      	mov	r0, r2
 8003484:	4619      	mov	r1, r3
 8003486:	4603      	mov	r3, r0
 8003488:	4642      	mov	r2, r8
 800348a:	189b      	adds	r3, r3, r2
 800348c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800348e:	464b      	mov	r3, r9
 8003490:	460a      	mov	r2, r1
 8003492:	eb42 0303 	adc.w	r3, r2, r3
 8003496:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80034a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034b0:	4649      	mov	r1, r9
 80034b2:	008b      	lsls	r3, r1, #2
 80034b4:	4641      	mov	r1, r8
 80034b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ba:	4641      	mov	r1, r8
 80034bc:	008a      	lsls	r2, r1, #2
 80034be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034c2:	f7fc fe9f 	bl	8000204 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003500 <UART_SetConfig+0x4e4>)
 80034cc:	fba3 1302 	umull	r1, r3, r3, r2
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	2164      	movs	r1, #100	@ 0x64
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	3332      	adds	r3, #50	@ 0x32
 80034de:	4a08      	ldr	r2, [pc, #32]	@ (8003500 <UART_SetConfig+0x4e4>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4422      	add	r2, r4
 80034f2:	609a      	str	r2, [r3, #8]
}
 80034f4:	bf00      	nop
 80034f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034fa:	46bd      	mov	sp, r7
 80034fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003500:	51eb851f 	.word	0x51eb851f

08003504 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003504:	b084      	sub	sp, #16
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	f107 001c 	add.w	r0, r7, #28
 8003512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003516:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800351a:	2b01      	cmp	r3, #1
 800351c:	d123      	bne.n	8003566 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003522:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003546:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa9a 	bl	8003a94 <USB_CoreReset>
 8003560:	4603      	mov	r3, r0
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	e01b      	b.n	800359e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fa8e 	bl	8003a94 <USB_CoreReset>
 8003578:	4603      	mov	r3, r0
 800357a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800357c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003588:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003590:	e005      	b.n	800359e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003596:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800359e:	7fbb      	ldrb	r3, [r7, #30]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10b      	bne.n	80035bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f043 0206 	orr.w	r2, r3, #6
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035c8:	b004      	add	sp, #16
 80035ca:	4770      	bx	lr

080035cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f023 0201 	bic.w	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d115      	bne.n	800363c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800361c:	200a      	movs	r0, #10
 800361e:	f7fd fbb7 	bl	8000d90 <HAL_Delay>
      ms += 10U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	330a      	adds	r3, #10
 8003626:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fa25 	bl	8003a78 <USB_GetMode>
 800362e:	4603      	mov	r3, r0
 8003630:	2b01      	cmp	r3, #1
 8003632:	d01e      	beq.n	8003672 <USB_SetCurrentMode+0x84>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2bc7      	cmp	r3, #199	@ 0xc7
 8003638:	d9f0      	bls.n	800361c <USB_SetCurrentMode+0x2e>
 800363a:	e01a      	b.n	8003672 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d115      	bne.n	800366e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800364e:	200a      	movs	r0, #10
 8003650:	f7fd fb9e 	bl	8000d90 <HAL_Delay>
      ms += 10U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	330a      	adds	r3, #10
 8003658:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fa0c 	bl	8003a78 <USB_GetMode>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <USB_SetCurrentMode+0x84>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2bc7      	cmp	r3, #199	@ 0xc7
 800366a:	d9f0      	bls.n	800364e <USB_SetCurrentMode+0x60>
 800366c:	e001      	b.n	8003672 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e005      	b.n	800367e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2bc8      	cmp	r3, #200	@ 0xc8
 8003676:	d101      	bne.n	800367c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003688:	b084      	sub	sp, #16
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	e009      	b.n	80036bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3340      	adds	r3, #64	@ 0x40
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	2200      	movs	r2, #0
 80036b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3301      	adds	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b0e      	cmp	r3, #14
 80036c0:	d9f2      	bls.n	80036a8 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d11c      	bne.n	8003704 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e005      	b.n	8003710 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003716:	461a      	mov	r2, r3
 8003718:	2300      	movs	r3, #0
 800371a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800371c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10d      	bne.n	8003740 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003728:	2b00      	cmp	r3, #0
 800372a:	d104      	bne.n	8003736 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800372c:	2100      	movs	r1, #0
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f968 	bl	8003a04 <USB_SetDevSpeed>
 8003734:	e008      	b.n	8003748 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003736:	2101      	movs	r1, #1
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f963 	bl	8003a04 <USB_SetDevSpeed>
 800373e:	e003      	b.n	8003748 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003740:	2103      	movs	r1, #3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f95e 	bl	8003a04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003748:	2110      	movs	r1, #16
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8fa 	bl	8003944 <USB_FlushTxFifo>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f924 	bl	80039a8 <USB_FlushRxFifo>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003770:	461a      	mov	r2, r3
 8003772:	2300      	movs	r3, #0
 8003774:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800377c:	461a      	mov	r2, r3
 800377e:	2300      	movs	r3, #0
 8003780:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003788:	461a      	mov	r2, r3
 800378a:	2300      	movs	r3, #0
 800378c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	e043      	b.n	800381c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037aa:	d118      	bne.n	80037de <USB_DevInit+0x156>
    {
      if (i == 0U)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037be:	461a      	mov	r2, r3
 80037c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e013      	b.n	80037f0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d4:	461a      	mov	r2, r3
 80037d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	e008      	b.n	80037f0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ea:	461a      	mov	r2, r3
 80037ec:	2300      	movs	r3, #0
 80037ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037fc:	461a      	mov	r2, r3
 80037fe:	2300      	movs	r3, #0
 8003800:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800380e:	461a      	mov	r2, r3
 8003810:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003814:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	3301      	adds	r3, #1
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003820:	461a      	mov	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4293      	cmp	r3, r2
 8003826:	d3b5      	bcc.n	8003794 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	e043      	b.n	80038b6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003840:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003844:	d118      	bne.n	8003878 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003858:	461a      	mov	r2, r3
 800385a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	e013      	b.n	800388a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386e:	461a      	mov	r2, r3
 8003870:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e008      	b.n	800388a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003884:	461a      	mov	r2, r3
 8003886:	2300      	movs	r3, #0
 8003888:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003896:	461a      	mov	r2, r3
 8003898:	2300      	movs	r3, #0
 800389a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a8:	461a      	mov	r2, r3
 80038aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	3301      	adds	r3, #1
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80038ba:	461a      	mov	r2, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4293      	cmp	r3, r2
 80038c0:	d3b5      	bcc.n	800382e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80038e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f043 0210 	orr.w	r2, r3, #16
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699a      	ldr	r2, [r3, #24]
 80038fc:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <USB_DevInit+0x2b8>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003904:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f043 0208 	orr.w	r2, r3, #8
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003918:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800391c:	2b01      	cmp	r3, #1
 800391e:	d107      	bne.n	8003930 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003930:	7dfb      	ldrb	r3, [r7, #23]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800393c:	b004      	add	sp, #16
 800393e:	4770      	bx	lr
 8003940:	803c3800 	.word	0x803c3800

08003944 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3301      	adds	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800395e:	d901      	bls.n	8003964 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e01b      	b.n	800399c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	daf2      	bge.n	8003952 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	019b      	lsls	r3, r3, #6
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3301      	adds	r3, #1
 8003980:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003988:	d901      	bls.n	800398e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e006      	b.n	800399c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b20      	cmp	r3, #32
 8003998:	d0f0      	beq.n	800397c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039c0:	d901      	bls.n	80039c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e018      	b.n	80039f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	daf2      	bge.n	80039b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2210      	movs	r2, #16
 80039d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3301      	adds	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039e4:	d901      	bls.n	80039ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e006      	b.n	80039f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d0f0      	beq.n	80039d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	68f9      	ldr	r1, [r7, #12]
 8003a20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003a50:	f023 0303 	bic.w	r3, r3, #3
 8003a54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a64:	f043 0302 	orr.w	r3, r3, #2
 8003a68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f003 0301 	and.w	r3, r3, #1
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003aac:	d901      	bls.n	8003ab2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e01b      	b.n	8003aea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	daf2      	bge.n	8003aa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3301      	adds	r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ad6:	d901      	bls.n	8003adc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e006      	b.n	8003aea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d0f0      	beq.n	8003aca <USB_CoreReset+0x36>

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <memset>:
 8003af6:	4402      	add	r2, r0
 8003af8:	4603      	mov	r3, r0
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d100      	bne.n	8003b00 <memset+0xa>
 8003afe:	4770      	bx	lr
 8003b00:	f803 1b01 	strb.w	r1, [r3], #1
 8003b04:	e7f9      	b.n	8003afa <memset+0x4>
	...

08003b08 <__libc_init_array>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003b40 <__libc_init_array+0x38>)
 8003b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8003b44 <__libc_init_array+0x3c>)
 8003b0e:	1b64      	subs	r4, r4, r5
 8003b10:	10a4      	asrs	r4, r4, #2
 8003b12:	2600      	movs	r6, #0
 8003b14:	42a6      	cmp	r6, r4
 8003b16:	d109      	bne.n	8003b2c <__libc_init_array+0x24>
 8003b18:	4d0b      	ldr	r5, [pc, #44]	@ (8003b48 <__libc_init_array+0x40>)
 8003b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8003b4c <__libc_init_array+0x44>)
 8003b1c:	f000 f818 	bl	8003b50 <_init>
 8003b20:	1b64      	subs	r4, r4, r5
 8003b22:	10a4      	asrs	r4, r4, #2
 8003b24:	2600      	movs	r6, #0
 8003b26:	42a6      	cmp	r6, r4
 8003b28:	d105      	bne.n	8003b36 <__libc_init_array+0x2e>
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b30:	4798      	blx	r3
 8003b32:	3601      	adds	r6, #1
 8003b34:	e7ee      	b.n	8003b14 <__libc_init_array+0xc>
 8003b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3a:	4798      	blx	r3
 8003b3c:	3601      	adds	r6, #1
 8003b3e:	e7f2      	b.n	8003b26 <__libc_init_array+0x1e>
 8003b40:	08003b88 	.word	0x08003b88
 8003b44:	08003b88 	.word	0x08003b88
 8003b48:	08003b88 	.word	0x08003b88
 8003b4c:	08003b8c 	.word	0x08003b8c

08003b50 <_init>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr

08003b5c <_fini>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr
